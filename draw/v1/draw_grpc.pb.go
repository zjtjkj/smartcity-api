// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: draw/v1/draw.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrawClient is the client API for Draw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrawClient interface {
	DrawImage(ctx context.Context, in *DrawImageRequest, opts ...grpc.CallOption) (*DrawImageReply, error)
}

type drawClient struct {
	cc grpc.ClientConnInterface
}

func NewDrawClient(cc grpc.ClientConnInterface) DrawClient {
	return &drawClient{cc}
}

func (c *drawClient) DrawImage(ctx context.Context, in *DrawImageRequest, opts ...grpc.CallOption) (*DrawImageReply, error) {
	out := new(DrawImageReply)
	err := c.cc.Invoke(ctx, "/api.draw.v1.Draw/DrawImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrawServer is the server API for Draw service.
// All implementations must embed UnimplementedDrawServer
// for forward compatibility
type DrawServer interface {
	DrawImage(context.Context, *DrawImageRequest) (*DrawImageReply, error)
	mustEmbedUnimplementedDrawServer()
}

// UnimplementedDrawServer must be embedded to have forward compatible implementations.
type UnimplementedDrawServer struct {
}

func (UnimplementedDrawServer) DrawImage(context.Context, *DrawImageRequest) (*DrawImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawImage not implemented")
}
func (UnimplementedDrawServer) mustEmbedUnimplementedDrawServer() {}

// UnsafeDrawServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrawServer will
// result in compilation errors.
type UnsafeDrawServer interface {
	mustEmbedUnimplementedDrawServer()
}

func RegisterDrawServer(s grpc.ServiceRegistrar, srv DrawServer) {
	s.RegisterService(&Draw_ServiceDesc, srv)
}

func _Draw_DrawImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrawServer).DrawImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.draw.v1.Draw/DrawImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrawServer).DrawImage(ctx, req.(*DrawImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Draw_ServiceDesc is the grpc.ServiceDesc for Draw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Draw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.draw.v1.Draw",
	HandlerType: (*DrawServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DrawImage",
			Handler:    _Draw_DrawImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draw/v1/draw.proto",
}
