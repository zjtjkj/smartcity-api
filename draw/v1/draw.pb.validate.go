// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: draw/v1/draw.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DrawImageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DrawImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawImageRequestMultiError, or nil if none found.
func (m *DrawImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DrawImageRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DrawImageRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DrawImageRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetImages()) < 1 {
		err := DrawImageRequestValidationError{
			field:  "Images",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DrawImageRequestValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DrawImageRequestValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DrawImageRequestValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DrawImageRequestMultiError(errors)
	}

	return nil
}

// DrawImageRequestMultiError is an error wrapping multiple validation errors
// returned by DrawImageRequest.ValidateAll() if the designated constraints
// aren't met.
type DrawImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawImageRequestMultiError) AllErrors() []error { return m }

// DrawImageRequestValidationError is the validation error returned by
// DrawImageRequest.Validate if the designated constraints aren't met.
type DrawImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawImageRequestValidationError) ErrorName() string { return "DrawImageRequestValidationError" }

// Error satisfies the builtin error interface
func (e DrawImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawImageRequestValidationError{}

// Validate checks the field values on DrawImageReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DrawImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawImageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DrawImageReplyMultiError,
// or nil if none found.
func (m *DrawImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if len(errors) > 0 {
		return DrawImageReplyMultiError(errors)
	}

	return nil
}

// DrawImageReplyMultiError is an error wrapping multiple validation errors
// returned by DrawImageReply.ValidateAll() if the designated constraints
// aren't met.
type DrawImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawImageReplyMultiError) AllErrors() []error { return m }

// DrawImageReplyValidationError is the validation error returned by
// DrawImageReply.Validate if the designated constraints aren't met.
type DrawImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawImageReplyValidationError) ErrorName() string { return "DrawImageReplyValidationError" }

// Error satisfies the builtin error interface
func (e DrawImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawImageReplyValidationError{}

// Validate checks the field values on DrawImageRequest_Point with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DrawImageRequest_Point) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawImageRequest_Point with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawImageRequest_PointMultiError, or nil if none found.
func (m *DrawImageRequest_Point) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawImageRequest_Point) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetX() > 10000 {
		err := DrawImageRequest_PointValidationError{
			field:  "X",
			reason: "value must be less than or equal to 10000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetY() > 10000 {
		err := DrawImageRequest_PointValidationError{
			field:  "Y",
			reason: "value must be less than or equal to 10000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DrawImageRequest_PointMultiError(errors)
	}

	return nil
}

// DrawImageRequest_PointMultiError is an error wrapping multiple validation
// errors returned by DrawImageRequest_Point.ValidateAll() if the designated
// constraints aren't met.
type DrawImageRequest_PointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawImageRequest_PointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawImageRequest_PointMultiError) AllErrors() []error { return m }

// DrawImageRequest_PointValidationError is the validation error returned by
// DrawImageRequest_Point.Validate if the designated constraints aren't met.
type DrawImageRequest_PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawImageRequest_PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawImageRequest_PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawImageRequest_PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawImageRequest_PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawImageRequest_PointValidationError) ErrorName() string {
	return "DrawImageRequest_PointValidationError"
}

// Error satisfies the builtin error interface
func (e DrawImageRequest_PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawImageRequest_Point.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawImageRequest_PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawImageRequest_PointValidationError{}

// Validate checks the field values on DrawImageRequest_Object with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DrawImageRequest_Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawImageRequest_Object with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawImageRequest_ObjectMultiError, or nil if none found.
func (m *DrawImageRequest_Object) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawImageRequest_Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBorderR() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "BorderR",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBorderG() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "BorderG",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBorderB() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "BorderB",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBorderA() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "BorderA",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelR() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelR",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelG() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelG",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelB() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelB",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelA() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelA",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundR() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelBackgroundR",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundG() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelBackgroundG",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundB() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelBackgroundB",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundA() > 255 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "LabelBackgroundA",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LabelContent

	if m.GetFontSize() > 50 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "FontSize",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBorderWidth() > 200 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "BorderWidth",
			reason: "value must be less than or equal to 200",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Position

	if len(m.GetPoints()) < 2 {
		err := DrawImageRequest_ObjectValidationError{
			field:  "Points",
			reason: "value must contain at least 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DrawImageRequest_ObjectValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DrawImageRequest_ObjectValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DrawImageRequest_ObjectValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DrawImageRequest_ObjectMultiError(errors)
	}

	return nil
}

// DrawImageRequest_ObjectMultiError is an error wrapping multiple validation
// errors returned by DrawImageRequest_Object.ValidateAll() if the designated
// constraints aren't met.
type DrawImageRequest_ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawImageRequest_ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawImageRequest_ObjectMultiError) AllErrors() []error { return m }

// DrawImageRequest_ObjectValidationError is the validation error returned by
// DrawImageRequest_Object.Validate if the designated constraints aren't met.
type DrawImageRequest_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawImageRequest_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawImageRequest_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawImageRequest_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawImageRequest_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawImageRequest_ObjectValidationError) ErrorName() string {
	return "DrawImageRequest_ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e DrawImageRequest_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawImageRequest_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawImageRequest_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawImageRequest_ObjectValidationError{}

// Validate checks the field values on DrawImageRequest_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DrawImageRequest_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawImageRequest_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawImageRequest_ImageMultiError, or nil if none found.
func (m *DrawImageRequest_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawImageRequest_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetSrc()) < 1 {
		err := DrawImageRequest_ImageValidationError{
			field:  "Src",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuality() > 100 {
		err := DrawImageRequest_ImageValidationError{
			field:  "Quality",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DrawImageRequest_ImageValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DrawImageRequest_ImageValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DrawImageRequest_ImageValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DrawImageRequest_ImageMultiError(errors)
	}

	return nil
}

// DrawImageRequest_ImageMultiError is an error wrapping multiple validation
// errors returned by DrawImageRequest_Image.ValidateAll() if the designated
// constraints aren't met.
type DrawImageRequest_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawImageRequest_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawImageRequest_ImageMultiError) AllErrors() []error { return m }

// DrawImageRequest_ImageValidationError is the validation error returned by
// DrawImageRequest_Image.Validate if the designated constraints aren't met.
type DrawImageRequest_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawImageRequest_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawImageRequest_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawImageRequest_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawImageRequest_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawImageRequest_ImageValidationError) ErrorName() string {
	return "DrawImageRequest_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e DrawImageRequest_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawImageRequest_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawImageRequest_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawImageRequest_ImageValidationError{}

// Validate checks the field values on DrawImageRequest_Config with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DrawImageRequest_Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawImageRequest_Config with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawImageRequest_ConfigMultiError, or nil if none found.
func (m *DrawImageRequest_Config) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawImageRequest_Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Combination

	// no validation rules for LabelContent

	if m.GetLabelR() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelR",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelG() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelG",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelB() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelB",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelA() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelA",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundR() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelBackgroundR",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundG() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelBackgroundG",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundB() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelBackgroundB",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLabelBackgroundA() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "LabelBackgroundA",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFontSize() > 50 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "FontSize",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBackgroundR() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "BackgroundR",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBackgroundG() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "BackgroundG",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBackgroundB() > 255 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "BackgroundB",
			reason: "value must be less than or equal to 255",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBackgroundA() > 1 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "BackgroundA",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuality() > 100 {
		err := DrawImageRequest_ConfigValidationError{
			field:  "Quality",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Mode

	// no validation rules for Position

	if len(errors) > 0 {
		return DrawImageRequest_ConfigMultiError(errors)
	}

	return nil
}

// DrawImageRequest_ConfigMultiError is an error wrapping multiple validation
// errors returned by DrawImageRequest_Config.ValidateAll() if the designated
// constraints aren't met.
type DrawImageRequest_ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawImageRequest_ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawImageRequest_ConfigMultiError) AllErrors() []error { return m }

// DrawImageRequest_ConfigValidationError is the validation error returned by
// DrawImageRequest_Config.Validate if the designated constraints aren't met.
type DrawImageRequest_ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawImageRequest_ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawImageRequest_ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawImageRequest_ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawImageRequest_ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawImageRequest_ConfigValidationError) ErrorName() string {
	return "DrawImageRequest_ConfigValidationError"
}

// Error satisfies the builtin error interface
func (e DrawImageRequest_ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawImageRequest_Config.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawImageRequest_ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawImageRequest_ConfigValidationError{}
