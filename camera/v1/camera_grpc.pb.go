// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: camera/v1/camera.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraClient interface {
	CreateCamera(ctx context.Context, in *CreateCameraRequest, opts ...grpc.CallOption) (*CreateCameraReply, error)
	UpdateCamera(ctx context.Context, in *UpdateCameraRequest, opts ...grpc.CallOption) (*UpdateCameraReply, error)
	DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...grpc.CallOption) (*DeleteCameraReply, error)
	GetCamera(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraReply, error)
	ListCameraByRegion(ctx context.Context, in *ListCameraByRegionRequest, opts ...grpc.CallOption) (*ListCameraByRegionReply, error)
	ListCameraByKey(ctx context.Context, in *ListCameraByKeyRequest, opts ...grpc.CallOption) (*ListCameraByKeyReply, error)
}

type cameraClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraClient(cc grpc.ClientConnInterface) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) CreateCamera(ctx context.Context, in *CreateCameraRequest, opts ...grpc.CallOption) (*CreateCameraReply, error) {
	out := new(CreateCameraReply)
	err := c.cc.Invoke(ctx, "/api.camera.v1.Camera/CreateCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) UpdateCamera(ctx context.Context, in *UpdateCameraRequest, opts ...grpc.CallOption) (*UpdateCameraReply, error) {
	out := new(UpdateCameraReply)
	err := c.cc.Invoke(ctx, "/api.camera.v1.Camera/UpdateCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...grpc.CallOption) (*DeleteCameraReply, error) {
	out := new(DeleteCameraReply)
	err := c.cc.Invoke(ctx, "/api.camera.v1.Camera/DeleteCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) GetCamera(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraReply, error) {
	out := new(GetCameraReply)
	err := c.cc.Invoke(ctx, "/api.camera.v1.Camera/GetCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) ListCameraByRegion(ctx context.Context, in *ListCameraByRegionRequest, opts ...grpc.CallOption) (*ListCameraByRegionReply, error) {
	out := new(ListCameraByRegionReply)
	err := c.cc.Invoke(ctx, "/api.camera.v1.Camera/ListCameraByRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) ListCameraByKey(ctx context.Context, in *ListCameraByKeyRequest, opts ...grpc.CallOption) (*ListCameraByKeyReply, error) {
	out := new(ListCameraByKeyReply)
	err := c.cc.Invoke(ctx, "/api.camera.v1.Camera/ListCameraByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
// All implementations must embed UnimplementedCameraServer
// for forward compatibility
type CameraServer interface {
	CreateCamera(context.Context, *CreateCameraRequest) (*CreateCameraReply, error)
	UpdateCamera(context.Context, *UpdateCameraRequest) (*UpdateCameraReply, error)
	DeleteCamera(context.Context, *DeleteCameraRequest) (*DeleteCameraReply, error)
	GetCamera(context.Context, *GetCameraRequest) (*GetCameraReply, error)
	ListCameraByRegion(context.Context, *ListCameraByRegionRequest) (*ListCameraByRegionReply, error)
	ListCameraByKey(context.Context, *ListCameraByKeyRequest) (*ListCameraByKeyReply, error)
	mustEmbedUnimplementedCameraServer()
}

// UnimplementedCameraServer must be embedded to have forward compatible implementations.
type UnimplementedCameraServer struct {
}

func (UnimplementedCameraServer) CreateCamera(context.Context, *CreateCameraRequest) (*CreateCameraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCamera not implemented")
}
func (UnimplementedCameraServer) UpdateCamera(context.Context, *UpdateCameraRequest) (*UpdateCameraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCamera not implemented")
}
func (UnimplementedCameraServer) DeleteCamera(context.Context, *DeleteCameraRequest) (*DeleteCameraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCamera not implemented")
}
func (UnimplementedCameraServer) GetCamera(context.Context, *GetCameraRequest) (*GetCameraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCamera not implemented")
}
func (UnimplementedCameraServer) ListCameraByRegion(context.Context, *ListCameraByRegionRequest) (*ListCameraByRegionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameraByRegion not implemented")
}
func (UnimplementedCameraServer) ListCameraByKey(context.Context, *ListCameraByKeyRequest) (*ListCameraByKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameraByKey not implemented")
}
func (UnimplementedCameraServer) mustEmbedUnimplementedCameraServer() {}

// UnsafeCameraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServer will
// result in compilation errors.
type UnsafeCameraServer interface {
	mustEmbedUnimplementedCameraServer()
}

func RegisterCameraServer(s grpc.ServiceRegistrar, srv CameraServer) {
	s.RegisterService(&Camera_ServiceDesc, srv)
}

func _Camera_CreateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).CreateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.camera.v1.Camera/CreateCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).CreateCamera(ctx, req.(*CreateCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_UpdateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).UpdateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.camera.v1.Camera/UpdateCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).UpdateCamera(ctx, req.(*UpdateCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_DeleteCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).DeleteCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.camera.v1.Camera/DeleteCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).DeleteCamera(ctx, req.(*DeleteCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_GetCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).GetCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.camera.v1.Camera/GetCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).GetCamera(ctx, req.(*GetCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_ListCameraByRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCameraByRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).ListCameraByRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.camera.v1.Camera/ListCameraByRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).ListCameraByRegion(ctx, req.(*ListCameraByRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_ListCameraByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCameraByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).ListCameraByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.camera.v1.Camera/ListCameraByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).ListCameraByKey(ctx, req.(*ListCameraByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Camera_ServiceDesc is the grpc.ServiceDesc for Camera service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Camera_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.camera.v1.Camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCamera",
			Handler:    _Camera_CreateCamera_Handler,
		},
		{
			MethodName: "UpdateCamera",
			Handler:    _Camera_UpdateCamera_Handler,
		},
		{
			MethodName: "DeleteCamera",
			Handler:    _Camera_DeleteCamera_Handler,
		},
		{
			MethodName: "GetCamera",
			Handler:    _Camera_GetCamera_Handler,
		},
		{
			MethodName: "ListCameraByRegion",
			Handler:    _Camera_ListCameraByRegion_Handler,
		},
		{
			MethodName: "ListCameraByKey",
			Handler:    _Camera_ListCameraByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera/v1/camera.proto",
}
