// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: camera/v1/camera.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceMultiError, or nil
// if none found.
func (m *Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for Icon

	// no validation rules for Source

	// no validation rules for Manufacture

	// no validation rules for Movable

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Desc

	// no validation rules for GbDeviceId

	// no validation rules for GbChannelId

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Rtsp

	// no validation rules for Attr

	if len(errors) > 0 {
		return InstanceMultiError(errors)
	}

	return nil
}

// InstanceMultiError is an error wrapping multiple validation errors returned
// by Instance.ValidateAll() if the designated constraints aren't met.
type InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMultiError) AllErrors() []error { return m }

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on CreateCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCameraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCameraRequestMultiError, or nil if none found.
func (m *CreateCameraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCameraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateCameraRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Region

	// no validation rules for Icon

	// no validation rules for Source

	// no validation rules for Manufacture

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Desc

	// no validation rules for GbDeviceId

	// no validation rules for GbChannelId

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Rtsp

	// no validation rules for Movable

	// no validation rules for Attr

	if len(errors) > 0 {
		return CreateCameraRequestMultiError(errors)
	}

	return nil
}

// CreateCameraRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCameraRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCameraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCameraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCameraRequestMultiError) AllErrors() []error { return m }

// CreateCameraRequestValidationError is the validation error returned by
// CreateCameraRequest.Validate if the designated constraints aren't met.
type CreateCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraRequestValidationError) ErrorName() string {
	return "CreateCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraRequestValidationError{}

// Validate checks the field values on CreateCameraReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCameraReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCameraReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCameraReplyMultiError, or nil if none found.
func (m *CreateCameraReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCameraReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCameraReplyMultiError(errors)
	}

	return nil
}

// CreateCameraReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCameraReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCameraReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCameraReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCameraReplyMultiError) AllErrors() []error { return m }

// CreateCameraReplyValidationError is the validation error returned by
// CreateCameraReply.Validate if the designated constraints aren't met.
type CreateCameraReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraReplyValidationError) ErrorName() string {
	return "CreateCameraReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraReplyValidationError{}

// Validate checks the field values on UpdateCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCameraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCameraRequestMultiError, or nil if none found.
func (m *UpdateCameraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCameraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Region

	// no validation rules for Name

	// no validation rules for Movable

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Desc

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Rtsp

	if len(errors) > 0 {
		return UpdateCameraRequestMultiError(errors)
	}

	return nil
}

// UpdateCameraRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCameraRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCameraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCameraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCameraRequestMultiError) AllErrors() []error { return m }

// UpdateCameraRequestValidationError is the validation error returned by
// UpdateCameraRequest.Validate if the designated constraints aren't met.
type UpdateCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCameraRequestValidationError) ErrorName() string {
	return "UpdateCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCameraRequestValidationError{}

// Validate checks the field values on UpdateCameraReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCameraReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCameraReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCameraReplyMultiError, or nil if none found.
func (m *UpdateCameraReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCameraReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCameraReplyMultiError(errors)
	}

	return nil
}

// UpdateCameraReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCameraReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCameraReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCameraReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCameraReplyMultiError) AllErrors() []error { return m }

// UpdateCameraReplyValidationError is the validation error returned by
// UpdateCameraReply.Validate if the designated constraints aren't met.
type UpdateCameraReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCameraReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCameraReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCameraReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCameraReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCameraReplyValidationError) ErrorName() string {
	return "UpdateCameraReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCameraReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCameraReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCameraReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCameraReplyValidationError{}

// Validate checks the field values on DeleteCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCameraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCameraRequestMultiError, or nil if none found.
func (m *DeleteCameraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCameraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCameraRequestMultiError(errors)
	}

	return nil
}

// DeleteCameraRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCameraRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCameraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCameraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCameraRequestMultiError) AllErrors() []error { return m }

// DeleteCameraRequestValidationError is the validation error returned by
// DeleteCameraRequest.Validate if the designated constraints aren't met.
type DeleteCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraRequestValidationError) ErrorName() string {
	return "DeleteCameraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraRequestValidationError{}

// Validate checks the field values on DeleteCameraReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCameraReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCameraReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCameraReplyMultiError, or nil if none found.
func (m *DeleteCameraReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCameraReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCameraReplyMultiError(errors)
	}

	return nil
}

// DeleteCameraReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCameraReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCameraReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCameraReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCameraReplyMultiError) AllErrors() []error { return m }

// DeleteCameraReplyValidationError is the validation error returned by
// DeleteCameraReply.Validate if the designated constraints aren't met.
type DeleteCameraReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraReplyValidationError) ErrorName() string {
	return "DeleteCameraReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraReplyValidationError{}

// Validate checks the field values on GetCameraRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCameraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraRequestMultiError, or nil if none found.
func (m *GetCameraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCameraRequestMultiError(errors)
	}

	return nil
}

// GetCameraRequestMultiError is an error wrapping multiple validation errors
// returned by GetCameraRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCameraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraRequestMultiError) AllErrors() []error { return m }

// GetCameraRequestValidationError is the validation error returned by
// GetCameraRequest.Validate if the designated constraints aren't met.
type GetCameraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraRequestValidationError) ErrorName() string { return "GetCameraRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCameraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraRequestValidationError{}

// Validate checks the field values on GetCameraReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCameraReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCameraReplyMultiError,
// or nil if none found.
func (m *GetCameraReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCamera()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCameraReplyValidationError{
					field:  "Camera",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCameraReplyValidationError{
					field:  "Camera",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCamera()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCameraReplyValidationError{
				field:  "Camera",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCameraReplyMultiError(errors)
	}

	return nil
}

// GetCameraReplyMultiError is an error wrapping multiple validation errors
// returned by GetCameraReply.ValidateAll() if the designated constraints
// aren't met.
type GetCameraReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraReplyMultiError) AllErrors() []error { return m }

// GetCameraReplyValidationError is the validation error returned by
// GetCameraReply.Validate if the designated constraints aren't met.
type GetCameraReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraReplyValidationError) ErrorName() string { return "GetCameraReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCameraReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraReplyValidationError{}

// Validate checks the field values on GetCameraByGBInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCameraByGBInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraByGBInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraByGBInfoRequestMultiError, or nil if none found.
func (m *GetCameraByGBInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraByGBInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Device

	// no validation rules for Channel

	if len(errors) > 0 {
		return GetCameraByGBInfoRequestMultiError(errors)
	}

	return nil
}

// GetCameraByGBInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetCameraByGBInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCameraByGBInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraByGBInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraByGBInfoRequestMultiError) AllErrors() []error { return m }

// GetCameraByGBInfoRequestValidationError is the validation error returned by
// GetCameraByGBInfoRequest.Validate if the designated constraints aren't met.
type GetCameraByGBInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraByGBInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraByGBInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraByGBInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraByGBInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraByGBInfoRequestValidationError) ErrorName() string {
	return "GetCameraByGBInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraByGBInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraByGBInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraByGBInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraByGBInfoRequestValidationError{}

// Validate checks the field values on GetCameraByGBInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCameraByGBInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraByGBInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraByGBInfoReplyMultiError, or nil if none found.
func (m *GetCameraByGBInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraByGBInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCamera()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCameraByGBInfoReplyValidationError{
					field:  "Camera",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCameraByGBInfoReplyValidationError{
					field:  "Camera",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCamera()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCameraByGBInfoReplyValidationError{
				field:  "Camera",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCameraByGBInfoReplyMultiError(errors)
	}

	return nil
}

// GetCameraByGBInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetCameraByGBInfoReply.ValidateAll() if the designated
// constraints aren't met.
type GetCameraByGBInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraByGBInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraByGBInfoReplyMultiError) AllErrors() []error { return m }

// GetCameraByGBInfoReplyValidationError is the validation error returned by
// GetCameraByGBInfoReply.Validate if the designated constraints aren't met.
type GetCameraByGBInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraByGBInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraByGBInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraByGBInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraByGBInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraByGBInfoReplyValidationError) ErrorName() string {
	return "GetCameraByGBInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraByGBInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraByGBInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraByGBInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraByGBInfoReplyValidationError{}

// Validate checks the field values on ListCameraByRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraByRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraByRegionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraByRegionRequestMultiError, or nil if none found.
func (m *ListCameraByRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraByRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Index

	// no validation rules for Size

	if len(errors) > 0 {
		return ListCameraByRegionRequestMultiError(errors)
	}

	return nil
}

// ListCameraByRegionRequestMultiError is an error wrapping multiple validation
// errors returned by ListCameraByRegionRequest.ValidateAll() if the
// designated constraints aren't met.
type ListCameraByRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraByRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraByRegionRequestMultiError) AllErrors() []error { return m }

// ListCameraByRegionRequestValidationError is the validation error returned by
// ListCameraByRegionRequest.Validate if the designated constraints aren't met.
type ListCameraByRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraByRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraByRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraByRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraByRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraByRegionRequestValidationError) ErrorName() string {
	return "ListCameraByRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraByRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraByRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraByRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraByRegionRequestValidationError{}

// Validate checks the field values on ListCameraByRegionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraByRegionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraByRegionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraByRegionReplyMultiError, or nil if none found.
func (m *ListCameraByRegionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraByRegionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCamera() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCameraByRegionReplyValidationError{
						field:  fmt.Sprintf("Camera[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCameraByRegionReplyValidationError{
						field:  fmt.Sprintf("Camera[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCameraByRegionReplyValidationError{
					field:  fmt.Sprintf("Camera[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Index

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCameraByRegionReplyMultiError(errors)
	}

	return nil
}

// ListCameraByRegionReplyMultiError is an error wrapping multiple validation
// errors returned by ListCameraByRegionReply.ValidateAll() if the designated
// constraints aren't met.
type ListCameraByRegionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraByRegionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraByRegionReplyMultiError) AllErrors() []error { return m }

// ListCameraByRegionReplyValidationError is the validation error returned by
// ListCameraByRegionReply.Validate if the designated constraints aren't met.
type ListCameraByRegionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraByRegionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraByRegionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraByRegionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraByRegionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraByRegionReplyValidationError) ErrorName() string {
	return "ListCameraByRegionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraByRegionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraByRegionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraByRegionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraByRegionReplyValidationError{}

// Validate checks the field values on ListCameraByKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraByKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraByKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraByKeyRequestMultiError, or nil if none found.
func (m *ListCameraByKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraByKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Index

	// no validation rules for Size

	if len(errors) > 0 {
		return ListCameraByKeyRequestMultiError(errors)
	}

	return nil
}

// ListCameraByKeyRequestMultiError is an error wrapping multiple validation
// errors returned by ListCameraByKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCameraByKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraByKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraByKeyRequestMultiError) AllErrors() []error { return m }

// ListCameraByKeyRequestValidationError is the validation error returned by
// ListCameraByKeyRequest.Validate if the designated constraints aren't met.
type ListCameraByKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraByKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraByKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraByKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraByKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraByKeyRequestValidationError) ErrorName() string {
	return "ListCameraByKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraByKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraByKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraByKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraByKeyRequestValidationError{}

// Validate checks the field values on ListCameraByKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraByKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraByKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraByKeyReplyMultiError, or nil if none found.
func (m *ListCameraByKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraByKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCamera() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCameraByKeyReplyValidationError{
						field:  fmt.Sprintf("Camera[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCameraByKeyReplyValidationError{
						field:  fmt.Sprintf("Camera[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCameraByKeyReplyValidationError{
					field:  fmt.Sprintf("Camera[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Index

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCameraByKeyReplyMultiError(errors)
	}

	return nil
}

// ListCameraByKeyReplyMultiError is an error wrapping multiple validation
// errors returned by ListCameraByKeyReply.ValidateAll() if the designated
// constraints aren't met.
type ListCameraByKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraByKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraByKeyReplyMultiError) AllErrors() []error { return m }

// ListCameraByKeyReplyValidationError is the validation error returned by
// ListCameraByKeyReply.Validate if the designated constraints aren't met.
type ListCameraByKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraByKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraByKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraByKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraByKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraByKeyReplyValidationError) ErrorName() string {
	return "ListCameraByKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraByKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraByKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraByKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraByKeyReplyValidationError{}
