// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.0
// source: api/gb/v1/gb.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGBCreateGroup = "/api.gb.v1.GB/CreateGroup"
const OperationGBDeleteChannel = "/api.gb.v1.GB/DeleteChannel"
const OperationGBDeleteGroup = "/api.gb.v1.GB/DeleteGroup"
const OperationGBFindChannelsById = "/api.gb.v1.GB/FindChannelsById"
const OperationGBFindGroupsByChannels = "/api.gb.v1.GB/FindGroupsByChannels"
const OperationGBGetChannel = "/api.gb.v1.GB/GetChannel"
const OperationGBListChannels = "/api.gb.v1.GB/ListChannels"
const OperationGBListGroups = "/api.gb.v1.GB/ListGroups"
const OperationGBStarChannel = "/api.gb.v1.GB/StarChannel"
const OperationGBUpdateGroup = "/api.gb.v1.GB/UpdateGroup"

type GBHTTPServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelReply, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	FindChannelsById(context.Context, *FindChannelsByIdRequest) (*FindChannelsByIdReply, error)
	FindGroupsByChannels(context.Context, *FindGroupsByChannelsRequest) (*FindGroupsByChannelsReply, error)
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelReply, error)
	ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsReply, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsReply, error)
	StarChannel(context.Context, *StarChannelRequest) (*StarChannelReply, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupReply, error)
}

func RegisterGBHTTPServer(s *http.Server, srv GBHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/gb/group/create", _GB_CreateGroup0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/update", _GB_UpdateGroup0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/delete", _GB_DeleteGroup0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/list", _GB_ListGroups0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/find", _GB_FindGroupsByChannels0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/channel/star", _GB_StarChannel0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/channel/delete", _GB_DeleteChannel0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/channel/list", _GB_ListChannels0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/channel/get", _GB_GetChannel0_HTTP_Handler(srv))
	r.POST("/api/v1/gb/group/channel/find", _GB_FindChannelsById0_HTTP_Handler(srv))
}

func _GB_CreateGroup0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBCreateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGroup(ctx, req.(*CreateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGroupReply)
		return ctx.Result(200, reply)
	}
}

func _GB_UpdateGroup0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBUpdateGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGroup(ctx, req.(*UpdateGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGroupReply)
		return ctx.Result(200, reply)
	}
}

func _GB_DeleteGroup0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBDeleteGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGroup(ctx, req.(*DeleteGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGroupReply)
		return ctx.Result(200, reply)
	}
}

func _GB_ListGroups0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBListGroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGroups(ctx, req.(*ListGroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGroupsReply)
		return ctx.Result(200, reply)
	}
}

func _GB_FindGroupsByChannels0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindGroupsByChannelsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBFindGroupsByChannels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindGroupsByChannels(ctx, req.(*FindGroupsByChannelsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindGroupsByChannelsReply)
		return ctx.Result(200, reply)
	}
}

func _GB_StarChannel0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StarChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBStarChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StarChannel(ctx, req.(*StarChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StarChannelReply)
		return ctx.Result(200, reply)
	}
}

func _GB_DeleteChannel0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBDeleteChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChannel(ctx, req.(*DeleteChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChannelReply)
		return ctx.Result(200, reply)
	}
}

func _GB_ListChannels0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListChannelsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBListChannels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListChannels(ctx, req.(*ListChannelsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChannelsReply)
		return ctx.Result(200, reply)
	}
}

func _GB_GetChannel0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBGetChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChannel(ctx, req.(*GetChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChannelReply)
		return ctx.Result(200, reply)
	}
}

func _GB_FindChannelsById0_HTTP_Handler(srv GBHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindChannelsByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGBFindChannelsById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindChannelsById(ctx, req.(*FindChannelsByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindChannelsByIdReply)
		return ctx.Result(200, reply)
	}
}

type GBHTTPClient interface {
	CreateGroup(ctx context.Context, req *CreateGroupRequest, opts ...http.CallOption) (rsp *CreateGroupReply, err error)
	DeleteChannel(ctx context.Context, req *DeleteChannelRequest, opts ...http.CallOption) (rsp *DeleteChannelReply, err error)
	DeleteGroup(ctx context.Context, req *DeleteGroupRequest, opts ...http.CallOption) (rsp *DeleteGroupReply, err error)
	FindChannelsById(ctx context.Context, req *FindChannelsByIdRequest, opts ...http.CallOption) (rsp *FindChannelsByIdReply, err error)
	FindGroupsByChannels(ctx context.Context, req *FindGroupsByChannelsRequest, opts ...http.CallOption) (rsp *FindGroupsByChannelsReply, err error)
	GetChannel(ctx context.Context, req *GetChannelRequest, opts ...http.CallOption) (rsp *GetChannelReply, err error)
	ListChannels(ctx context.Context, req *ListChannelsRequest, opts ...http.CallOption) (rsp *ListChannelsReply, err error)
	ListGroups(ctx context.Context, req *ListGroupsRequest, opts ...http.CallOption) (rsp *ListGroupsReply, err error)
	StarChannel(ctx context.Context, req *StarChannelRequest, opts ...http.CallOption) (rsp *StarChannelReply, err error)
	UpdateGroup(ctx context.Context, req *UpdateGroupRequest, opts ...http.CallOption) (rsp *UpdateGroupReply, err error)
}

type GBHTTPClientImpl struct {
	cc *http.Client
}

func NewGBHTTPClient(client *http.Client) GBHTTPClient {
	return &GBHTTPClientImpl{client}
}

func (c *GBHTTPClientImpl) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...http.CallOption) (*CreateGroupReply, error) {
	var out CreateGroupReply
	pattern := "/api/v1/gb/group/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBCreateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...http.CallOption) (*DeleteChannelReply, error) {
	var out DeleteChannelReply
	pattern := "/api/v1/gb/group/channel/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBDeleteChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...http.CallOption) (*DeleteGroupReply, error) {
	var out DeleteGroupReply
	pattern := "/api/v1/gb/group/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBDeleteGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) FindChannelsById(ctx context.Context, in *FindChannelsByIdRequest, opts ...http.CallOption) (*FindChannelsByIdReply, error) {
	var out FindChannelsByIdReply
	pattern := "/api/v1/gb/group/channel/find"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBFindChannelsById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) FindGroupsByChannels(ctx context.Context, in *FindGroupsByChannelsRequest, opts ...http.CallOption) (*FindGroupsByChannelsReply, error) {
	var out FindGroupsByChannelsReply
	pattern := "/api/v1/gb/group/find"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBFindGroupsByChannels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...http.CallOption) (*GetChannelReply, error) {
	var out GetChannelReply
	pattern := "/api/v1/gb/group/channel/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBGetChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...http.CallOption) (*ListChannelsReply, error) {
	var out ListChannelsReply
	pattern := "/api/v1/gb/group/channel/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBListChannels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...http.CallOption) (*ListGroupsReply, error) {
	var out ListGroupsReply
	pattern := "/api/v1/gb/group/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBListGroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) StarChannel(ctx context.Context, in *StarChannelRequest, opts ...http.CallOption) (*StarChannelReply, error) {
	var out StarChannelReply
	pattern := "/api/v1/gb/group/channel/star"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBStarChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GBHTTPClientImpl) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...http.CallOption) (*UpdateGroupReply, error) {
	var out UpdateGroupReply
	pattern := "/api/v1/gb/group/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGBUpdateGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
