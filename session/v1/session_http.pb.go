// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.0
// source: api/session/v1/session.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSessionServiceCreateSession = "/api.session.v1.SessionService/CreateSession"
const OperationSessionServiceDeleteSession = "/api.session.v1.SessionService/DeleteSession"
const OperationSessionServiceGCSession = "/api.session.v1.SessionService/GCSession"
const OperationSessionServiceGetSession = "/api.session.v1.SessionService/GetSession"
const OperationSessionServiceUpdateSession = "/api.session.v1.SessionService/UpdateSession"

type SessionServiceHTTPServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionReply, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionReply, error)
	GCSession(context.Context, *GCSessionRequest) (*GCSessionReply, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionReply, error)
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionReply, error)
}

func RegisterSessionServiceHTTPServer(s *http.Server, srv SessionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/session/create", _SessionService_CreateSession0_HTTP_Handler(srv))
	r.POST("/api/v1/session/update", _SessionService_UpdateSession0_HTTP_Handler(srv))
	r.POST("/api/v1/session/delete", _SessionService_DeleteSession0_HTTP_Handler(srv))
	r.POST("/api/v1/session/get", _SessionService_GetSession0_HTTP_Handler(srv))
	r.POST("/api/v1/session/gc", _SessionService_GCSession0_HTTP_Handler(srv))
}

func _SessionService_CreateSession0_HTTP_Handler(srv SessionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionServiceCreateSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSession(ctx, req.(*CreateSessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSessionReply)
		return ctx.Result(200, reply)
	}
}

func _SessionService_UpdateSession0_HTTP_Handler(srv SessionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionServiceUpdateSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSession(ctx, req.(*UpdateSessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSessionReply)
		return ctx.Result(200, reply)
	}
}

func _SessionService_DeleteSession0_HTTP_Handler(srv SessionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionServiceDeleteSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSession(ctx, req.(*DeleteSessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSessionReply)
		return ctx.Result(200, reply)
	}
}

func _SessionService_GetSession0_HTTP_Handler(srv SessionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionServiceGetSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSession(ctx, req.(*GetSessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSessionReply)
		return ctx.Result(200, reply)
	}
}

func _SessionService_GCSession0_HTTP_Handler(srv SessionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GCSessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionServiceGCSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GCSession(ctx, req.(*GCSessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GCSessionReply)
		return ctx.Result(200, reply)
	}
}

type SessionServiceHTTPClient interface {
	CreateSession(ctx context.Context, req *CreateSessionRequest, opts ...http.CallOption) (rsp *CreateSessionReply, err error)
	DeleteSession(ctx context.Context, req *DeleteSessionRequest, opts ...http.CallOption) (rsp *DeleteSessionReply, err error)
	GCSession(ctx context.Context, req *GCSessionRequest, opts ...http.CallOption) (rsp *GCSessionReply, err error)
	GetSession(ctx context.Context, req *GetSessionRequest, opts ...http.CallOption) (rsp *GetSessionReply, err error)
	UpdateSession(ctx context.Context, req *UpdateSessionRequest, opts ...http.CallOption) (rsp *UpdateSessionReply, err error)
}

type SessionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSessionServiceHTTPClient(client *http.Client) SessionServiceHTTPClient {
	return &SessionServiceHTTPClientImpl{client}
}

func (c *SessionServiceHTTPClientImpl) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...http.CallOption) (*CreateSessionReply, error) {
	var out CreateSessionReply
	pattern := "/api/v1/session/create"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSessionServiceCreateSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SessionServiceHTTPClientImpl) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...http.CallOption) (*DeleteSessionReply, error) {
	var out DeleteSessionReply
	pattern := "/api/v1/session/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSessionServiceDeleteSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SessionServiceHTTPClientImpl) GCSession(ctx context.Context, in *GCSessionRequest, opts ...http.CallOption) (*GCSessionReply, error) {
	var out GCSessionReply
	pattern := "/api/v1/session/gc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSessionServiceGCSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SessionServiceHTTPClientImpl) GetSession(ctx context.Context, in *GetSessionRequest, opts ...http.CallOption) (*GetSessionReply, error) {
	var out GetSessionReply
	pattern := "/api/v1/session/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSessionServiceGetSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SessionServiceHTTPClientImpl) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...http.CallOption) (*UpdateSessionReply, error) {
	var out UpdateSessionReply
	pattern := "/api/v1/session/update"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSessionServiceUpdateSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
