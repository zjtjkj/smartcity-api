// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.1
// source: operator/v1/operator.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOperatorGetMission = "/api.operator.v1.Operator/GetMission"
const OperationOperatorRefreshMission = "/api.operator.v1.Operator/RefreshMission"

type OperatorHTTPServer interface {
	GetMission(context.Context, *GetMissionRequest) (*GetMissionReply, error)
	RefreshMission(context.Context, *RefreshMissionRequest) (*RefreshMissionReply, error)
}

func RegisterOperatorHTTPServer(s *http.Server, srv OperatorHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/operator/mission/{id}", _Operator_GetMission0_HTTP_Handler(srv))
	r.GET("/api/v1/operator/refresh/{id}", _Operator_RefreshMission0_HTTP_Handler(srv))
}

func _Operator_GetMission0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorGetMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMission(ctx, req.(*GetMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Operator_RefreshMission0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshMissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorRefreshMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshMission(ctx, req.(*RefreshMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshMissionReply)
		return ctx.Result(200, reply)
	}
}

type OperatorHTTPClient interface {
	GetMission(ctx context.Context, req *GetMissionRequest, opts ...http.CallOption) (rsp *GetMissionReply, err error)
	RefreshMission(ctx context.Context, req *RefreshMissionRequest, opts ...http.CallOption) (rsp *RefreshMissionReply, err error)
}

type OperatorHTTPClientImpl struct {
	cc *http.Client
}

func NewOperatorHTTPClient(client *http.Client) OperatorHTTPClient {
	return &OperatorHTTPClientImpl{client}
}

func (c *OperatorHTTPClientImpl) GetMission(ctx context.Context, in *GetMissionRequest, opts ...http.CallOption) (*GetMissionReply, error) {
	var out GetMissionReply
	pattern := "/api/v1/operator/mission/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperatorGetMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OperatorHTTPClientImpl) RefreshMission(ctx context.Context, in *RefreshMissionRequest, opts ...http.CallOption) (*RefreshMissionReply, error) {
	var out RefreshMissionReply
	pattern := "/api/v1/operator/refresh/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperatorRefreshMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
