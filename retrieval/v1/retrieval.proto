syntax = "proto3";

package api.retrieval;

import "google/api/annotations.proto";
option go_package = "retrieval/api/retrieval/v1;v1";
option java_multiple_files = true;
option java_package = "api.retrieval";

service Retrieval {
	rpc FindEventCount(FindEventCountRequest) returns (FindEventCountReply) {
		option (google.api.http) = {
			post: "/api/v1/report/time/count"
			body: "*"
		};
	}
	rpc FindRegionEventCount(FindRegionEventCountRequest) returns (FindRegionEventCountReply) {
		option (google.api.http) = {
			post: "/api/v1/report/region/count"
			body: "*"
		};
	}
	rpc FindEvents(FindEventsRequest) returns (FindEventsReply) {
		option (google.api.http) = {
			post: "/api/v1/event/find"
			body: "*"
		};
	}
	rpc GetEvent(GetEventRequest) returns (GetEventReply) {
		option (google.api.http) = {
			post: "/api/v1/event/get"
			body: "*"
		};
	}
	rpc GetImage(GetImageRequest) returns (GetImageReply) {
		option (google.api.http) = {
			post: "/api/v1/image/get"
			body: "*"
		};
	}
	rpc DeleteEvent(DeleteEventRequest) returns (DeleteEventReply) {
		option (google.api.http) = {
			post: "/api/v1/event/delete"
			body: "*"
		};
	}
	rpc MissionLatestInfo(MissionLatestInfoRequest) returns (MissionLatestInfoReply) {
		option (google.api.http) = {
			post: "/api/v1/event/delete"
			body: "*"
		};
	}
	rpc SetTags(SetTagsRequest) returns (SetTagReply) {
		option (google.api.http) = {
			post: "/api/v1/event/tags"
			body: "*"
		};
	}
	rpc DeleteTag(DeleteTagRequest) returns (DeleteTagReply) {
		option (google.api.http) = {
			post: "/api/v1/event/tags/delete"
			body: "*"
		};
	}
	rpc ListTag(ListTagRequest) returns (ListTagReply) {
		option (google.api.http) = {
			post: "/api/v1/event/tags/list"
			body: "*"
		};
	}
	rpc GetEventByIndex(GetEventByIndexRequest) returns (GetEventByIndexReply) {
		option (google.api.http) = {
			post: "/api/v1/event/get/index"
			body: "*"
		};
	}
}

message Event {
	string id = 1;
	string eid = 2; // the first event of one alert
	int64 mid = 3; // mission id
	int64 created_at = 4;
	int64 updated_at = 5;
	string camera = 6;
	int32 region = 7;
	string type = 8;
	bool finished = 9;
	repeated string tags = 10;
	message Alert {
		string id = 1;
		int64 created_at = 2;
	}
	repeated Alert alerts = 11;
}

message FindEventsRequest {
	int64 index = 1;
	int64 size = 2;
	int64 start = 3;
	int64 end = 4;
	repeated string modules = 5;
	enum State {
		Finished = 0;
		NotFinished = 1;
	}
  repeated State states = 6;
	repeated uint32 regions = 7;
	repeated string cameras = 8;
	repeated string tags = 9;
	int64 after = 10;
	int64 before = 11;
}
message FindEventsReply {
	int64 index = 1;
	int64 size = 2;
	int64 page = 3;
	int64 total = 4;
	repeated Event events = 5;
}

message GetEventRequest {
	string eid = 1;
}
message GetEventReply {
	Event event = 1;
}

message GetImageRequest {
	string id = 1;
}
message GetImageReply {
	bytes image = 1;
	message Object {
		string id = 1;
		repeated Point points = 2;
	}
	message Point {
		int32 x = 1;
		int32 y = 2;
	}
	repeated Object objs = 2;
}

message DeleteEventRequest {
	string eid = 1;
}
message DeleteEventReply {}

message MissionLatestInfoRequest {
	int32 mission_id = 1;
	int32 length = 2;
	string type = 3;
}
message MissionLatestInfoReply {
	int32 total = 1;
	int32 finished = 2;
	int32 unfinished = 3;
	repeated string events = 4;
}

message SetTagsRequest {
	string event_id = 1;
	repeated string tags = 2;
}
message SetTagReply {
	Event event = 1;
}

message DeleteTagRequest {
	string name = 1;
}
message DeleteTagReply {}

message ListTagRequest {}
message ListTagReply {
	repeated string tags = 1;
}

message GetEventByIndexRequest {
	string index = 1;
}
message GetEventByIndexReply {
	Event event = 1;
}


message FindEventCountRequest {
	repeated string cameras = 1;  //点位列表
	repeated int32 regions= 2; //区域列表
	repeated string types = 3; //事件类型
	repeated TimeRange time = 4;
	bool Finished = 5; //该事件是否是最后事件
}
message EventCount {
	string target = 1;
	int64 count = 2;
}
message MulEventCount {
	repeated EventCount eventCounts = 1;
}
message FindEventCountReply {
	repeated MulEventCount mulEventCount = 1;
}
message TimeRange {
	string start_time = 1; //起始时间
	string end_time = 2; //截止时间
}

message FindRegionEventCountRequest {
	repeated string cameras = 1;  //点位列表
	repeated int32 regions= 2; //区域列表
	TimeRange time = 3;
	bool Finished = 4; //该事件是否是最后事件
}
message RegionEventCount {
	repeated EventCount reginEventCounts = 1;
	repeated EventCount CameraEventCounts = 2;
}
message FindRegionEventCountReply {
	RegionEventCount regionEventCount = 1;
}