// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: api/retrieval/v1/retrieval.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Retrieval_FindEventCount_FullMethodName       = "/api.retrieval.Retrieval/FindEventCount"
	Retrieval_FindRegionEventCount_FullMethodName = "/api.retrieval.Retrieval/FindRegionEventCount"
	Retrieval_FindEvents_FullMethodName           = "/api.retrieval.Retrieval/FindEvents"
	Retrieval_GetEvent_FullMethodName             = "/api.retrieval.Retrieval/GetEvent"
	Retrieval_GetImage_FullMethodName             = "/api.retrieval.Retrieval/GetImage"
	Retrieval_DeleteEvent_FullMethodName          = "/api.retrieval.Retrieval/DeleteEvent"
	Retrieval_MissionLatestInfo_FullMethodName    = "/api.retrieval.Retrieval/MissionLatestInfo"
	Retrieval_SetTags_FullMethodName              = "/api.retrieval.Retrieval/SetTags"
	Retrieval_DeleteTag_FullMethodName            = "/api.retrieval.Retrieval/DeleteTag"
	Retrieval_ListTag_FullMethodName              = "/api.retrieval.Retrieval/ListTag"
	Retrieval_GetEventByIndex_FullMethodName      = "/api.retrieval.Retrieval/GetEventByIndex"
)

// RetrievalClient is the client API for Retrieval service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetrievalClient interface {
	FindEventCount(ctx context.Context, in *FindEventCountRequest, opts ...grpc.CallOption) (*FindEventCountReply, error)
	FindRegionEventCount(ctx context.Context, in *FindRegionEventCountRequest, opts ...grpc.CallOption) (*FindRegionEventCountReply, error)
	FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsReply, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventReply, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageReply, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventReply, error)
	MissionLatestInfo(ctx context.Context, in *MissionLatestInfoRequest, opts ...grpc.CallOption) (*MissionLatestInfoReply, error)
	SetTags(ctx context.Context, in *SetTagsRequest, opts ...grpc.CallOption) (*SetTagReply, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagReply, error)
	ListTag(ctx context.Context, in *ListTagRequest, opts ...grpc.CallOption) (*ListTagReply, error)
	GetEventByIndex(ctx context.Context, in *GetEventByIndexRequest, opts ...grpc.CallOption) (*GetEventByIndexReply, error)
}

type retrievalClient struct {
	cc grpc.ClientConnInterface
}

func NewRetrievalClient(cc grpc.ClientConnInterface) RetrievalClient {
	return &retrievalClient{cc}
}

func (c *retrievalClient) FindEventCount(ctx context.Context, in *FindEventCountRequest, opts ...grpc.CallOption) (*FindEventCountReply, error) {
	out := new(FindEventCountReply)
	err := c.cc.Invoke(ctx, Retrieval_FindEventCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) FindRegionEventCount(ctx context.Context, in *FindRegionEventCountRequest, opts ...grpc.CallOption) (*FindRegionEventCountReply, error) {
	out := new(FindRegionEventCountReply)
	err := c.cc.Invoke(ctx, Retrieval_FindRegionEventCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsReply, error) {
	out := new(FindEventsReply)
	err := c.cc.Invoke(ctx, Retrieval_FindEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventReply, error) {
	out := new(GetEventReply)
	err := c.cc.Invoke(ctx, Retrieval_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageReply, error) {
	out := new(GetImageReply)
	err := c.cc.Invoke(ctx, Retrieval_GetImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventReply, error) {
	out := new(DeleteEventReply)
	err := c.cc.Invoke(ctx, Retrieval_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) MissionLatestInfo(ctx context.Context, in *MissionLatestInfoRequest, opts ...grpc.CallOption) (*MissionLatestInfoReply, error) {
	out := new(MissionLatestInfoReply)
	err := c.cc.Invoke(ctx, Retrieval_MissionLatestInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) SetTags(ctx context.Context, in *SetTagsRequest, opts ...grpc.CallOption) (*SetTagReply, error) {
	out := new(SetTagReply)
	err := c.cc.Invoke(ctx, Retrieval_SetTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagReply, error) {
	out := new(DeleteTagReply)
	err := c.cc.Invoke(ctx, Retrieval_DeleteTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) ListTag(ctx context.Context, in *ListTagRequest, opts ...grpc.CallOption) (*ListTagReply, error) {
	out := new(ListTagReply)
	err := c.cc.Invoke(ctx, Retrieval_ListTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) GetEventByIndex(ctx context.Context, in *GetEventByIndexRequest, opts ...grpc.CallOption) (*GetEventByIndexReply, error) {
	out := new(GetEventByIndexReply)
	err := c.cc.Invoke(ctx, Retrieval_GetEventByIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetrievalServer is the server API for Retrieval service.
// All implementations must embed UnimplementedRetrievalServer
// for forward compatibility
type RetrievalServer interface {
	FindEventCount(context.Context, *FindEventCountRequest) (*FindEventCountReply, error)
	FindRegionEventCount(context.Context, *FindRegionEventCountRequest) (*FindRegionEventCountReply, error)
	FindEvents(context.Context, *FindEventsRequest) (*FindEventsReply, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventReply, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageReply, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventReply, error)
	MissionLatestInfo(context.Context, *MissionLatestInfoRequest) (*MissionLatestInfoReply, error)
	SetTags(context.Context, *SetTagsRequest) (*SetTagReply, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagReply, error)
	ListTag(context.Context, *ListTagRequest) (*ListTagReply, error)
	GetEventByIndex(context.Context, *GetEventByIndexRequest) (*GetEventByIndexReply, error)
	mustEmbedUnimplementedRetrievalServer()
}

// UnimplementedRetrievalServer must be embedded to have forward compatible implementations.
type UnimplementedRetrievalServer struct {
}

func (UnimplementedRetrievalServer) FindEventCount(context.Context, *FindEventCountRequest) (*FindEventCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventCount not implemented")
}
func (UnimplementedRetrievalServer) FindRegionEventCount(context.Context, *FindRegionEventCountRequest) (*FindRegionEventCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRegionEventCount not implemented")
}
func (UnimplementedRetrievalServer) FindEvents(context.Context, *FindEventsRequest) (*FindEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEvents not implemented")
}
func (UnimplementedRetrievalServer) GetEvent(context.Context, *GetEventRequest) (*GetEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedRetrievalServer) GetImage(context.Context, *GetImageRequest) (*GetImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedRetrievalServer) DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedRetrievalServer) MissionLatestInfo(context.Context, *MissionLatestInfoRequest) (*MissionLatestInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionLatestInfo not implemented")
}
func (UnimplementedRetrievalServer) SetTags(context.Context, *SetTagsRequest) (*SetTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTags not implemented")
}
func (UnimplementedRetrievalServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedRetrievalServer) ListTag(context.Context, *ListTagRequest) (*ListTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTag not implemented")
}
func (UnimplementedRetrievalServer) GetEventByIndex(context.Context, *GetEventByIndexRequest) (*GetEventByIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByIndex not implemented")
}
func (UnimplementedRetrievalServer) mustEmbedUnimplementedRetrievalServer() {}

// UnsafeRetrievalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetrievalServer will
// result in compilation errors.
type UnsafeRetrievalServer interface {
	mustEmbedUnimplementedRetrievalServer()
}

func RegisterRetrievalServer(s grpc.ServiceRegistrar, srv RetrievalServer) {
	s.RegisterService(&Retrieval_ServiceDesc, srv)
}

func _Retrieval_FindEventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).FindEventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_FindEventCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).FindEventCount(ctx, req.(*FindEventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_FindRegionEventCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRegionEventCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).FindRegionEventCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_FindRegionEventCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).FindRegionEventCount(ctx, req.(*FindRegionEventCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_FindEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).FindEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_FindEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).FindEvents(ctx, req.(*FindEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_MissionLatestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionLatestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).MissionLatestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_MissionLatestInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).MissionLatestInfo(ctx, req.(*MissionLatestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_SetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).SetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_SetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).SetTags(ctx, req.(*SetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_ListTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).ListTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_ListTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).ListTag(ctx, req.(*ListTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_GetEventByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetEventByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_GetEventByIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetEventByIndex(ctx, req.(*GetEventByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Retrieval_ServiceDesc is the grpc.ServiceDesc for Retrieval service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Retrieval_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.retrieval.Retrieval",
	HandlerType: (*RetrievalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindEventCount",
			Handler:    _Retrieval_FindEventCount_Handler,
		},
		{
			MethodName: "FindRegionEventCount",
			Handler:    _Retrieval_FindRegionEventCount_Handler,
		},
		{
			MethodName: "FindEvents",
			Handler:    _Retrieval_FindEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Retrieval_GetEvent_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Retrieval_GetImage_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Retrieval_DeleteEvent_Handler,
		},
		{
			MethodName: "MissionLatestInfo",
			Handler:    _Retrieval_MissionLatestInfo_Handler,
		},
		{
			MethodName: "SetTags",
			Handler:    _Retrieval_SetTags_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Retrieval_DeleteTag_Handler,
		},
		{
			MethodName: "ListTag",
			Handler:    _Retrieval_ListTag_Handler,
		},
		{
			MethodName: "GetEventByIndex",
			Handler:    _Retrieval_GetEventByIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/retrieval/v1/retrieval.proto",
}
