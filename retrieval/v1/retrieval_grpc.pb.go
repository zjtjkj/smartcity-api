// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/retrieval/v1/retrieval.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RetrievalClient is the client API for Retrieval service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetrievalClient interface {
	FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsReply, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventReply, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageReply, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventReply, error)
	MissionLatestInfo(ctx context.Context, in *MissionLatestInfoRequest, opts ...grpc.CallOption) (*MissionLatestInfoReply, error)
	CreateUnfinishedEvent(ctx context.Context, in *CreateUnfinishedEventRequest, opts ...grpc.CallOption) (*CreateUnfinishedEventReply, error)
	DeleteUnfinishedEvent(ctx context.Context, in *DeleteUnfinishedEventRequest, opts ...grpc.CallOption) (*DeleteUnfinishedEventReply, error)
}

type retrievalClient struct {
	cc grpc.ClientConnInterface
}

func NewRetrievalClient(cc grpc.ClientConnInterface) RetrievalClient {
	return &retrievalClient{cc}
}

func (c *retrievalClient) FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsReply, error) {
	out := new(FindEventsReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/FindEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventReply, error) {
	out := new(GetEventReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageReply, error) {
	out := new(GetImageReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventReply, error) {
	out := new(DeleteEventReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) MissionLatestInfo(ctx context.Context, in *MissionLatestInfoRequest, opts ...grpc.CallOption) (*MissionLatestInfoReply, error) {
	out := new(MissionLatestInfoReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/MissionLatestInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) CreateUnfinishedEvent(ctx context.Context, in *CreateUnfinishedEventRequest, opts ...grpc.CallOption) (*CreateUnfinishedEventReply, error) {
	out := new(CreateUnfinishedEventReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/CreateUnfinishedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) DeleteUnfinishedEvent(ctx context.Context, in *DeleteUnfinishedEventRequest, opts ...grpc.CallOption) (*DeleteUnfinishedEventReply, error) {
	out := new(DeleteUnfinishedEventReply)
	err := c.cc.Invoke(ctx, "/api.retrieval.Retrieval/DeleteUnfinishedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetrievalServer is the server API for Retrieval service.
// All implementations must embed UnimplementedRetrievalServer
// for forward compatibility
type RetrievalServer interface {
	FindEvents(context.Context, *FindEventsRequest) (*FindEventsReply, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventReply, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageReply, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventReply, error)
	MissionLatestInfo(context.Context, *MissionLatestInfoRequest) (*MissionLatestInfoReply, error)
	CreateUnfinishedEvent(context.Context, *CreateUnfinishedEventRequest) (*CreateUnfinishedEventReply, error)
	DeleteUnfinishedEvent(context.Context, *DeleteUnfinishedEventRequest) (*DeleteUnfinishedEventReply, error)
	mustEmbedUnimplementedRetrievalServer()
}

// UnimplementedRetrievalServer must be embedded to have forward compatible implementations.
type UnimplementedRetrievalServer struct {
}

func (UnimplementedRetrievalServer) FindEvents(context.Context, *FindEventsRequest) (*FindEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEvents not implemented")
}
func (UnimplementedRetrievalServer) GetEvent(context.Context, *GetEventRequest) (*GetEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedRetrievalServer) GetImage(context.Context, *GetImageRequest) (*GetImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedRetrievalServer) DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedRetrievalServer) MissionLatestInfo(context.Context, *MissionLatestInfoRequest) (*MissionLatestInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionLatestInfo not implemented")
}
func (UnimplementedRetrievalServer) CreateUnfinishedEvent(context.Context, *CreateUnfinishedEventRequest) (*CreateUnfinishedEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnfinishedEvent not implemented")
}
func (UnimplementedRetrievalServer) DeleteUnfinishedEvent(context.Context, *DeleteUnfinishedEventRequest) (*DeleteUnfinishedEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnfinishedEvent not implemented")
}
func (UnimplementedRetrievalServer) mustEmbedUnimplementedRetrievalServer() {}

// UnsafeRetrievalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetrievalServer will
// result in compilation errors.
type UnsafeRetrievalServer interface {
	mustEmbedUnimplementedRetrievalServer()
}

func RegisterRetrievalServer(s grpc.ServiceRegistrar, srv RetrievalServer) {
	s.RegisterService(&Retrieval_ServiceDesc, srv)
}

func _Retrieval_FindEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).FindEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/FindEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).FindEvents(ctx, req.(*FindEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_MissionLatestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionLatestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).MissionLatestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/MissionLatestInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).MissionLatestInfo(ctx, req.(*MissionLatestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_CreateUnfinishedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnfinishedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).CreateUnfinishedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/CreateUnfinishedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).CreateUnfinishedEvent(ctx, req.(*CreateUnfinishedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_DeleteUnfinishedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnfinishedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).DeleteUnfinishedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.retrieval.Retrieval/DeleteUnfinishedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).DeleteUnfinishedEvent(ctx, req.(*DeleteUnfinishedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Retrieval_ServiceDesc is the grpc.ServiceDesc for Retrieval service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Retrieval_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.retrieval.Retrieval",
	HandlerType: (*RetrievalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindEvents",
			Handler:    _Retrieval_FindEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Retrieval_GetEvent_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Retrieval_GetImage_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Retrieval_DeleteEvent_Handler,
		},
		{
			MethodName: "MissionLatestInfo",
			Handler:    _Retrieval_MissionLatestInfo_Handler,
		},
		{
			MethodName: "CreateUnfinishedEvent",
			Handler:    _Retrieval_CreateUnfinishedEvent_Handler,
		},
		{
			MethodName: "DeleteUnfinishedEvent",
			Handler:    _Retrieval_DeleteUnfinishedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/retrieval/v1/retrieval.proto",
}
