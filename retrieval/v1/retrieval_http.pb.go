// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.0
// source: api/retrieval/v1/retrieval.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRetrievalDeleteAlert = "/api.retrieval.Retrieval/DeleteAlert"
const OperationRetrievalFindAlerts = "/api.retrieval.Retrieval/FindAlerts"
const OperationRetrievalGetAlert = "/api.retrieval.Retrieval/GetAlert"
const OperationRetrievalGetImage = "/api.retrieval.Retrieval/GetImage"

type RetrievalHTTPServer interface {
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertReply, error)
	FindAlerts(context.Context, *FindAlertsRequest) (*FindAlertsReply, error)
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertReply, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageReply, error)
}

func RegisterRetrievalHTTPServer(s *http.Server, srv RetrievalHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/alert/find", _Retrieval_FindAlerts0_HTTP_Handler(srv))
	r.POST("/api/v1/alert/get", _Retrieval_GetAlert0_HTTP_Handler(srv))
	r.POST("/api/v1/image/get", _Retrieval_GetImage0_HTTP_Handler(srv))
	r.POST("/api/v1/alert/delete", _Retrieval_DeleteAlert0_HTTP_Handler(srv))
}

func _Retrieval_FindAlerts0_HTTP_Handler(srv RetrievalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindAlertsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRetrievalFindAlerts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindAlerts(ctx, req.(*FindAlertsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindAlertsReply)
		return ctx.Result(200, reply)
	}
}

func _Retrieval_GetAlert0_HTTP_Handler(srv RetrievalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAlertRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRetrievalGetAlert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAlert(ctx, req.(*GetAlertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAlertReply)
		return ctx.Result(200, reply)
	}
}

func _Retrieval_GetImage0_HTTP_Handler(srv RetrievalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRetrievalGetImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetImage(ctx, req.(*GetImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetImageReply)
		return ctx.Result(200, reply)
	}
}

func _Retrieval_DeleteAlert0_HTTP_Handler(srv RetrievalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAlertRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRetrievalDeleteAlert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAlert(ctx, req.(*DeleteAlertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAlertReply)
		return ctx.Result(200, reply)
	}
}

type RetrievalHTTPClient interface {
	DeleteAlert(ctx context.Context, req *DeleteAlertRequest, opts ...http.CallOption) (rsp *DeleteAlertReply, err error)
	FindAlerts(ctx context.Context, req *FindAlertsRequest, opts ...http.CallOption) (rsp *FindAlertsReply, err error)
	GetAlert(ctx context.Context, req *GetAlertRequest, opts ...http.CallOption) (rsp *GetAlertReply, err error)
	GetImage(ctx context.Context, req *GetImageRequest, opts ...http.CallOption) (rsp *GetImageReply, err error)
}

type RetrievalHTTPClientImpl struct {
	cc *http.Client
}

func NewRetrievalHTTPClient(client *http.Client) RetrievalHTTPClient {
	return &RetrievalHTTPClientImpl{client}
}

func (c *RetrievalHTTPClientImpl) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...http.CallOption) (*DeleteAlertReply, error) {
	var out DeleteAlertReply
	pattern := "/api/v1/alert/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRetrievalDeleteAlert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RetrievalHTTPClientImpl) FindAlerts(ctx context.Context, in *FindAlertsRequest, opts ...http.CallOption) (*FindAlertsReply, error) {
	var out FindAlertsReply
	pattern := "/api/v1/alert/find"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRetrievalFindAlerts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RetrievalHTTPClientImpl) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...http.CallOption) (*GetAlertReply, error) {
	var out GetAlertReply
	pattern := "/api/v1/alert/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRetrievalGetAlert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RetrievalHTTPClientImpl) GetImage(ctx context.Context, in *GetImageRequest, opts ...http.CallOption) (*GetImageReply, error) {
	var out GetImageReply
	pattern := "/api/v1/image/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRetrievalGetImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
