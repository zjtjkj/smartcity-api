syntax = "proto3";

package api.mission.v1;

option go_package = "mission/api/mission/v1;v1";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service Mission {
	rpc CreateMission (CreateMissionRequest) returns (CreateMissionReply) {
		option (google.api.http) = {
			put: "/api/v1/mission"
			body: "*"
		};
	}
	rpc UpdateMission (UpdateMissionRequest) returns (UpdateMissionReply) {
		option (google.api.http) = {
			post: "/api/v1/mission/{id}"
			body: "*"
		};
	}
	rpc DeleteMission (DeleteMissionRequest) returns (DeleteMissionReply) {
		option (google.api.http) = {
			delete: "/api/v1/mission/{id}"
		};
	}
	rpc GetMission (GetMissionRequest) returns (GetMissionReply) {
		option (google.api.http) = {
			get: "/api/v1/mission/{id}"
		};
	}
	rpc ListMissionByCameraAndPreset (ListMissionByCameraAndPresetRequest) returns (ListMissionByCameraAndPresetReply) {
		option (google.api.http) = {
			post: "/api/v1/mission/cameraPreset"
			body: "*"
		};
	}
	rpc ListMissionByCamera (ListMissionByCameraRequest) returns (ListMissionByCameraReply) {
		option (google.api.http) = {
			post: "/api/v1/mission/camera/{id}"
			body: "*"
		};
	}
	rpc ListMission(ListMissionRequest) returns (ListMissionReply) {
		option (google.api.http) = {
			get: "/api/v1/mission/cameras"
		};
	}
	rpc ConfigMission(ConfigMissionRequest) returns (ConfigMissionReply) {
		option (google.api.http) = {
			post: "/api/v1/mission/config/{id}"
			body: "*"
		};
	}
	rpc SearchMission(SearchMissionRequest) returns (SearchMissionReply) {
		option (google.api.http) = {
			post: "/api/v1/mission/search"
			body: "*"
		};
	}

	rpc CreateArea(CreateAreaRequest) returns (CreateAreaReply) {
		option (google.api.http) = {
			put: "/api/v1/area"
			body: "*"
		};
	}
	rpc UpdateArea(UpdateAreaRequest) returns (UpdateAreaReply) {
		option (google.api.http) = {
			post: "/api/v1/area/{id}"
			body: "*"
		};
	}
	rpc DeleteArea(DeleteAreaRequest) returns (DeleteAreaReply) {
		option (google.api.http) = {
			delete: "/api/v1/area/{id}"
		};
	}
	rpc ListArea(ListAreaRequest) returns (ListAreaReply) {
		option (google.api.http) = {
			get: "/api/v1/areas/{mission}"
		};
	}
	rpc ConfigArea(ConfigAreaRequest) returns (ConfigAreaReply) {
		option (google.api.http) = {
			post: "/api/v1/area/config/{id}"
			body: "*"
		};
	}

	rpc ControlMissionBySingle(ControlMissionBySingleRequest) returns (ControlMissionBySingleReply) {
		option (google.api.http) = {
			get: "/api/v1/control/single/{id}"
		};
	}
	rpc ControlMissionByCamera(ControlMissionByCameraRequest) returns (ControlMissionByCameraReply) {
		option (google.api.http) = {
			get: "/api/v1/control/camera/{id}"
		};
	}
}

message SearchMissionRequest {
	uint32 index = 1;
	uint32 size = 2;
	string key = 3;
	string camera = 4;
	uint32 region = 5;
}
message SearchMissionReply {
	repeated Instance missions = 1;
}

message ControlMissionBySingleRequest {
	uint32 id = 1;
	bool enable = 2;
}
message ControlMissionBySingleReply {}

message ControlMissionByCameraRequest {
	string id = 1;
	bool enable = 2;
}
message ControlMissionByCameraReply {}

message ListMissionRequest{}
message ListMissionReply{
	repeated Instance missions = 1;
}

message ConfigAreaRequest {
	uint32 id = 1;
	uint32 object = 2;
}
message ConfigAreaReply {}

message ConfigMissionRequest {
	uint32 id = 1;
	uint32 start = 2;
	uint32 end = 3;
	bool reverse = 4;
	uint32 mode = 5;
	map<string, string> config = 6;
	repeated uint32 modules = 7;

}
message ConfigMissionReply {}

message Point {
	uint32 x = 1;
	uint32 y = 2;
}

message Area {
	uint32 id = 1;
	uint32 mission = 2;
	google.protobuf.Timestamp created = 3;
	string name = 4;
	uint32 type = 5;
	repeated Point points = 6;
	uint32 object = 7;
}

message Instance {
	uint32 id = 1;
	google.protobuf.Timestamp created = 2;
	string name = 3;
	string camera = 4;
	uint32 preset = 5;
	repeated uint32 modules = 6;
	bool movable = 7;
	bool configure = 8;
	uint32 start = 9;
	uint32 end = 10;
	bool enable = 11;
	bool reverse = 12;
	uint32 Mode = 13;
	map<string, string> config = 14;
}


message CreateAreaRequest {
	uint32 mission = 1;
	string name = 2;
	uint32 type = 3;
	repeated Point points = 4;
}
message CreateAreaReply{
	Area area = 1;
}

message UpdateAreaRequest {
	uint32 id = 1;
	repeated Point points = 2;
}
message UpdateAreaReply {}

message DeleteAreaRequest {
	uint32 id = 1;
}
message DeleteAreaReply {}

message ListAreaRequest {
	uint32 mission = 1;
}
message ListAreaReply {
	repeated Area areas = 1;
}

message CreateMissionRequest {
	string name = 1;
	string camera = 2;
	bool movable = 3;
	uint32 preset = 4;
}
message CreateMissionReply {
	Instance mission = 1;
}

message UpdateMissionRequest {
	uint32 id = 1;
	string name = 2;
}
message UpdateMissionReply {}

message DeleteMissionRequest {
	uint32 id = 1;
}
message DeleteMissionReply {}

message GetMissionRequest {
	uint32 id = 1;
}

message GetMissionReply {
	Instance mission = 1;
}

message ListMissionByCameraAndPresetRequest {
	string id = 1;
	uint32 preset = 2;
}
message ListMissionByCameraAndPresetReply {
	repeated Instance missions = 1;
}

message ListMissionByCameraRequest {
	string id = 1;
}
message ListMissionByCameraReply {
	repeated Instance missions = 1;
}