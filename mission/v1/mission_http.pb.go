// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.14.0
// source: api/mission/v1/mission.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMissionConfigArea = "/api.mission.v1.Mission/ConfigArea"
const OperationMissionConfigMission = "/api.mission.v1.Mission/ConfigMission"
const OperationMissionControlMissionByCamera = "/api.mission.v1.Mission/ControlMissionByCamera"
const OperationMissionControlMissionBySingle = "/api.mission.v1.Mission/ControlMissionBySingle"
const OperationMissionCreateArea = "/api.mission.v1.Mission/CreateArea"
const OperationMissionCreateMission = "/api.mission.v1.Mission/CreateMission"
const OperationMissionDeleteArea = "/api.mission.v1.Mission/DeleteArea"
const OperationMissionDeleteMission = "/api.mission.v1.Mission/DeleteMission"
const OperationMissionGetMission = "/api.mission.v1.Mission/GetMission"
const OperationMissionListArea = "/api.mission.v1.Mission/ListArea"
const OperationMissionListMission = "/api.mission.v1.Mission/ListMission"
const OperationMissionListMissionByCamera = "/api.mission.v1.Mission/ListMissionByCamera"
const OperationMissionListMissionByCameraAndPreset = "/api.mission.v1.Mission/ListMissionByCameraAndPreset"
const OperationMissionSearchMission = "/api.mission.v1.Mission/SearchMission"
const OperationMissionUpdateArea = "/api.mission.v1.Mission/UpdateArea"
const OperationMissionUpdateMission = "/api.mission.v1.Mission/UpdateMission"

type MissionHTTPServer interface {
	ConfigArea(context.Context, *ConfigAreaRequest) (*ConfigAreaReply, error)
	ConfigMission(context.Context, *ConfigMissionRequest) (*ConfigMissionReply, error)
	ControlMissionByCamera(context.Context, *ControlMissionByCameraRequest) (*ControlMissionByCameraReply, error)
	ControlMissionBySingle(context.Context, *ControlMissionBySingleRequest) (*ControlMissionBySingleReply, error)
	CreateArea(context.Context, *CreateAreaRequest) (*CreateAreaReply, error)
	CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionReply, error)
	DeleteArea(context.Context, *DeleteAreaRequest) (*DeleteAreaReply, error)
	DeleteMission(context.Context, *DeleteMissionRequest) (*DeleteMissionReply, error)
	GetMission(context.Context, *GetMissionRequest) (*GetMissionReply, error)
	ListArea(context.Context, *ListAreaRequest) (*ListAreaReply, error)
	ListMission(context.Context, *ListMissionRequest) (*ListMissionReply, error)
	ListMissionByCamera(context.Context, *ListMissionByCameraRequest) (*ListMissionByCameraReply, error)
	ListMissionByCameraAndPreset(context.Context, *ListMissionByCameraAndPresetRequest) (*ListMissionByCameraAndPresetReply, error)
	SearchMission(context.Context, *SearchMissionRequest) (*SearchMissionReply, error)
	UpdateArea(context.Context, *UpdateAreaRequest) (*UpdateAreaReply, error)
	UpdateMission(context.Context, *UpdateMissionRequest) (*UpdateMissionReply, error)
}

func RegisterMissionHTTPServer(s *http.Server, srv MissionHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/mission", _Mission_CreateMission0_HTTP_Handler(srv))
	r.POST("/api/v1/mission/{id}", _Mission_UpdateMission0_HTTP_Handler(srv))
	r.DELETE("/api/v1/mission/{id}", _Mission_DeleteMission0_HTTP_Handler(srv))
	r.GET("/api/v1/mission/{id}", _Mission_GetMission0_HTTP_Handler(srv))
	r.POST("/api/v1/mission/cameraPreset", _Mission_ListMissionByCameraAndPreset0_HTTP_Handler(srv))
	r.POST("/api/v1/mission/camera/{id}", _Mission_ListMissionByCamera0_HTTP_Handler(srv))
	r.GET("/api/v1/mission/cameras", _Mission_ListMission0_HTTP_Handler(srv))
	r.POST("/api/v1/mission/config/{id}", _Mission_ConfigMission0_HTTP_Handler(srv))
	r.POST("/api/v1/mission/search", _Mission_SearchMission0_HTTP_Handler(srv))
	r.PUT("/api/v1/area", _Mission_CreateArea0_HTTP_Handler(srv))
	r.POST("/api/v1/area/{id}", _Mission_UpdateArea0_HTTP_Handler(srv))
	r.DELETE("/api/v1/area/{id}", _Mission_DeleteArea0_HTTP_Handler(srv))
	r.GET("/api/v1/areas/{mission}", _Mission_ListArea0_HTTP_Handler(srv))
	r.POST("/api/v1/area/config/{id}", _Mission_ConfigArea0_HTTP_Handler(srv))
	r.GET("/api/v1/control/single/{id}", _Mission_ControlMissionBySingle0_HTTP_Handler(srv))
	r.GET("/api/v1/control/camera/{id}", _Mission_ControlMissionByCamera0_HTTP_Handler(srv))
}

func _Mission_CreateMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionCreateMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMission(ctx, req.(*CreateMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_UpdateMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionUpdateMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMission(ctx, req.(*UpdateMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_DeleteMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionDeleteMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMission(ctx, req.(*DeleteMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_GetMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionGetMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMission(ctx, req.(*GetMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ListMissionByCameraAndPreset0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMissionByCameraAndPresetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionListMissionByCameraAndPreset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMissionByCameraAndPreset(ctx, req.(*ListMissionByCameraAndPresetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMissionByCameraAndPresetReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ListMissionByCamera0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMissionByCameraRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionListMissionByCamera)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMissionByCamera(ctx, req.(*ListMissionByCameraRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMissionByCameraReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ListMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMissionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionListMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMission(ctx, req.(*ListMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ConfigMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfigMissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionConfigMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfigMission(ctx, req.(*ConfigMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfigMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_SearchMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchMissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionSearchMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchMission(ctx, req.(*SearchMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMissionReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_CreateArea0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAreaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionCreateArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArea(ctx, req.(*CreateAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_UpdateArea0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAreaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionUpdateArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateArea(ctx, req.(*UpdateAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_DeleteArea0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionDeleteArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArea(ctx, req.(*DeleteAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ListArea0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionListArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListArea(ctx, req.(*ListAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ConfigArea0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfigAreaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionConfigArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfigArea(ctx, req.(*ConfigAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfigAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ControlMissionBySingle0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ControlMissionBySingleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionControlMissionBySingle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ControlMissionBySingle(ctx, req.(*ControlMissionBySingleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ControlMissionBySingleReply)
		return ctx.Result(200, reply)
	}
}

func _Mission_ControlMissionByCamera0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ControlMissionByCameraRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionControlMissionByCamera)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ControlMissionByCamera(ctx, req.(*ControlMissionByCameraRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ControlMissionByCameraReply)
		return ctx.Result(200, reply)
	}
}

type MissionHTTPClient interface {
	ConfigArea(ctx context.Context, req *ConfigAreaRequest, opts ...http.CallOption) (rsp *ConfigAreaReply, err error)
	ConfigMission(ctx context.Context, req *ConfigMissionRequest, opts ...http.CallOption) (rsp *ConfigMissionReply, err error)
	ControlMissionByCamera(ctx context.Context, req *ControlMissionByCameraRequest, opts ...http.CallOption) (rsp *ControlMissionByCameraReply, err error)
	ControlMissionBySingle(ctx context.Context, req *ControlMissionBySingleRequest, opts ...http.CallOption) (rsp *ControlMissionBySingleReply, err error)
	CreateArea(ctx context.Context, req *CreateAreaRequest, opts ...http.CallOption) (rsp *CreateAreaReply, err error)
	CreateMission(ctx context.Context, req *CreateMissionRequest, opts ...http.CallOption) (rsp *CreateMissionReply, err error)
	DeleteArea(ctx context.Context, req *DeleteAreaRequest, opts ...http.CallOption) (rsp *DeleteAreaReply, err error)
	DeleteMission(ctx context.Context, req *DeleteMissionRequest, opts ...http.CallOption) (rsp *DeleteMissionReply, err error)
	GetMission(ctx context.Context, req *GetMissionRequest, opts ...http.CallOption) (rsp *GetMissionReply, err error)
	ListArea(ctx context.Context, req *ListAreaRequest, opts ...http.CallOption) (rsp *ListAreaReply, err error)
	ListMission(ctx context.Context, req *ListMissionRequest, opts ...http.CallOption) (rsp *ListMissionReply, err error)
	ListMissionByCamera(ctx context.Context, req *ListMissionByCameraRequest, opts ...http.CallOption) (rsp *ListMissionByCameraReply, err error)
	ListMissionByCameraAndPreset(ctx context.Context, req *ListMissionByCameraAndPresetRequest, opts ...http.CallOption) (rsp *ListMissionByCameraAndPresetReply, err error)
	SearchMission(ctx context.Context, req *SearchMissionRequest, opts ...http.CallOption) (rsp *SearchMissionReply, err error)
	UpdateArea(ctx context.Context, req *UpdateAreaRequest, opts ...http.CallOption) (rsp *UpdateAreaReply, err error)
	UpdateMission(ctx context.Context, req *UpdateMissionRequest, opts ...http.CallOption) (rsp *UpdateMissionReply, err error)
}

type MissionHTTPClientImpl struct {
	cc *http.Client
}

func NewMissionHTTPClient(client *http.Client) MissionHTTPClient {
	return &MissionHTTPClientImpl{client}
}

func (c *MissionHTTPClientImpl) ConfigArea(ctx context.Context, in *ConfigAreaRequest, opts ...http.CallOption) (*ConfigAreaReply, error) {
	var out ConfigAreaReply
	pattern := "/api/v1/area/config/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionConfigArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ConfigMission(ctx context.Context, in *ConfigMissionRequest, opts ...http.CallOption) (*ConfigMissionReply, error) {
	var out ConfigMissionReply
	pattern := "/api/v1/mission/config/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionConfigMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ControlMissionByCamera(ctx context.Context, in *ControlMissionByCameraRequest, opts ...http.CallOption) (*ControlMissionByCameraReply, error) {
	var out ControlMissionByCameraReply
	pattern := "/api/v1/control/camera/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionControlMissionByCamera))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ControlMissionBySingle(ctx context.Context, in *ControlMissionBySingleRequest, opts ...http.CallOption) (*ControlMissionBySingleReply, error) {
	var out ControlMissionBySingleReply
	pattern := "/api/v1/control/single/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionControlMissionBySingle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) CreateArea(ctx context.Context, in *CreateAreaRequest, opts ...http.CallOption) (*CreateAreaReply, error) {
	var out CreateAreaReply
	pattern := "/api/v1/area"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionCreateArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...http.CallOption) (*CreateMissionReply, error) {
	var out CreateMissionReply
	pattern := "/api/v1/mission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionCreateMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) DeleteArea(ctx context.Context, in *DeleteAreaRequest, opts ...http.CallOption) (*DeleteAreaReply, error) {
	var out DeleteAreaReply
	pattern := "/api/v1/area/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionDeleteArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) DeleteMission(ctx context.Context, in *DeleteMissionRequest, opts ...http.CallOption) (*DeleteMissionReply, error) {
	var out DeleteMissionReply
	pattern := "/api/v1/mission/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionDeleteMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) GetMission(ctx context.Context, in *GetMissionRequest, opts ...http.CallOption) (*GetMissionReply, error) {
	var out GetMissionReply
	pattern := "/api/v1/mission/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionGetMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ListArea(ctx context.Context, in *ListAreaRequest, opts ...http.CallOption) (*ListAreaReply, error) {
	var out ListAreaReply
	pattern := "/api/v1/areas/{mission}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionListArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ListMission(ctx context.Context, in *ListMissionRequest, opts ...http.CallOption) (*ListMissionReply, error) {
	var out ListMissionReply
	pattern := "/api/v1/mission/cameras"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMissionListMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ListMissionByCamera(ctx context.Context, in *ListMissionByCameraRequest, opts ...http.CallOption) (*ListMissionByCameraReply, error) {
	var out ListMissionByCameraReply
	pattern := "/api/v1/mission/camera/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionListMissionByCamera))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) ListMissionByCameraAndPreset(ctx context.Context, in *ListMissionByCameraAndPresetRequest, opts ...http.CallOption) (*ListMissionByCameraAndPresetReply, error) {
	var out ListMissionByCameraAndPresetReply
	pattern := "/api/v1/mission/cameraPreset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionListMissionByCameraAndPreset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) SearchMission(ctx context.Context, in *SearchMissionRequest, opts ...http.CallOption) (*SearchMissionReply, error) {
	var out SearchMissionReply
	pattern := "/api/v1/mission/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionSearchMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) UpdateArea(ctx context.Context, in *UpdateAreaRequest, opts ...http.CallOption) (*UpdateAreaReply, error) {
	var out UpdateAreaReply
	pattern := "/api/v1/area/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionUpdateArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MissionHTTPClientImpl) UpdateMission(ctx context.Context, in *UpdateMissionRequest, opts ...http.CallOption) (*UpdateMissionReply, error) {
	var out UpdateMissionReply
	pattern := "/api/v1/mission/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionUpdateMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
