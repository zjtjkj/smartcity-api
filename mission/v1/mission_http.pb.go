// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.1
// source: mission/v1/mission.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMissionCreateMission = "/api.mission.v1.Mission/CreateMission"

type MissionHTTPServer interface {
	CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionReply, error)
}

func RegisterMissionHTTPServer(s *http.Server, srv MissionHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/mission", _Mission_CreateMission0_HTTP_Handler(srv))
}

func _Mission_CreateMission0_HTTP_Handler(srv MissionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMissionCreateMission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMission(ctx, req.(*CreateMissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMissionReply)
		return ctx.Result(200, reply)
	}
}

type MissionHTTPClient interface {
	CreateMission(ctx context.Context, req *CreateMissionRequest, opts ...http.CallOption) (rsp *CreateMissionReply, err error)
}

type MissionHTTPClientImpl struct {
	cc *http.Client
}

func NewMissionHTTPClient(client *http.Client) MissionHTTPClient {
	return &MissionHTTPClientImpl{client}
}

func (c *MissionHTTPClientImpl) CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...http.CallOption) (*CreateMissionReply, error) {
	var out CreateMissionReply
	pattern := "/api/v1/mission"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMissionCreateMission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
