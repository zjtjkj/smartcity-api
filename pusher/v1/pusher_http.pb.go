// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.1
// source: pusher/v1/pusher.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPusherCreatePusher = "/api.pusher.v1.Pusher/CreatePusher"
const OperationPusherCreateReceiver = "/api.pusher.v1.Pusher/CreateReceiver"
const OperationPusherDeletePusher = "/api.pusher.v1.Pusher/DeletePusher"
const OperationPusherDeleteReceiver = "/api.pusher.v1.Pusher/DeleteReceiver"
const OperationPusherGetPusher = "/api.pusher.v1.Pusher/GetPusher"
const OperationPusherGetReceiver = "/api.pusher.v1.Pusher/GetReceiver"
const OperationPusherListController = "/api.pusher.v1.Pusher/ListController"
const OperationPusherListPusher = "/api.pusher.v1.Pusher/ListPusher"
const OperationPusherListReceiver = "/api.pusher.v1.Pusher/ListReceiver"
const OperationPusherReport = "/api.pusher.v1.Pusher/Report"
const OperationPusherUpdatePusher = "/api.pusher.v1.Pusher/UpdatePusher"
const OperationPusherUpdateReceiver = "/api.pusher.v1.Pusher/UpdateReceiver"

type PusherHTTPServer interface {
	CreatePusher(context.Context, *CreatePusherRequest) (*CreatePusherReply, error)
	CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverReply, error)
	DeletePusher(context.Context, *DeletePusherRequest) (*DeletePusherReply, error)
	DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverReply, error)
	GetPusher(context.Context, *GetPusherRequest) (*GetPusherReply, error)
	GetReceiver(context.Context, *GetReceiverRequest) (*GetReceiverReply, error)
	ListController(context.Context, *ListControllerRequest) (*ListControllerReply, error)
	ListPusher(context.Context, *ListPusherRequest) (*ListPushRequest, error)
	ListReceiver(context.Context, *ListReceiverRequest) (*ListReceiverReply, error)
	Report(context.Context, *ReportRequest) (*ReportReply, error)
	UpdatePusher(context.Context, *UpdatePusherRequest) (*UpdatePusherReply, error)
	UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverReply, error)
}

func RegisterPusherHTTPServer(s *http.Server, srv PusherHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/pusher/report", _Pusher_Report0_HTTP_Handler(srv))
	r.GET("/api/v1/pushers", _Pusher_ListController0_HTTP_Handler(srv))
	r.PUT("/api/v1/pusher", _Pusher_CreatePusher0_HTTP_Handler(srv))
	r.POST("/api/v1/pusher/{id}", _Pusher_UpdatePusher0_HTTP_Handler(srv))
	r.DELETE("/api/v1/pusher", _Pusher_DeletePusher0_HTTP_Handler(srv))
	r.GET("/api/v1/pusher/{id}", _Pusher_GetPusher0_HTTP_Handler(srv))
	r.GET("/api/v1/pushers", _Pusher_ListPusher0_HTTP_Handler(srv))
	r.PUT("/api/v1/pusher/receiver", _Pusher_CreateReceiver0_HTTP_Handler(srv))
	r.POST("/api/v1/push/receiver/{id}", _Pusher_UpdateReceiver0_HTTP_Handler(srv))
	r.DELETE("/api/v1/push/receiver/{id}", _Pusher_DeleteReceiver0_HTTP_Handler(srv))
	r.GET("/api/v1/push/receiver/{id}", _Pusher_GetReceiver0_HTTP_Handler(srv))
	r.GET("/api/v1/push/receivers", _Pusher_ListReceiver0_HTTP_Handler(srv))
}

func _Pusher_Report0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Report(ctx, req.(*ReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_ListController0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListControllerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherListController)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListController(ctx, req.(*ListControllerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListControllerReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_CreatePusher0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePusherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherCreatePusher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePusher(ctx, req.(*CreatePusherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePusherReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_UpdatePusher0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePusherRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherUpdatePusher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePusher(ctx, req.(*UpdatePusherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePusherReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_DeletePusher0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePusherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherDeletePusher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePusher(ctx, req.(*DeletePusherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePusherReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_GetPusher0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPusherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherGetPusher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPusher(ctx, req.(*GetPusherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPusherReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_ListPusher0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPusherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherListPusher)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPusher(ctx, req.(*ListPusherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPushRequest)
		return ctx.Result(200, reply)
	}
}

func _Pusher_CreateReceiver0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateReceiverRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherCreateReceiver)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateReceiver(ctx, req.(*CreateReceiverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReceiverReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_UpdateReceiver0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateReceiverRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherUpdateReceiver)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReceiver(ctx, req.(*UpdateReceiverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateReceiverReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_DeleteReceiver0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteReceiverRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherDeleteReceiver)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteReceiver(ctx, req.(*DeleteReceiverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteReceiverReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_GetReceiver0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReceiverRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherGetReceiver)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReceiver(ctx, req.(*GetReceiverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReceiverReply)
		return ctx.Result(200, reply)
	}
}

func _Pusher_ListReceiver0_HTTP_Handler(srv PusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListReceiverRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPusherListReceiver)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReceiver(ctx, req.(*ListReceiverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReceiverReply)
		return ctx.Result(200, reply)
	}
}

type PusherHTTPClient interface {
	CreatePusher(ctx context.Context, req *CreatePusherRequest, opts ...http.CallOption) (rsp *CreatePusherReply, err error)
	CreateReceiver(ctx context.Context, req *CreateReceiverRequest, opts ...http.CallOption) (rsp *CreateReceiverReply, err error)
	DeletePusher(ctx context.Context, req *DeletePusherRequest, opts ...http.CallOption) (rsp *DeletePusherReply, err error)
	DeleteReceiver(ctx context.Context, req *DeleteReceiverRequest, opts ...http.CallOption) (rsp *DeleteReceiverReply, err error)
	GetPusher(ctx context.Context, req *GetPusherRequest, opts ...http.CallOption) (rsp *GetPusherReply, err error)
	GetReceiver(ctx context.Context, req *GetReceiverRequest, opts ...http.CallOption) (rsp *GetReceiverReply, err error)
	ListController(ctx context.Context, req *ListControllerRequest, opts ...http.CallOption) (rsp *ListControllerReply, err error)
	ListPusher(ctx context.Context, req *ListPusherRequest, opts ...http.CallOption) (rsp *ListPushRequest, err error)
	ListReceiver(ctx context.Context, req *ListReceiverRequest, opts ...http.CallOption) (rsp *ListReceiverReply, err error)
	Report(ctx context.Context, req *ReportRequest, opts ...http.CallOption) (rsp *ReportReply, err error)
	UpdatePusher(ctx context.Context, req *UpdatePusherRequest, opts ...http.CallOption) (rsp *UpdatePusherReply, err error)
	UpdateReceiver(ctx context.Context, req *UpdateReceiverRequest, opts ...http.CallOption) (rsp *UpdateReceiverReply, err error)
}

type PusherHTTPClientImpl struct {
	cc *http.Client
}

func NewPusherHTTPClient(client *http.Client) PusherHTTPClient {
	return &PusherHTTPClientImpl{client}
}

func (c *PusherHTTPClientImpl) CreatePusher(ctx context.Context, in *CreatePusherRequest, opts ...http.CallOption) (*CreatePusherReply, error) {
	var out CreatePusherReply
	pattern := "/api/v1/pusher"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPusherCreatePusher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...http.CallOption) (*CreateReceiverReply, error) {
	var out CreateReceiverReply
	pattern := "/api/v1/pusher/receiver"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPusherCreateReceiver))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) DeletePusher(ctx context.Context, in *DeletePusherRequest, opts ...http.CallOption) (*DeletePusherReply, error) {
	var out DeletePusherReply
	pattern := "/api/v1/pusher"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherDeletePusher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...http.CallOption) (*DeleteReceiverReply, error) {
	var out DeleteReceiverReply
	pattern := "/api/v1/push/receiver/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherDeleteReceiver))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) GetPusher(ctx context.Context, in *GetPusherRequest, opts ...http.CallOption) (*GetPusherReply, error) {
	var out GetPusherReply
	pattern := "/api/v1/pusher/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherGetPusher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) GetReceiver(ctx context.Context, in *GetReceiverRequest, opts ...http.CallOption) (*GetReceiverReply, error) {
	var out GetReceiverReply
	pattern := "/api/v1/push/receiver/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherGetReceiver))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) ListController(ctx context.Context, in *ListControllerRequest, opts ...http.CallOption) (*ListControllerReply, error) {
	var out ListControllerReply
	pattern := "/api/v1/pushers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherListController))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) ListPusher(ctx context.Context, in *ListPusherRequest, opts ...http.CallOption) (*ListPushRequest, error) {
	var out ListPushRequest
	pattern := "/api/v1/pushers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherListPusher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) ListReceiver(ctx context.Context, in *ListReceiverRequest, opts ...http.CallOption) (*ListReceiverReply, error) {
	var out ListReceiverReply
	pattern := "/api/v1/push/receivers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPusherListReceiver))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) Report(ctx context.Context, in *ReportRequest, opts ...http.CallOption) (*ReportReply, error) {
	var out ReportReply
	pattern := "/api/v1/pusher/report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPusherReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) UpdatePusher(ctx context.Context, in *UpdatePusherRequest, opts ...http.CallOption) (*UpdatePusherReply, error) {
	var out UpdatePusherReply
	pattern := "/api/v1/pusher/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPusherUpdatePusher))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PusherHTTPClientImpl) UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...http.CallOption) (*UpdateReceiverReply, error) {
	var out UpdateReceiverReply
	pattern := "/api/v1/push/receiver/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPusherUpdateReceiver))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
