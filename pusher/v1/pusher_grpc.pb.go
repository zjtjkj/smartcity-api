// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pusher/v1/pusher.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PusherClient is the client API for Pusher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PusherClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
	ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerReply, error)
	CreatePusher(ctx context.Context, in *CreatePusherRequest, opts ...grpc.CallOption) (*CreatePusherReply, error)
	UpdatePusher(ctx context.Context, in *UpdatePusherRequest, opts ...grpc.CallOption) (*UpdatePusherReply, error)
	DeletePusher(ctx context.Context, in *DeletePusherRequest, opts ...grpc.CallOption) (*DeletePusherReply, error)
	GetPusher(ctx context.Context, in *GetPusherRequest, opts ...grpc.CallOption) (*GetPusherReply, error)
	ListPusher(ctx context.Context, in *ListPusherRequest, opts ...grpc.CallOption) (*ListPusherReply, error)
	CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*CreateEndpointReply, error)
	UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*UpdateEndpointReply, error)
	DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*DeleteEndpointReply, error)
	GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*GetEndpointReply, error)
	ListEndpoint(ctx context.Context, in *ListEndpointRequest, opts ...grpc.CallOption) (*ListEndpointReply, error)
	CreateGlobalTimeFilter(ctx context.Context, in *CreateGlobalTimeFilterRequest, opts ...grpc.CallOption) (*CreateGlobalTimeFilterReply, error)
	DeleteGlobalTimeFilter(ctx context.Context, in *DeleteGlobalTimeFilterRequest, opts ...grpc.CallOption) (*DeleteGlobalTimeFilterReply, error)
	UpdateGlobalTimeFilter(ctx context.Context, in *UpdateGlobalTimeFilterRequest, opts ...grpc.CallOption) (*UpdateGlobalTimeFilterReply, error)
	ListGlobalTimeFilter(ctx context.Context, in *ListGlobalTimeFilterRequest, opts ...grpc.CallOption) (*ListGlobalTimeFilterReply, error)
	CreateGlobalModuleFilter(ctx context.Context, in *CreateGlobalModuleFilterRequest, opts ...grpc.CallOption) (*CreateGlobalModuleFilterReply, error)
	DeleteGlobalModuleFilter(ctx context.Context, in *DeleteGlobalModuleFilterRequest, opts ...grpc.CallOption) (*DeleteGlobalModuleFilterReply, error)
	UpdateGlobalModuleFilter(ctx context.Context, in *UpdateGlobalModuleFilterRequest, opts ...grpc.CallOption) (*UpdateGlobalModuleFilterReply, error)
	ListGlobalModuleFilter(ctx context.Context, in *ListGlobalModuleFilterRequest, opts ...grpc.CallOption) (*ListGlobalModuleFilterReply, error)
}

type pusherClient struct {
	cc grpc.ClientConnInterface
}

func NewPusherClient(cc grpc.ClientConnInterface) PusherClient {
	return &pusherClient{cc}
}

func (c *pusherClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerReply, error) {
	out := new(ListControllerReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreatePusher(ctx context.Context, in *CreatePusherRequest, opts ...grpc.CallOption) (*CreatePusherReply, error) {
	out := new(CreatePusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreatePusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) UpdatePusher(ctx context.Context, in *UpdatePusherRequest, opts ...grpc.CallOption) (*UpdatePusherReply, error) {
	out := new(UpdatePusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/UpdatePusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeletePusher(ctx context.Context, in *DeletePusherRequest, opts ...grpc.CallOption) (*DeletePusherReply, error) {
	out := new(DeletePusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeletePusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) GetPusher(ctx context.Context, in *GetPusherRequest, opts ...grpc.CallOption) (*GetPusherReply, error) {
	out := new(GetPusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/GetPusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListPusher(ctx context.Context, in *ListPusherRequest, opts ...grpc.CallOption) (*ListPusherReply, error) {
	out := new(ListPusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListPusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*CreateEndpointReply, error) {
	out := new(CreateEndpointReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*UpdateEndpointReply, error) {
	out := new(UpdateEndpointReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/UpdateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*DeleteEndpointReply, error) {
	out := new(DeleteEndpointReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*GetEndpointReply, error) {
	out := new(GetEndpointReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/GetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListEndpoint(ctx context.Context, in *ListEndpointRequest, opts ...grpc.CallOption) (*ListEndpointReply, error) {
	out := new(ListEndpointReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreateGlobalTimeFilter(ctx context.Context, in *CreateGlobalTimeFilterRequest, opts ...grpc.CallOption) (*CreateGlobalTimeFilterReply, error) {
	out := new(CreateGlobalTimeFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreateGlobalTimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeleteGlobalTimeFilter(ctx context.Context, in *DeleteGlobalTimeFilterRequest, opts ...grpc.CallOption) (*DeleteGlobalTimeFilterReply, error) {
	out := new(DeleteGlobalTimeFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeleteGlobalTimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) UpdateGlobalTimeFilter(ctx context.Context, in *UpdateGlobalTimeFilterRequest, opts ...grpc.CallOption) (*UpdateGlobalTimeFilterReply, error) {
	out := new(UpdateGlobalTimeFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/UpdateGlobalTimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListGlobalTimeFilter(ctx context.Context, in *ListGlobalTimeFilterRequest, opts ...grpc.CallOption) (*ListGlobalTimeFilterReply, error) {
	out := new(ListGlobalTimeFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListGlobalTimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreateGlobalModuleFilter(ctx context.Context, in *CreateGlobalModuleFilterRequest, opts ...grpc.CallOption) (*CreateGlobalModuleFilterReply, error) {
	out := new(CreateGlobalModuleFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreateGlobalModuleFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeleteGlobalModuleFilter(ctx context.Context, in *DeleteGlobalModuleFilterRequest, opts ...grpc.CallOption) (*DeleteGlobalModuleFilterReply, error) {
	out := new(DeleteGlobalModuleFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeleteGlobalModuleFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) UpdateGlobalModuleFilter(ctx context.Context, in *UpdateGlobalModuleFilterRequest, opts ...grpc.CallOption) (*UpdateGlobalModuleFilterReply, error) {
	out := new(UpdateGlobalModuleFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/UpdateGlobalModuleFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListGlobalModuleFilter(ctx context.Context, in *ListGlobalModuleFilterRequest, opts ...grpc.CallOption) (*ListGlobalModuleFilterReply, error) {
	out := new(ListGlobalModuleFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListGlobalModuleFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PusherServer is the server API for Pusher service.
// All implementations must embed UnimplementedPusherServer
// for forward compatibility
type PusherServer interface {
	Report(context.Context, *ReportRequest) (*ReportReply, error)
	ListController(context.Context, *ListControllerRequest) (*ListControllerReply, error)
	CreatePusher(context.Context, *CreatePusherRequest) (*CreatePusherReply, error)
	UpdatePusher(context.Context, *UpdatePusherRequest) (*UpdatePusherReply, error)
	DeletePusher(context.Context, *DeletePusherRequest) (*DeletePusherReply, error)
	GetPusher(context.Context, *GetPusherRequest) (*GetPusherReply, error)
	ListPusher(context.Context, *ListPusherRequest) (*ListPusherReply, error)
	CreateEndpoint(context.Context, *CreateEndpointRequest) (*CreateEndpointReply, error)
	UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*UpdateEndpointReply, error)
	DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*DeleteEndpointReply, error)
	GetEndpoint(context.Context, *GetEndpointRequest) (*GetEndpointReply, error)
	ListEndpoint(context.Context, *ListEndpointRequest) (*ListEndpointReply, error)
	CreateGlobalTimeFilter(context.Context, *CreateGlobalTimeFilterRequest) (*CreateGlobalTimeFilterReply, error)
	DeleteGlobalTimeFilter(context.Context, *DeleteGlobalTimeFilterRequest) (*DeleteGlobalTimeFilterReply, error)
	UpdateGlobalTimeFilter(context.Context, *UpdateGlobalTimeFilterRequest) (*UpdateGlobalTimeFilterReply, error)
	ListGlobalTimeFilter(context.Context, *ListGlobalTimeFilterRequest) (*ListGlobalTimeFilterReply, error)
	CreateGlobalModuleFilter(context.Context, *CreateGlobalModuleFilterRequest) (*CreateGlobalModuleFilterReply, error)
	DeleteGlobalModuleFilter(context.Context, *DeleteGlobalModuleFilterRequest) (*DeleteGlobalModuleFilterReply, error)
	UpdateGlobalModuleFilter(context.Context, *UpdateGlobalModuleFilterRequest) (*UpdateGlobalModuleFilterReply, error)
	ListGlobalModuleFilter(context.Context, *ListGlobalModuleFilterRequest) (*ListGlobalModuleFilterReply, error)
	mustEmbedUnimplementedPusherServer()
}

// UnimplementedPusherServer must be embedded to have forward compatible implementations.
type UnimplementedPusherServer struct {
}

func (UnimplementedPusherServer) Report(context.Context, *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedPusherServer) ListController(context.Context, *ListControllerRequest) (*ListControllerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListController not implemented")
}
func (UnimplementedPusherServer) CreatePusher(context.Context, *CreatePusherRequest) (*CreatePusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePusher not implemented")
}
func (UnimplementedPusherServer) UpdatePusher(context.Context, *UpdatePusherRequest) (*UpdatePusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePusher not implemented")
}
func (UnimplementedPusherServer) DeletePusher(context.Context, *DeletePusherRequest) (*DeletePusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePusher not implemented")
}
func (UnimplementedPusherServer) GetPusher(context.Context, *GetPusherRequest) (*GetPusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPusher not implemented")
}
func (UnimplementedPusherServer) ListPusher(context.Context, *ListPusherRequest) (*ListPusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPusher not implemented")
}
func (UnimplementedPusherServer) CreateEndpoint(context.Context, *CreateEndpointRequest) (*CreateEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (UnimplementedPusherServer) UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*UpdateEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoint not implemented")
}
func (UnimplementedPusherServer) DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*DeleteEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpoint not implemented")
}
func (UnimplementedPusherServer) GetEndpoint(context.Context, *GetEndpointRequest) (*GetEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (UnimplementedPusherServer) ListEndpoint(context.Context, *ListEndpointRequest) (*ListEndpointReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpoint not implemented")
}
func (UnimplementedPusherServer) CreateGlobalTimeFilter(context.Context, *CreateGlobalTimeFilterRequest) (*CreateGlobalTimeFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalTimeFilter not implemented")
}
func (UnimplementedPusherServer) DeleteGlobalTimeFilter(context.Context, *DeleteGlobalTimeFilterRequest) (*DeleteGlobalTimeFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalTimeFilter not implemented")
}
func (UnimplementedPusherServer) UpdateGlobalTimeFilter(context.Context, *UpdateGlobalTimeFilterRequest) (*UpdateGlobalTimeFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalTimeFilter not implemented")
}
func (UnimplementedPusherServer) ListGlobalTimeFilter(context.Context, *ListGlobalTimeFilterRequest) (*ListGlobalTimeFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalTimeFilter not implemented")
}
func (UnimplementedPusherServer) CreateGlobalModuleFilter(context.Context, *CreateGlobalModuleFilterRequest) (*CreateGlobalModuleFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalModuleFilter not implemented")
}
func (UnimplementedPusherServer) DeleteGlobalModuleFilter(context.Context, *DeleteGlobalModuleFilterRequest) (*DeleteGlobalModuleFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalModuleFilter not implemented")
}
func (UnimplementedPusherServer) UpdateGlobalModuleFilter(context.Context, *UpdateGlobalModuleFilterRequest) (*UpdateGlobalModuleFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalModuleFilter not implemented")
}
func (UnimplementedPusherServer) ListGlobalModuleFilter(context.Context, *ListGlobalModuleFilterRequest) (*ListGlobalModuleFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalModuleFilter not implemented")
}
func (UnimplementedPusherServer) mustEmbedUnimplementedPusherServer() {}

// UnsafePusherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PusherServer will
// result in compilation errors.
type UnsafePusherServer interface {
	mustEmbedUnimplementedPusherServer()
}

func RegisterPusherServer(s grpc.ServiceRegistrar, srv PusherServer) {
	s.RegisterService(&Pusher_ServiceDesc, srv)
}

func _Pusher_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListController(ctx, req.(*ListControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreatePusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreatePusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreatePusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreatePusher(ctx, req.(*CreatePusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_UpdatePusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).UpdatePusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/UpdatePusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).UpdatePusher(ctx, req.(*UpdatePusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeletePusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeletePusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeletePusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeletePusher(ctx, req.(*DeletePusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_GetPusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).GetPusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/GetPusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).GetPusher(ctx, req.(*GetPusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListPusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListPusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListPusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListPusher(ctx, req.(*ListPusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreateEndpoint(ctx, req.(*CreateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_UpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).UpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/UpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).UpdateEndpoint(ctx, req.(*UpdateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeleteEndpoint(ctx, req.(*DeleteEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/GetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).GetEndpoint(ctx, req.(*GetEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListEndpoint(ctx, req.(*ListEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreateGlobalTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalTimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreateGlobalTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreateGlobalTimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreateGlobalTimeFilter(ctx, req.(*CreateGlobalTimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeleteGlobalTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalTimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeleteGlobalTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeleteGlobalTimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeleteGlobalTimeFilter(ctx, req.(*DeleteGlobalTimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_UpdateGlobalTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalTimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).UpdateGlobalTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/UpdateGlobalTimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).UpdateGlobalTimeFilter(ctx, req.(*UpdateGlobalTimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListGlobalTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalTimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListGlobalTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListGlobalTimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListGlobalTimeFilter(ctx, req.(*ListGlobalTimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreateGlobalModuleFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalModuleFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreateGlobalModuleFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreateGlobalModuleFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreateGlobalModuleFilter(ctx, req.(*CreateGlobalModuleFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeleteGlobalModuleFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalModuleFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeleteGlobalModuleFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeleteGlobalModuleFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeleteGlobalModuleFilter(ctx, req.(*DeleteGlobalModuleFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_UpdateGlobalModuleFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalModuleFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).UpdateGlobalModuleFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/UpdateGlobalModuleFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).UpdateGlobalModuleFilter(ctx, req.(*UpdateGlobalModuleFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListGlobalModuleFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalModuleFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListGlobalModuleFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListGlobalModuleFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListGlobalModuleFilter(ctx, req.(*ListGlobalModuleFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pusher_ServiceDesc is the grpc.ServiceDesc for Pusher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pusher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pusher.v1.Pusher",
	HandlerType: (*PusherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _Pusher_Report_Handler,
		},
		{
			MethodName: "ListController",
			Handler:    _Pusher_ListController_Handler,
		},
		{
			MethodName: "CreatePusher",
			Handler:    _Pusher_CreatePusher_Handler,
		},
		{
			MethodName: "UpdatePusher",
			Handler:    _Pusher_UpdatePusher_Handler,
		},
		{
			MethodName: "DeletePusher",
			Handler:    _Pusher_DeletePusher_Handler,
		},
		{
			MethodName: "GetPusher",
			Handler:    _Pusher_GetPusher_Handler,
		},
		{
			MethodName: "ListPusher",
			Handler:    _Pusher_ListPusher_Handler,
		},
		{
			MethodName: "CreateEndpoint",
			Handler:    _Pusher_CreateEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpoint",
			Handler:    _Pusher_UpdateEndpoint_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _Pusher_DeleteEndpoint_Handler,
		},
		{
			MethodName: "GetEndpoint",
			Handler:    _Pusher_GetEndpoint_Handler,
		},
		{
			MethodName: "ListEndpoint",
			Handler:    _Pusher_ListEndpoint_Handler,
		},
		{
			MethodName: "CreateGlobalTimeFilter",
			Handler:    _Pusher_CreateGlobalTimeFilter_Handler,
		},
		{
			MethodName: "DeleteGlobalTimeFilter",
			Handler:    _Pusher_DeleteGlobalTimeFilter_Handler,
		},
		{
			MethodName: "UpdateGlobalTimeFilter",
			Handler:    _Pusher_UpdateGlobalTimeFilter_Handler,
		},
		{
			MethodName: "ListGlobalTimeFilter",
			Handler:    _Pusher_ListGlobalTimeFilter_Handler,
		},
		{
			MethodName: "CreateGlobalModuleFilter",
			Handler:    _Pusher_CreateGlobalModuleFilter_Handler,
		},
		{
			MethodName: "DeleteGlobalModuleFilter",
			Handler:    _Pusher_DeleteGlobalModuleFilter_Handler,
		},
		{
			MethodName: "UpdateGlobalModuleFilter",
			Handler:    _Pusher_UpdateGlobalModuleFilter_Handler,
		},
		{
			MethodName: "ListGlobalModuleFilter",
			Handler:    _Pusher_ListGlobalModuleFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pusher/v1/pusher.proto",
}
