// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pusher/v1/pusher.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PusherClient is the client API for Pusher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PusherClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
	CreatePusher(ctx context.Context, in *CreatePusherRequest, opts ...grpc.CallOption) (*CreatePusherReply, error)
	UpdatePusher(ctx context.Context, in *UpdatePusherRequest, opts ...grpc.CallOption) (*UpdatePusherReply, error)
	DeletePusher(ctx context.Context, in *DeletePusherRequest, opts ...grpc.CallOption) (*DeletePusherReply, error)
	GetPusher(ctx context.Context, in *GetPusherRequest, opts ...grpc.CallOption) (*GetPusherReply, error)
	ListPusher(ctx context.Context, in *ListPusherRequest, opts ...grpc.CallOption) (*ListPushRequest, error)
	ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerReply, error)
	CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...grpc.CallOption) (*CreateReceiverReply, error)
	UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...grpc.CallOption) (*UpdateReceiverReply, error)
	DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*DeleteReceiverReply, error)
	GetReceiver(ctx context.Context, in *GetReceiverRequest, opts ...grpc.CallOption) (*GetReceiverReply, error)
	ListReceiver(ctx context.Context, in *ListReceiverRequest, opts ...grpc.CallOption) (*ListReceiverReply, error)
	CreateTimeFilter(ctx context.Context, in *CreateTimeFilterRequest, opts ...grpc.CallOption) (*CreateTimeFilterReply, error)
	DeleteTimeFilter(ctx context.Context, in *DeleteTimeFilterRequest, opts ...grpc.CallOption) (*DeleteTimeFilterReply, error)
	CreateKindFilter(ctx context.Context, in *CreateKindFilterRequest, opts ...grpc.CallOption) (*CreateKindFilterReply, error)
	DeleteKindFilter(ctx context.Context, in *DeleteKindFilterRequest, opts ...grpc.CallOption) (*DeleteKindFilterReply, error)
	ListGlobalFilter(ctx context.Context, in *ListFilterRequest, opts ...grpc.CallOption) (*ListFilterReply, error)
}

type pusherClient struct {
	cc grpc.ClientConnInterface
}

func NewPusherClient(cc grpc.ClientConnInterface) PusherClient {
	return &pusherClient{cc}
}

func (c *pusherClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreatePusher(ctx context.Context, in *CreatePusherRequest, opts ...grpc.CallOption) (*CreatePusherReply, error) {
	out := new(CreatePusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreatePusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) UpdatePusher(ctx context.Context, in *UpdatePusherRequest, opts ...grpc.CallOption) (*UpdatePusherReply, error) {
	out := new(UpdatePusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/UpdatePusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeletePusher(ctx context.Context, in *DeletePusherRequest, opts ...grpc.CallOption) (*DeletePusherReply, error) {
	out := new(DeletePusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeletePusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) GetPusher(ctx context.Context, in *GetPusherRequest, opts ...grpc.CallOption) (*GetPusherReply, error) {
	out := new(GetPusherReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/GetPusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListPusher(ctx context.Context, in *ListPusherRequest, opts ...grpc.CallOption) (*ListPushRequest, error) {
	out := new(ListPushRequest)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListPusher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListController(ctx context.Context, in *ListControllerRequest, opts ...grpc.CallOption) (*ListControllerReply, error) {
	out := new(ListControllerReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreateReceiver(ctx context.Context, in *CreateReceiverRequest, opts ...grpc.CallOption) (*CreateReceiverReply, error) {
	out := new(CreateReceiverReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreateReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) UpdateReceiver(ctx context.Context, in *UpdateReceiverRequest, opts ...grpc.CallOption) (*UpdateReceiverReply, error) {
	out := new(UpdateReceiverReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/UpdateReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeleteReceiver(ctx context.Context, in *DeleteReceiverRequest, opts ...grpc.CallOption) (*DeleteReceiverReply, error) {
	out := new(DeleteReceiverReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeleteReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) GetReceiver(ctx context.Context, in *GetReceiverRequest, opts ...grpc.CallOption) (*GetReceiverReply, error) {
	out := new(GetReceiverReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/GetReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListReceiver(ctx context.Context, in *ListReceiverRequest, opts ...grpc.CallOption) (*ListReceiverReply, error) {
	out := new(ListReceiverReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreateTimeFilter(ctx context.Context, in *CreateTimeFilterRequest, opts ...grpc.CallOption) (*CreateTimeFilterReply, error) {
	out := new(CreateTimeFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreateTimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeleteTimeFilter(ctx context.Context, in *DeleteTimeFilterRequest, opts ...grpc.CallOption) (*DeleteTimeFilterReply, error) {
	out := new(DeleteTimeFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeleteTimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) CreateKindFilter(ctx context.Context, in *CreateKindFilterRequest, opts ...grpc.CallOption) (*CreateKindFilterReply, error) {
	out := new(CreateKindFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/CreateKindFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) DeleteKindFilter(ctx context.Context, in *DeleteKindFilterRequest, opts ...grpc.CallOption) (*DeleteKindFilterReply, error) {
	out := new(DeleteKindFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/DeleteKindFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pusherClient) ListGlobalFilter(ctx context.Context, in *ListFilterRequest, opts ...grpc.CallOption) (*ListFilterReply, error) {
	out := new(ListFilterReply)
	err := c.cc.Invoke(ctx, "/api.pusher.v1.Pusher/ListGlobalFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PusherServer is the server API for Pusher service.
// All implementations must embed UnimplementedPusherServer
// for forward compatibility
type PusherServer interface {
	Report(context.Context, *ReportRequest) (*ReportReply, error)
	CreatePusher(context.Context, *CreatePusherRequest) (*CreatePusherReply, error)
	UpdatePusher(context.Context, *UpdatePusherRequest) (*UpdatePusherReply, error)
	DeletePusher(context.Context, *DeletePusherRequest) (*DeletePusherReply, error)
	GetPusher(context.Context, *GetPusherRequest) (*GetPusherReply, error)
	ListPusher(context.Context, *ListPusherRequest) (*ListPushRequest, error)
	ListController(context.Context, *ListControllerRequest) (*ListControllerReply, error)
	CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverReply, error)
	UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverReply, error)
	DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverReply, error)
	GetReceiver(context.Context, *GetReceiverRequest) (*GetReceiverReply, error)
	ListReceiver(context.Context, *ListReceiverRequest) (*ListReceiverReply, error)
	CreateTimeFilter(context.Context, *CreateTimeFilterRequest) (*CreateTimeFilterReply, error)
	DeleteTimeFilter(context.Context, *DeleteTimeFilterRequest) (*DeleteTimeFilterReply, error)
	CreateKindFilter(context.Context, *CreateKindFilterRequest) (*CreateKindFilterReply, error)
	DeleteKindFilter(context.Context, *DeleteKindFilterRequest) (*DeleteKindFilterReply, error)
	ListGlobalFilter(context.Context, *ListFilterRequest) (*ListFilterReply, error)
	mustEmbedUnimplementedPusherServer()
}

// UnimplementedPusherServer must be embedded to have forward compatible implementations.
type UnimplementedPusherServer struct {
}

func (UnimplementedPusherServer) Report(context.Context, *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedPusherServer) CreatePusher(context.Context, *CreatePusherRequest) (*CreatePusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePusher not implemented")
}
func (UnimplementedPusherServer) UpdatePusher(context.Context, *UpdatePusherRequest) (*UpdatePusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePusher not implemented")
}
func (UnimplementedPusherServer) DeletePusher(context.Context, *DeletePusherRequest) (*DeletePusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePusher not implemented")
}
func (UnimplementedPusherServer) GetPusher(context.Context, *GetPusherRequest) (*GetPusherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPusher not implemented")
}
func (UnimplementedPusherServer) ListPusher(context.Context, *ListPusherRequest) (*ListPushRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPusher not implemented")
}
func (UnimplementedPusherServer) ListController(context.Context, *ListControllerRequest) (*ListControllerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListController not implemented")
}
func (UnimplementedPusherServer) CreateReceiver(context.Context, *CreateReceiverRequest) (*CreateReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceiver not implemented")
}
func (UnimplementedPusherServer) UpdateReceiver(context.Context, *UpdateReceiverRequest) (*UpdateReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceiver not implemented")
}
func (UnimplementedPusherServer) DeleteReceiver(context.Context, *DeleteReceiverRequest) (*DeleteReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReceiver not implemented")
}
func (UnimplementedPusherServer) GetReceiver(context.Context, *GetReceiverRequest) (*GetReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiver not implemented")
}
func (UnimplementedPusherServer) ListReceiver(context.Context, *ListReceiverRequest) (*ListReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceiver not implemented")
}
func (UnimplementedPusherServer) CreateTimeFilter(context.Context, *CreateTimeFilterRequest) (*CreateTimeFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeFilter not implemented")
}
func (UnimplementedPusherServer) DeleteTimeFilter(context.Context, *DeleteTimeFilterRequest) (*DeleteTimeFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimeFilter not implemented")
}
func (UnimplementedPusherServer) CreateKindFilter(context.Context, *CreateKindFilterRequest) (*CreateKindFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKindFilter not implemented")
}
func (UnimplementedPusherServer) DeleteKindFilter(context.Context, *DeleteKindFilterRequest) (*DeleteKindFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKindFilter not implemented")
}
func (UnimplementedPusherServer) ListGlobalFilter(context.Context, *ListFilterRequest) (*ListFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalFilter not implemented")
}
func (UnimplementedPusherServer) mustEmbedUnimplementedPusherServer() {}

// UnsafePusherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PusherServer will
// result in compilation errors.
type UnsafePusherServer interface {
	mustEmbedUnimplementedPusherServer()
}

func RegisterPusherServer(s grpc.ServiceRegistrar, srv PusherServer) {
	s.RegisterService(&Pusher_ServiceDesc, srv)
}

func _Pusher_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreatePusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreatePusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreatePusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreatePusher(ctx, req.(*CreatePusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_UpdatePusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).UpdatePusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/UpdatePusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).UpdatePusher(ctx, req.(*UpdatePusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeletePusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeletePusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeletePusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeletePusher(ctx, req.(*DeletePusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_GetPusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).GetPusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/GetPusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).GetPusher(ctx, req.(*GetPusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListPusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPusherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListPusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListPusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListPusher(ctx, req.(*ListPusherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListController(ctx, req.(*ListControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreateReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreateReceiver(ctx, req.(*CreateReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_UpdateReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).UpdateReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/UpdateReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).UpdateReceiver(ctx, req.(*UpdateReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeleteReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeleteReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeleteReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeleteReceiver(ctx, req.(*DeleteReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_GetReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).GetReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/GetReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).GetReceiver(ctx, req.(*GetReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListReceiver(ctx, req.(*ListReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreateTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreateTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreateTimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreateTimeFilter(ctx, req.(*CreateTimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeleteTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeleteTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeleteTimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeleteTimeFilter(ctx, req.(*DeleteTimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_CreateKindFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKindFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).CreateKindFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/CreateKindFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).CreateKindFilter(ctx, req.(*CreateKindFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_DeleteKindFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKindFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).DeleteKindFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/DeleteKindFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).DeleteKindFilter(ctx, req.(*DeleteKindFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pusher_ListGlobalFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherServer).ListGlobalFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pusher.v1.Pusher/ListGlobalFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherServer).ListGlobalFilter(ctx, req.(*ListFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pusher_ServiceDesc is the grpc.ServiceDesc for Pusher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pusher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pusher.v1.Pusher",
	HandlerType: (*PusherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _Pusher_Report_Handler,
		},
		{
			MethodName: "CreatePusher",
			Handler:    _Pusher_CreatePusher_Handler,
		},
		{
			MethodName: "UpdatePusher",
			Handler:    _Pusher_UpdatePusher_Handler,
		},
		{
			MethodName: "DeletePusher",
			Handler:    _Pusher_DeletePusher_Handler,
		},
		{
			MethodName: "GetPusher",
			Handler:    _Pusher_GetPusher_Handler,
		},
		{
			MethodName: "ListPusher",
			Handler:    _Pusher_ListPusher_Handler,
		},
		{
			MethodName: "ListController",
			Handler:    _Pusher_ListController_Handler,
		},
		{
			MethodName: "CreateReceiver",
			Handler:    _Pusher_CreateReceiver_Handler,
		},
		{
			MethodName: "UpdateReceiver",
			Handler:    _Pusher_UpdateReceiver_Handler,
		},
		{
			MethodName: "DeleteReceiver",
			Handler:    _Pusher_DeleteReceiver_Handler,
		},
		{
			MethodName: "GetReceiver",
			Handler:    _Pusher_GetReceiver_Handler,
		},
		{
			MethodName: "ListReceiver",
			Handler:    _Pusher_ListReceiver_Handler,
		},
		{
			MethodName: "CreateTimeFilter",
			Handler:    _Pusher_CreateTimeFilter_Handler,
		},
		{
			MethodName: "DeleteTimeFilter",
			Handler:    _Pusher_DeleteTimeFilter_Handler,
		},
		{
			MethodName: "CreateKindFilter",
			Handler:    _Pusher_CreateKindFilter_Handler,
		},
		{
			MethodName: "DeleteKindFilter",
			Handler:    _Pusher_DeleteKindFilter_Handler,
		},
		{
			MethodName: "ListGlobalFilter",
			Handler:    _Pusher_ListGlobalFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pusher/v1/pusher.proto",
}
