// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BAD_REQUEST.String() && e.Code == 400
}

func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FORBIDDEN.String() && e.Code == 403
}

func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsAlertFeatureNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT_FEATURE_NOT_FOUND.String() && e.Code == 500
}

func ErrorAlertFeatureNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ALERT_FEATURE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAlertFeatureAlreadyExisted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT_FEATURE_ALREADY_EXISTED.String() && e.Code == 500
}

func ErrorAlertFeatureAlreadyExisted(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ALERT_FEATURE_ALREADY_EXISTED.String(), fmt.Sprintf(format, args...))
}

func IsCreateAlertFeature(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_ALERT_FEATURE.String() && e.Code == 500
}

func ErrorCreateAlertFeature(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_ALERT_FEATURE.String(), fmt.Sprintf(format, args...))
}

func IsUpdateAlertFeature(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_ALERT_FEATURE.String() && e.Code == 500
}

func ErrorUpdateAlertFeature(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_ALERT_FEATURE.String(), fmt.Sprintf(format, args...))
}

func IsObtainAlertFeature(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OBTAIN_ALERT_FEATURE.String() && e.Code == 500
}

func ErrorObtainAlertFeature(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OBTAIN_ALERT_FEATURE.String(), fmt.Sprintf(format, args...))
}

func IsDeleteAlertFeature(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_ALERT_FEATURE.String() && e.Code == 500
}

func ErrorDeleteAlertFeature(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_ALERT_FEATURE.String(), fmt.Sprintf(format, args...))
}

func IsAlertBehaviorNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT_BEHAVIOR_NOT_FOUND.String() && e.Code == 500
}

func ErrorAlertBehaviorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ALERT_BEHAVIOR_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAlertBehaviorAlreadyExisted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT_BEHAVIOR_ALREADY_EXISTED.String() && e.Code == 500
}

func ErrorAlertBehaviorAlreadyExisted(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ALERT_BEHAVIOR_ALREADY_EXISTED.String(), fmt.Sprintf(format, args...))
}

func IsCreateAlertBehavior(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_ALERT_BEHAVIOR.String() && e.Code == 500
}

func ErrorCreateAlertBehavior(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_ALERT_BEHAVIOR.String(), fmt.Sprintf(format, args...))
}

func IsUpdateAlertBehavior(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_ALERT_BEHAVIOR.String() && e.Code == 500
}

func ErrorUpdateAlertBehavior(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_ALERT_BEHAVIOR.String(), fmt.Sprintf(format, args...))
}

func IsObtainAlertBehavior(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OBTAIN_ALERT_BEHAVIOR.String() && e.Code == 500
}

func ErrorObtainAlertBehavior(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OBTAIN_ALERT_BEHAVIOR.String(), fmt.Sprintf(format, args...))
}

func IsDeleteAlertBehavior(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_ALERT_BEHAVIOR.String() && e.Code == 500
}

func ErrorDeleteAlertBehavior(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_ALERT_BEHAVIOR.String(), fmt.Sprintf(format, args...))
}

func IsAlertLevelAlreadyExisted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT_LEVEL_ALREADY_EXISTED.String() && e.Code == 500
}

func ErrorAlertLevelAlreadyExisted(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ALERT_LEVEL_ALREADY_EXISTED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateAlertLevel(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_ALERT_LEVEL.String() && e.Code == 500
}

func ErrorUpdateAlertLevel(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_ALERT_LEVEL.String(), fmt.Sprintf(format, args...))
}

func IsObtainAlertLevel(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OBTAIN_ALERT_LEVEL.String() && e.Code == 500
}

func ErrorObtainAlertLevel(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OBTAIN_ALERT_LEVEL.String(), fmt.Sprintf(format, args...))
}

func IsUploadAlertFeatureImage(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPLOAD_ALERT_FEATURE_IMAGE.String() && e.Code == 500
}

func ErrorUploadAlertFeatureImage(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPLOAD_ALERT_FEATURE_IMAGE.String(), fmt.Sprintf(format, args...))
}

func IsAlertLevelNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT_LEVEL_NOT_FOUND.String() && e.Code == 500
}

func ErrorAlertLevelNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ALERT_LEVEL_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
