// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings/v1/settings.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GeneralParameters with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GeneralParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneralParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GeneralParametersMultiError, or nil if none found.
func (m *GeneralParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneralParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GeneralParametersValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GeneralParametersValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeneralParametersValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	if len(errors) > 0 {
		return GeneralParametersMultiError(errors)
	}

	return nil
}

// GeneralParametersMultiError is an error wrapping multiple validation errors
// returned by GeneralParameters.ValidateAll() if the designated constraints
// aren't met.
type GeneralParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneralParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneralParametersMultiError) AllErrors() []error { return m }

// GeneralParametersValidationError is the validation error returned by
// GeneralParameters.Validate if the designated constraints aren't met.
type GeneralParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneralParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneralParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneralParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneralParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneralParametersValidationError) ErrorName() string {
	return "GeneralParametersValidationError"
}

// Error satisfies the builtin error interface
func (e GeneralParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneralParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneralParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneralParametersValidationError{}

// Validate checks the field values on ListGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGeneralParametersRequestMultiError, or nil if none found.
func (m *ListGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// ListGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by ListGeneralParametersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGeneralParametersRequestMultiError) AllErrors() []error { return m }

// ListGeneralParametersRequestValidationError is the validation error returned
// by ListGeneralParametersRequest.Validate if the designated constraints
// aren't met.
type ListGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneralParametersRequestValidationError) ErrorName() string {
	return "ListGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneralParametersRequestValidationError{}

// Validate checks the field values on ListGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGeneralParametersReplyMultiError, or nil if none found.
func (m *ListGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGeneralParametersReplyValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGeneralParametersReplyValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGeneralParametersReplyValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// ListGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by ListGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type ListGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGeneralParametersReplyMultiError) AllErrors() []error { return m }

// ListGeneralParametersReplyValidationError is the validation error returned
// by ListGeneralParametersReply.Validate if the designated constraints aren't met.
type ListGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneralParametersReplyValidationError) ErrorName() string {
	return "ListGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneralParametersReplyValidationError{}

// Validate checks the field values on DeleteGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGeneralParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteGeneralParametersRequestMultiError, or nil if none found.
func (m *DeleteGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// DeleteGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteGeneralParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGeneralParametersRequestMultiError) AllErrors() []error { return m }

// DeleteGeneralParametersRequestValidationError is the validation error
// returned by DeleteGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type DeleteGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGeneralParametersRequestValidationError) ErrorName() string {
	return "DeleteGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGeneralParametersRequestValidationError{}

// Validate checks the field values on DeleteGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGeneralParametersReplyMultiError, or nil if none found.
func (m *DeleteGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// DeleteGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGeneralParametersReplyMultiError) AllErrors() []error { return m }

// DeleteGeneralParametersReplyValidationError is the validation error returned
// by DeleteGeneralParametersReply.Validate if the designated constraints
// aren't met.
type DeleteGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGeneralParametersReplyValidationError) ErrorName() string {
	return "DeleteGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGeneralParametersReplyValidationError{}

// Validate checks the field values on UpdateGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGeneralParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateGeneralParametersRequestMultiError, or nil if none found.
func (m *UpdateGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// UpdateGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateGeneralParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGeneralParametersRequestMultiError) AllErrors() []error { return m }

// UpdateGeneralParametersRequestValidationError is the validation error
// returned by UpdateGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type UpdateGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGeneralParametersRequestValidationError) ErrorName() string {
	return "UpdateGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGeneralParametersRequestValidationError{}

// Validate checks the field values on UpdateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGeneralParametersReplyMultiError, or nil if none found.
func (m *UpdateGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// UpdateGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGeneralParametersReplyMultiError) AllErrors() []error { return m }

// UpdateGeneralParametersReplyValidationError is the validation error returned
// by UpdateGeneralParametersReply.Validate if the designated constraints
// aren't met.
type UpdateGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGeneralParametersReplyValidationError) ErrorName() string {
	return "UpdateGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGeneralParametersReplyValidationError{}

// Validate checks the field values on CreateGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGeneralParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateGeneralParametersRequestMultiError, or nil if none found.
func (m *CreateGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	if len(errors) > 0 {
		return CreateGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// CreateGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by CreateGeneralParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGeneralParametersRequestMultiError) AllErrors() []error { return m }

// CreateGeneralParametersRequestValidationError is the validation error
// returned by CreateGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type CreateGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGeneralParametersRequestValidationError) ErrorName() string {
	return "CreateGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGeneralParametersRequestValidationError{}

// Validate checks the field values on CreateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGeneralParametersReplyMultiError, or nil if none found.
func (m *CreateGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// CreateGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by CreateGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type CreateGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGeneralParametersReplyMultiError) AllErrors() []error { return m }

// CreateGeneralParametersReplyValidationError is the validation error returned
// by CreateGeneralParametersReply.Validate if the designated constraints
// aren't met.
type CreateGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGeneralParametersReplyValidationError) ErrorName() string {
	return "CreateGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGeneralParametersReplyValidationError{}

// Validate checks the field values on CreateCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCameraAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCameraAttrRequestMultiError, or nil if none found.
func (m *CreateCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Src

	if len(errors) > 0 {
		return CreateCameraAttrRequestMultiError(errors)
	}

	return nil
}

// CreateCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCameraAttrRequestMultiError) AllErrors() []error { return m }

// CreateCameraAttrRequestValidationError is the validation error returned by
// CreateCameraAttrRequest.Validate if the designated constraints aren't met.
type CreateCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraAttrRequestValidationError) ErrorName() string {
	return "CreateCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraAttrRequestValidationError{}

// Validate checks the field values on CreateCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCameraAttrReplyMultiError, or nil if none found.
func (m *CreateCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCameraAttrReplyMultiError(errors)
	}

	return nil
}

// CreateCameraAttrReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCameraAttrReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCameraAttrReplyMultiError) AllErrors() []error { return m }

// CreateCameraAttrReplyValidationError is the validation error returned by
// CreateCameraAttrReply.Validate if the designated constraints aren't met.
type CreateCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraAttrReplyValidationError) ErrorName() string {
	return "CreateCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraAttrReplyValidationError{}

// Validate checks the field values on DeleteCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCameraAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCameraAttrRequestMultiError, or nil if none found.
func (m *DeleteCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCameraAttrRequestMultiError(errors)
	}

	return nil
}

// DeleteCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCameraAttrRequestMultiError) AllErrors() []error { return m }

// DeleteCameraAttrRequestValidationError is the validation error returned by
// DeleteCameraAttrRequest.Validate if the designated constraints aren't met.
type DeleteCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraAttrRequestValidationError) ErrorName() string {
	return "DeleteCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraAttrRequestValidationError{}

// Validate checks the field values on DeleteCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCameraAttrReplyMultiError, or nil if none found.
func (m *DeleteCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCameraAttrReplyMultiError(errors)
	}

	return nil
}

// DeleteCameraAttrReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCameraAttrReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCameraAttrReplyMultiError) AllErrors() []error { return m }

// DeleteCameraAttrReplyValidationError is the validation error returned by
// DeleteCameraAttrReply.Validate if the designated constraints aren't met.
type DeleteCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraAttrReplyValidationError) ErrorName() string {
	return "DeleteCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraAttrReplyValidationError{}

// Validate checks the field values on GetCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraAttrRequestMultiError, or nil if none found.
func (m *GetCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCameraAttrRequestMultiError(errors)
	}

	return nil
}

// GetCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by GetCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraAttrRequestMultiError) AllErrors() []error { return m }

// GetCameraAttrRequestValidationError is the validation error returned by
// GetCameraAttrRequest.Validate if the designated constraints aren't met.
type GetCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraAttrRequestValidationError) ErrorName() string {
	return "GetCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraAttrRequestValidationError{}

// Validate checks the field values on CameraAttr with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CameraAttr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CameraAttr with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CameraAttrMultiError, or
// nil if none found.
func (m *CameraAttr) ValidateAll() error {
	return m.validate(true)
}

func (m *CameraAttr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CameraAttrValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CameraAttrValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CameraAttrValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Image

	if len(errors) > 0 {
		return CameraAttrMultiError(errors)
	}

	return nil
}

// CameraAttrMultiError is an error wrapping multiple validation errors
// returned by CameraAttr.ValidateAll() if the designated constraints aren't met.
type CameraAttrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CameraAttrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CameraAttrMultiError) AllErrors() []error { return m }

// CameraAttrValidationError is the validation error returned by
// CameraAttr.Validate if the designated constraints aren't met.
type CameraAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraAttrValidationError) ErrorName() string { return "CameraAttrValidationError" }

// Error satisfies the builtin error interface
func (e CameraAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraAttrValidationError{}

// Validate checks the field values on GetCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraAttrReplyMultiError, or nil if none found.
func (m *GetCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCameraAttrReplyValidationError{
					field:  "Attr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCameraAttrReplyValidationError{
					field:  "Attr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCameraAttrReplyValidationError{
				field:  "Attr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCameraAttrReplyMultiError(errors)
	}

	return nil
}

// GetCameraAttrReplyMultiError is an error wrapping multiple validation errors
// returned by GetCameraAttrReply.ValidateAll() if the designated constraints
// aren't met.
type GetCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraAttrReplyMultiError) AllErrors() []error { return m }

// GetCameraAttrReplyValidationError is the validation error returned by
// GetCameraAttrReply.Validate if the designated constraints aren't met.
type GetCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraAttrReplyValidationError) ErrorName() string {
	return "GetCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraAttrReplyValidationError{}

// Validate checks the field values on ListCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraAttrRequestMultiError, or nil if none found.
func (m *ListCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCameraAttrRequestMultiError(errors)
	}

	return nil
}

// ListCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by ListCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraAttrRequestMultiError) AllErrors() []error { return m }

// ListCameraAttrRequestValidationError is the validation error returned by
// ListCameraAttrRequest.Validate if the designated constraints aren't met.
type ListCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraAttrRequestValidationError) ErrorName() string {
	return "ListCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraAttrRequestValidationError{}

// Validate checks the field values on ListCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraAttrReplyMultiError, or nil if none found.
func (m *ListCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCameraAttrReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCameraAttrReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCameraAttrReplyValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCameraAttrReplyMultiError(errors)
	}

	return nil
}

// ListCameraAttrReplyMultiError is an error wrapping multiple validation
// errors returned by ListCameraAttrReply.ValidateAll() if the designated
// constraints aren't met.
type ListCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraAttrReplyMultiError) AllErrors() []error { return m }

// ListCameraAttrReplyValidationError is the validation error returned by
// ListCameraAttrReply.Validate if the designated constraints aren't met.
type ListCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraAttrReplyValidationError) ErrorName() string {
	return "ListCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraAttrReplyValidationError{}

// Validate checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleRequestMultiError, or nil if none found.
func (m *CreateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := CreateModuleRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateModuleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alias

	if len(errors) > 0 {
		return CreateModuleRequestMultiError(errors)
	}

	return nil
}

// CreateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleRequestMultiError) AllErrors() []error { return m }

// CreateModuleRequestValidationError is the validation error returned by
// CreateModuleRequest.Validate if the designated constraints aren't met.
type CreateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleRequestValidationError) ErrorName() string {
	return "CreateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleRequestValidationError{}

// Validate checks the field values on CreateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleReplyMultiError, or nil if none found.
func (m *CreateModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateModuleReplyMultiError(errors)
	}

	return nil
}

// CreateModuleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateModuleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleReplyMultiError) AllErrors() []error { return m }

// CreateModuleReplyValidationError is the validation error returned by
// CreateModuleReply.Validate if the designated constraints aren't met.
type CreateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleReplyValidationError) ErrorName() string {
	return "CreateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleReplyValidationError{}

// Validate checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleRequestMultiError, or nil if none found.
func (m *DeleteModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteModuleRequestMultiError(errors)
	}

	return nil
}

// DeleteModuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleRequestMultiError) AllErrors() []error { return m }

// DeleteModuleRequestValidationError is the validation error returned by
// DeleteModuleRequest.Validate if the designated constraints aren't met.
type DeleteModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleRequestValidationError) ErrorName() string {
	return "DeleteModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleRequestValidationError{}

// Validate checks the field values on DeleteModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleReplyMultiError, or nil if none found.
func (m *DeleteModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteModuleReplyMultiError(errors)
	}

	return nil
}

// DeleteModuleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteModuleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleReplyMultiError) AllErrors() []error { return m }

// DeleteModuleReplyValidationError is the validation error returned by
// DeleteModuleReply.Validate if the designated constraints aren't met.
type DeleteModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleReplyValidationError) ErrorName() string {
	return "DeleteModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleReplyValidationError{}

// Validate checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleRequestMultiError, or nil if none found.
func (m *UpdateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := UpdateModuleRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateModuleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alias

	if len(errors) > 0 {
		return UpdateModuleRequestMultiError(errors)
	}

	return nil
}

// UpdateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleRequestMultiError) AllErrors() []error { return m }

// UpdateModuleRequestValidationError is the validation error returned by
// UpdateModuleRequest.Validate if the designated constraints aren't met.
type UpdateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleRequestValidationError) ErrorName() string {
	return "UpdateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleRequestValidationError{}

// Validate checks the field values on UpdateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleReplyMultiError, or nil if none found.
func (m *UpdateModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateModuleReplyMultiError(errors)
	}

	return nil
}

// UpdateModuleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateModuleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleReplyMultiError) AllErrors() []error { return m }

// UpdateModuleReplyValidationError is the validation error returned by
// UpdateModuleReply.Validate if the designated constraints aren't met.
type UpdateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleReplyValidationError) ErrorName() string {
	return "UpdateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleReplyValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Alias

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on GetModuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModuleRequestMultiError, or nil if none found.
func (m *GetModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetModuleRequestMultiError(errors)
	}

	return nil
}

// GetModuleRequestMultiError is an error wrapping multiple validation errors
// returned by GetModuleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleRequestMultiError) AllErrors() []error { return m }

// GetModuleRequestValidationError is the validation error returned by
// GetModuleRequest.Validate if the designated constraints aren't met.
type GetModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleRequestValidationError) ErrorName() string { return "GetModuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleRequestValidationError{}

// Validate checks the field values on GetModuleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetModuleReplyMultiError,
// or nil if none found.
func (m *GetModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModuleReplyValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModuleReplyValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleReplyValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModuleReplyMultiError(errors)
	}

	return nil
}

// GetModuleReplyMultiError is an error wrapping multiple validation errors
// returned by GetModuleReply.ValidateAll() if the designated constraints
// aren't met.
type GetModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleReplyMultiError) AllErrors() []error { return m }

// GetModuleReplyValidationError is the validation error returned by
// GetModuleReply.Validate if the designated constraints aren't met.
type GetModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleReplyValidationError) ErrorName() string { return "GetModuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleReplyValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesRequestMultiError, or nil if none found.
func (m *ListModulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListModulesRequestMultiError(errors)
	}

	return nil
}

// ListModulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListModulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListModulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesRequestMultiError) AllErrors() []error { return m }

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListModulesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesReplyMultiError, or nil if none found.
func (m *ListModulesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModulesReplyValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModulesReplyValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesReplyValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListModulesReplyMultiError(errors)
	}

	return nil
}

// ListModulesReplyMultiError is an error wrapping multiple validation errors
// returned by ListModulesReply.ValidateAll() if the designated constraints
// aren't met.
type ListModulesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesReplyMultiError) AllErrors() []error { return m }

// ListModulesReplyValidationError is the validation error returned by
// ListModulesReply.Validate if the designated constraints aren't met.
type ListModulesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesReplyValidationError) ErrorName() string { return "ListModulesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListModulesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesReplyValidationError{}
