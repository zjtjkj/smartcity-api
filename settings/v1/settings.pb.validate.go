// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/settings/v1/settings.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateEventConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEventConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AutoFinish

	return nil
}

// CreateEventConfigRequestValidationError is the validation error returned by
// CreateEventConfigRequest.Validate if the designated constraints aren't met.
type CreateEventConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventConfigRequestValidationError) ErrorName() string {
	return "CreateEventConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventConfigRequestValidationError{}

// Validate checks the field values on CreateEventConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEventConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateEventConfigReplyValidationError is the validation error returned by
// CreateEventConfigReply.Validate if the designated constraints aren't met.
type CreateEventConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventConfigReplyValidationError) ErrorName() string {
	return "CreateEventConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventConfigReplyValidationError{}

// Validate checks the field values on GetEventConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetEventConfigRequestValidationError is the validation error returned by
// GetEventConfigRequest.Validate if the designated constraints aren't met.
type GetEventConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventConfigRequestValidationError) ErrorName() string {
	return "GetEventConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventConfigRequestValidationError{}

// Validate checks the field values on GetEventConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AutoFinish

	return nil
}

// GetEventConfigReplyValidationError is the validation error returned by
// GetEventConfigReply.Validate if the designated constraints aren't met.
type GetEventConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventConfigReplyValidationError) ErrorName() string {
	return "GetEventConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventConfigReplyValidationError{}

// Validate checks the field values on GetDrawingConfigDemoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDrawingConfigDemoRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDrawingConfigDemoRequestValidationError is the validation error returned
// by GetDrawingConfigDemoRequest.Validate if the designated constraints
// aren't met.
type GetDrawingConfigDemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigDemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigDemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigDemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigDemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigDemoRequestValidationError) ErrorName() string {
	return "GetDrawingConfigDemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigDemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigDemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigDemoRequestValidationError{}

// Validate checks the field values on GetDrawingConfigDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDrawingConfigDemoReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDrawingConfigDemoReplyValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Src

	return nil
}

// GetDrawingConfigDemoReplyValidationError is the validation error returned by
// GetDrawingConfigDemoReply.Validate if the designated constraints aren't met.
type GetDrawingConfigDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigDemoReplyValidationError) ErrorName() string {
	return "GetDrawingConfigDemoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigDemoReplyValidationError{}

// Validate checks the field values on CreatDrawingConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatDrawingConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BorderR

	// no validation rules for BorderG

	// no validation rules for BorderB

	// no validation rules for BorderA

	// no validation rules for LabelR

	// no validation rules for LabelG

	// no validation rules for LabelB

	// no validation rules for LabelA

	// no validation rules for LabelBackgroundR

	// no validation rules for LabelBackgroundG

	// no validation rules for LabelBackgroundB

	// no validation rules for LabelBackgroundA

	// no validation rules for FontSize

	// no validation rules for BorderSize

	// no validation rules for LabelPosition

	return nil
}

// CreatDrawingConfigRequestValidationError is the validation error returned by
// CreatDrawingConfigRequest.Validate if the designated constraints aren't met.
type CreatDrawingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatDrawingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatDrawingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatDrawingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatDrawingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatDrawingConfigRequestValidationError) ErrorName() string {
	return "CreatDrawingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatDrawingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatDrawingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatDrawingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatDrawingConfigRequestValidationError{}

// Validate checks the field values on CreateDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDrawingConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateDrawingConfigReplyValidationError is the validation error returned by
// CreateDrawingConfigReply.Validate if the designated constraints aren't met.
type CreateDrawingConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDrawingConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDrawingConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDrawingConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDrawingConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDrawingConfigReplyValidationError) ErrorName() string {
	return "CreateDrawingConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDrawingConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDrawingConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDrawingConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDrawingConfigReplyValidationError{}

// Validate checks the field values on GetDrawingConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDrawingConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDrawingConfigRequestValidationError is the validation error returned by
// GetDrawingConfigRequest.Validate if the designated constraints aren't met.
type GetDrawingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigRequestValidationError) ErrorName() string {
	return "GetDrawingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigRequestValidationError{}

// Validate checks the field values on GetDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDrawingConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BorderR

	// no validation rules for BorderG

	// no validation rules for BorderB

	// no validation rules for BorderA

	// no validation rules for LabelR

	// no validation rules for LabelG

	// no validation rules for LabelB

	// no validation rules for LabelA

	// no validation rules for LabelBackgroundR

	// no validation rules for LabelBackgroundG

	// no validation rules for LabelBackgroundB

	// no validation rules for LabelBackgroundA

	// no validation rules for FontSize

	// no validation rules for BorderSize

	// no validation rules for LabelPosition

	return nil
}

// GetDrawingConfigReplyValidationError is the validation error returned by
// GetDrawingConfigReply.Validate if the designated constraints aren't met.
type GetDrawingConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigReplyValidationError) ErrorName() string {
	return "GetDrawingConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigReplyValidationError{}

// Validate checks the field values on DeleteDrawingConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDrawingConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteDrawingConfigRequestValidationError is the validation error returned
// by DeleteDrawingConfigRequest.Validate if the designated constraints aren't met.
type DeleteDrawingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDrawingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDrawingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDrawingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDrawingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDrawingConfigRequestValidationError) ErrorName() string {
	return "DeleteDrawingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDrawingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDrawingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDrawingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDrawingConfigRequestValidationError{}

// Validate checks the field values on DeleteDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDrawingConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteDrawingConfigReplyValidationError is the validation error returned by
// DeleteDrawingConfigReply.Validate if the designated constraints aren't met.
type DeleteDrawingConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDrawingConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDrawingConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDrawingConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDrawingConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDrawingConfigReplyValidationError) ErrorName() string {
	return "DeleteDrawingConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDrawingConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDrawingConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDrawingConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDrawingConfigReplyValidationError{}

// Validate checks the field values on ListComputingUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComputingUnitRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListComputingUnitRequestValidationError is the validation error returned by
// ListComputingUnitRequest.Validate if the designated constraints aren't met.
type ListComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputingUnitRequestValidationError) ErrorName() string {
	return "ListComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputingUnitRequestValidationError{}

// Validate checks the field values on ListComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComputingUnitReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComputingUnitReplyValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListComputingUnitReplyValidationError is the validation error returned by
// ListComputingUnitReply.Validate if the designated constraints aren't met.
type ListComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputingUnitReplyValidationError) ErrorName() string {
	return "ListComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputingUnitReplyValidationError{}

// Validate checks the field values on DeleteComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteComputingUnitRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteComputingUnitRequestValidationError is the validation error returned
// by DeleteComputingUnitRequest.Validate if the designated constraints aren't met.
type DeleteComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComputingUnitRequestValidationError) ErrorName() string {
	return "DeleteComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComputingUnitRequestValidationError{}

// Validate checks the field values on DeleteComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteComputingUnitReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteComputingUnitReplyValidationError is the validation error returned by
// DeleteComputingUnitReply.Validate if the designated constraints aren't met.
type DeleteComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComputingUnitReplyValidationError) ErrorName() string {
	return "DeleteComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComputingUnitReplyValidationError{}

// Validate checks the field values on UpdateComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateComputingUnitRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Enable

	return nil
}

// UpdateComputingUnitRequestValidationError is the validation error returned
// by UpdateComputingUnitRequest.Validate if the designated constraints aren't met.
type UpdateComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComputingUnitRequestValidationError) ErrorName() string {
	return "UpdateComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComputingUnitRequestValidationError{}

// Validate checks the field values on UpdateComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateComputingUnitReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateComputingUnitReplyValidationError is the validation error returned by
// UpdateComputingUnitReply.Validate if the designated constraints aren't met.
type UpdateComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComputingUnitReplyValidationError) ErrorName() string {
	return "UpdateComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComputingUnitReplyValidationError{}

// Validate checks the field values on CreateComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateComputingUnitRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Enable

	return nil
}

// CreateComputingUnitRequestValidationError is the validation error returned
// by CreateComputingUnitRequest.Validate if the designated constraints aren't met.
type CreateComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComputingUnitRequestValidationError) ErrorName() string {
	return "CreateComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComputingUnitRequestValidationError{}

// Validate checks the field values on CreateComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateComputingUnitReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateComputingUnitReplyValidationError is the validation error returned by
// CreateComputingUnitReply.Validate if the designated constraints aren't met.
type CreateComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComputingUnitReplyValidationError) ErrorName() string {
	return "CreateComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComputingUnitReplyValidationError{}

// Validate checks the field values on CreatePusherConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePusherConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PushStart

	// no validation rules for PushChain

	// no validation rules for PushEnd

	// no validation rules for PushSingle

	return nil
}

// CreatePusherConfigRequestValidationError is the validation error returned by
// CreatePusherConfigRequest.Validate if the designated constraints aren't met.
type CreatePusherConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePusherConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePusherConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePusherConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePusherConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePusherConfigRequestValidationError) ErrorName() string {
	return "CreatePusherConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePusherConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePusherConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePusherConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePusherConfigRequestValidationError{}

// Validate checks the field values on CreatePusherConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePusherConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreatePusherConfigReplyValidationError is the validation error returned by
// CreatePusherConfigReply.Validate if the designated constraints aren't met.
type CreatePusherConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePusherConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePusherConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePusherConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePusherConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePusherConfigReplyValidationError) ErrorName() string {
	return "CreatePusherConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePusherConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePusherConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePusherConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePusherConfigReplyValidationError{}

// Validate checks the field values on GetPusherConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPusherConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPusherConfigRequestValidationError is the validation error returned by
// GetPusherConfigRequest.Validate if the designated constraints aren't met.
type GetPusherConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPusherConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPusherConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPusherConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPusherConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPusherConfigRequestValidationError) ErrorName() string {
	return "GetPusherConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPusherConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPusherConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPusherConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPusherConfigRequestValidationError{}

// Validate checks the field values on GetPusherConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPusherConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PushStart

	// no validation rules for PushChain

	// no validation rules for PushEnd

	// no validation rules for PushSingle

	return nil
}

// GetPusherConfigReplyValidationError is the validation error returned by
// GetPusherConfigReply.Validate if the designated constraints aren't met.
type GetPusherConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPusherConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPusherConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPusherConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPusherConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPusherConfigReplyValidationError) ErrorName() string {
	return "GetPusherConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPusherConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPusherConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPusherConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPusherConfigReplyValidationError{}

// Validate checks the field values on GetOperatorConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOperatorConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOperatorConfigRequestValidationError is the validation error returned by
// GetOperatorConfigRequest.Validate if the designated constraints aren't met.
type GetOperatorConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorConfigRequestValidationError) ErrorName() string {
	return "GetOperatorConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorConfigRequestValidationError{}

// Validate checks the field values on GetOperatorConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOperatorConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOperatorConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorConfigReplyValidationError{
				field:  "OperatorConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOperatorConfigReplyValidationError is the validation error returned by
// GetOperatorConfigReply.Validate if the designated constraints aren't met.
type GetOperatorConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorConfigReplyValidationError) ErrorName() string {
	return "GetOperatorConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorConfigReplyValidationError{}

// Validate checks the field values on CreateOperatorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOperatorConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FullChannelBlock

	return nil
}

// CreateOperatorConfigRequestValidationError is the validation error returned
// by CreateOperatorConfigRequest.Validate if the designated constraints
// aren't met.
type CreateOperatorConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorConfigRequestValidationError) ErrorName() string {
	return "CreateOperatorConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorConfigRequestValidationError{}

// Validate checks the field values on CreateOperatorConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOperatorConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateOperatorConfigReplyValidationError is the validation error returned by
// CreateOperatorConfigReply.Validate if the designated constraints aren't met.
type CreateOperatorConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorConfigReplyValidationError) ErrorName() string {
	return "CreateOperatorConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorConfigReplyValidationError{}

// Validate checks the field values on GetMapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMapConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMapConfigRequestValidationError is the validation error returned by
// GetMapConfigRequest.Validate if the designated constraints aren't met.
type GetMapConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMapConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMapConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMapConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMapConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMapConfigRequestValidationError) ErrorName() string {
	return "GetMapConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMapConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMapConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMapConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMapConfigRequestValidationError{}

// Validate checks the field values on GetMapConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMapConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Zoom

	return nil
}

// GetMapConfigReplyValidationError is the validation error returned by
// GetMapConfigReply.Validate if the designated constraints aren't met.
type GetMapConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMapConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMapConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMapConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMapConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMapConfigReplyValidationError) ErrorName() string {
	return "GetMapConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMapConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMapConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMapConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMapConfigReplyValidationError{}

// Validate checks the field values on CreateMapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMapConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Zoom

	return nil
}

// CreateMapConfigRequestValidationError is the validation error returned by
// CreateMapConfigRequest.Validate if the designated constraints aren't met.
type CreateMapConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMapConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMapConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMapConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMapConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMapConfigRequestValidationError) ErrorName() string {
	return "CreateMapConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMapConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMapConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMapConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMapConfigRequestValidationError{}

// Validate checks the field values on CreateMapConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMapConfigReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateMapConfigReplyValidationError is the validation error returned by
// CreateMapConfigReply.Validate if the designated constraints aren't met.
type CreateMapConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMapConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMapConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMapConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMapConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMapConfigReplyValidationError) ErrorName() string {
	return "CreateMapConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMapConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMapConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMapConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMapConfigReplyValidationError{}

// Validate checks the field values on DeleteSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSystemInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteSystemInfoRequestValidationError is the validation error returned by
// DeleteSystemInfoRequest.Validate if the designated constraints aren't met.
type DeleteSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemInfoRequestValidationError) ErrorName() string {
	return "DeleteSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemInfoRequestValidationError{}

// Validate checks the field values on DeleteSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSystemInfoReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteSystemInfoReplyValidationError is the validation error returned by
// DeleteSystemInfoReply.Validate if the designated constraints aren't met.
type DeleteSystemInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemInfoReplyValidationError) ErrorName() string {
	return "DeleteSystemInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSystemInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemInfoReplyValidationError{}

// Validate checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSystemInfoRequestValidationError is the validation error returned by
// GetSystemInfoRequest.Validate if the designated constraints aren't met.
type GetSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRequestValidationError) ErrorName() string {
	return "GetSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRequestValidationError{}

// Validate checks the field values on GetSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemInfoReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Icon

	return nil
}

// GetSystemInfoReplyValidationError is the validation error returned by
// GetSystemInfoReply.Validate if the designated constraints aren't met.
type GetSystemInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoReplyValidationError) ErrorName() string {
	return "GetSystemInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoReplyValidationError{}

// Validate checks the field values on CreateSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSystemInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Icon

	return nil
}

// CreateSystemInfoRequestValidationError is the validation error returned by
// CreateSystemInfoRequest.Validate if the designated constraints aren't met.
type CreateSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemInfoRequestValidationError) ErrorName() string {
	return "CreateSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemInfoRequestValidationError{}

// Validate checks the field values on CreateSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSystemInfoReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateSystemInfoReplyValidationError is the validation error returned by
// CreateSystemInfoReply.Validate if the designated constraints aren't met.
type CreateSystemInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemInfoReplyValidationError) ErrorName() string {
	return "CreateSystemInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemInfoReplyValidationError{}

// Validate checks the field values on GeneralParameters with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GeneralParameters) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeneralParametersValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	return nil
}

// GeneralParametersValidationError is the validation error returned by
// GeneralParameters.Validate if the designated constraints aren't met.
type GeneralParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneralParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneralParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneralParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneralParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneralParametersValidationError) ErrorName() string {
	return "GeneralParametersValidationError"
}

// Error satisfies the builtin error interface
func (e GeneralParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneralParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneralParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneralParametersValidationError{}

// Validate checks the field values on ListGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGeneralParametersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListGeneralParametersRequestValidationError is the validation error returned
// by ListGeneralParametersRequest.Validate if the designated constraints
// aren't met.
type ListGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneralParametersRequestValidationError) ErrorName() string {
	return "ListGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneralParametersRequestValidationError{}

// Validate checks the field values on ListGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGeneralParametersReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGeneralParametersReplyValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGeneralParametersReplyValidationError is the validation error returned
// by ListGeneralParametersReply.Validate if the designated constraints aren't met.
type ListGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneralParametersReplyValidationError) ErrorName() string {
	return "ListGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneralParametersReplyValidationError{}

// Validate checks the field values on DeleteGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGeneralParametersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteGeneralParametersRequestValidationError is the validation error
// returned by DeleteGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type DeleteGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGeneralParametersRequestValidationError) ErrorName() string {
	return "DeleteGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGeneralParametersRequestValidationError{}

// Validate checks the field values on DeleteGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGeneralParametersReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteGeneralParametersReplyValidationError is the validation error returned
// by DeleteGeneralParametersReply.Validate if the designated constraints
// aren't met.
type DeleteGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGeneralParametersReplyValidationError) ErrorName() string {
	return "DeleteGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGeneralParametersReplyValidationError{}

// Validate checks the field values on UpdateGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGeneralParametersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	return nil
}

// UpdateGeneralParametersRequestValidationError is the validation error
// returned by UpdateGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type UpdateGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGeneralParametersRequestValidationError) ErrorName() string {
	return "UpdateGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGeneralParametersRequestValidationError{}

// Validate checks the field values on UpdateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGeneralParametersReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGeneralParametersReplyValidationError is the validation error returned
// by UpdateGeneralParametersReply.Validate if the designated constraints
// aren't met.
type UpdateGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGeneralParametersReplyValidationError) ErrorName() string {
	return "UpdateGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGeneralParametersReplyValidationError{}

// Validate checks the field values on CreateGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGeneralParametersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	return nil
}

// CreateGeneralParametersRequestValidationError is the validation error
// returned by CreateGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type CreateGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGeneralParametersRequestValidationError) ErrorName() string {
	return "CreateGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGeneralParametersRequestValidationError{}

// Validate checks the field values on CreateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGeneralParametersReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateGeneralParametersReplyValidationError is the validation error returned
// by CreateGeneralParametersReply.Validate if the designated constraints
// aren't met.
type CreateGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGeneralParametersReplyValidationError) ErrorName() string {
	return "CreateGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGeneralParametersReplyValidationError{}

// Validate checks the field values on CreateCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCameraAttrRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Src

	return nil
}

// CreateCameraAttrRequestValidationError is the validation error returned by
// CreateCameraAttrRequest.Validate if the designated constraints aren't met.
type CreateCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraAttrRequestValidationError) ErrorName() string {
	return "CreateCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraAttrRequestValidationError{}

// Validate checks the field values on CreateCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCameraAttrReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateCameraAttrReplyValidationError is the validation error returned by
// CreateCameraAttrReply.Validate if the designated constraints aren't met.
type CreateCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraAttrReplyValidationError) ErrorName() string {
	return "CreateCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraAttrReplyValidationError{}

// Validate checks the field values on DeleteCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCameraAttrRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteCameraAttrRequestValidationError is the validation error returned by
// DeleteCameraAttrRequest.Validate if the designated constraints aren't met.
type DeleteCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraAttrRequestValidationError) ErrorName() string {
	return "DeleteCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraAttrRequestValidationError{}

// Validate checks the field values on DeleteCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCameraAttrReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteCameraAttrReplyValidationError is the validation error returned by
// DeleteCameraAttrReply.Validate if the designated constraints aren't met.
type DeleteCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraAttrReplyValidationError) ErrorName() string {
	return "DeleteCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraAttrReplyValidationError{}

// Validate checks the field values on GetCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCameraAttrRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetCameraAttrRequestValidationError is the validation error returned by
// GetCameraAttrRequest.Validate if the designated constraints aren't met.
type GetCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraAttrRequestValidationError) ErrorName() string {
	return "GetCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraAttrRequestValidationError{}

// Validate checks the field values on CameraAttr with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CameraAttr) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CameraAttrValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Image

	return nil
}

// CameraAttrValidationError is the validation error returned by
// CameraAttr.Validate if the designated constraints aren't met.
type CameraAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraAttrValidationError) ErrorName() string { return "CameraAttrValidationError" }

// Error satisfies the builtin error interface
func (e CameraAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraAttrValidationError{}

// Validate checks the field values on GetCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCameraAttrReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAttr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCameraAttrReplyValidationError{
				field:  "Attr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCameraAttrReplyValidationError is the validation error returned by
// GetCameraAttrReply.Validate if the designated constraints aren't met.
type GetCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraAttrReplyValidationError) ErrorName() string {
	return "GetCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraAttrReplyValidationError{}

// Validate checks the field values on ListCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCameraAttrRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListCameraAttrRequestValidationError is the validation error returned by
// ListCameraAttrRequest.Validate if the designated constraints aren't met.
type ListCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraAttrRequestValidationError) ErrorName() string {
	return "ListCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraAttrRequestValidationError{}

// Validate checks the field values on ListCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCameraAttrReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCameraAttrReplyValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCameraAttrReplyValidationError is the validation error returned by
// ListCameraAttrReply.Validate if the designated constraints aren't met.
type ListCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraAttrReplyValidationError) ErrorName() string {
	return "ListCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraAttrReplyValidationError{}

// Validate checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateModuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Alias

	return nil
}

// CreateModuleRequestValidationError is the validation error returned by
// CreateModuleRequest.Validate if the designated constraints aren't met.
type CreateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleRequestValidationError) ErrorName() string {
	return "CreateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleRequestValidationError{}

// Validate checks the field values on CreateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateModuleReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateModuleReplyValidationError is the validation error returned by
// CreateModuleReply.Validate if the designated constraints aren't met.
type CreateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleReplyValidationError) ErrorName() string {
	return "CreateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleReplyValidationError{}

// Validate checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteModuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteModuleRequestValidationError is the validation error returned by
// DeleteModuleRequest.Validate if the designated constraints aren't met.
type DeleteModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleRequestValidationError) ErrorName() string {
	return "DeleteModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleRequestValidationError{}

// Validate checks the field values on DeleteModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteModuleReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteModuleReplyValidationError is the validation error returned by
// DeleteModuleReply.Validate if the designated constraints aren't met.
type DeleteModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleReplyValidationError) ErrorName() string {
	return "DeleteModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleReplyValidationError{}

// Validate checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateModuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Alias

	return nil
}

// UpdateModuleRequestValidationError is the validation error returned by
// UpdateModuleRequest.Validate if the designated constraints aren't met.
type UpdateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleRequestValidationError) ErrorName() string {
	return "UpdateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleRequestValidationError{}

// Validate checks the field values on UpdateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateModuleReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateModuleReplyValidationError is the validation error returned by
// UpdateModuleReply.Validate if the designated constraints aren't met.
type UpdateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleReplyValidationError) ErrorName() string {
	return "UpdateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleReplyValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Module) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Alias

	return nil
}

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on GetModuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetModuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetModuleRequestValidationError is the validation error returned by
// GetModuleRequest.Validate if the designated constraints aren't met.
type GetModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleRequestValidationError) ErrorName() string { return "GetModuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleRequestValidationError{}

// Validate checks the field values on GetModuleReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetModuleReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleReplyValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetModuleReplyValidationError is the validation error returned by
// GetModuleReply.Validate if the designated constraints aren't met.
type GetModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleReplyValidationError) ErrorName() string { return "GetModuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleReplyValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListModulesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListModulesReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesReplyValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListModulesReplyValidationError is the validation error returned by
// ListModulesReply.Validate if the designated constraints aren't met.
type ListModulesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesReplyValidationError) ErrorName() string { return "ListModulesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListModulesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesReplyValidationError{}

// Validate checks the field values on GetDrawingConfigDemoReply_Object with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDrawingConfigDemoReply_Object) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Label

	// no validation rules for Point1X

	// no validation rules for Point1Y

	// no validation rules for Point2X

	// no validation rules for Point2Y

	return nil
}

// GetDrawingConfigDemoReply_ObjectValidationError is the validation error
// returned by GetDrawingConfigDemoReply_Object.Validate if the designated
// constraints aren't met.
type GetDrawingConfigDemoReply_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigDemoReply_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigDemoReply_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigDemoReply_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigDemoReply_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigDemoReply_ObjectValidationError) ErrorName() string {
	return "GetDrawingConfigDemoReply_ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigDemoReply_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigDemoReply_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigDemoReply_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigDemoReply_ObjectValidationError{}

// Validate checks the field values on ListComputingUnitReply_ComputingUnit
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListComputingUnitReply_ComputingUnit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListComputingUnitReply_ComputingUnitValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Enable

	return nil
}

// ListComputingUnitReply_ComputingUnitValidationError is the validation error
// returned by ListComputingUnitReply_ComputingUnit.Validate if the designated
// constraints aren't met.
type ListComputingUnitReply_ComputingUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputingUnitReply_ComputingUnitValidationError) ErrorName() string {
	return "ListComputingUnitReply_ComputingUnitValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputingUnitReply_ComputingUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputingUnitReply_ComputingUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputingUnitReply_ComputingUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputingUnitReply_ComputingUnitValidationError{}

// Validate checks the field values on GetOperatorConfigReply_OperatorConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetOperatorConfigReply_OperatorConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FullChannelBlock

	return nil
}

// GetOperatorConfigReply_OperatorConfigValidationError is the validation error
// returned by GetOperatorConfigReply_OperatorConfig.Validate if the
// designated constraints aren't met.
type GetOperatorConfigReply_OperatorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorConfigReply_OperatorConfigValidationError) ErrorName() string {
	return "GetOperatorConfigReply_OperatorConfigValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorConfigReply_OperatorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorConfigReply_OperatorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorConfigReply_OperatorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorConfigReply_OperatorConfigValidationError{}
