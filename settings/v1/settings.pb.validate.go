// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings/v1/settings.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatDrawingConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatDrawingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatDrawingConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatDrawingConfigRequestMultiError, or nil if none found.
func (m *CreatDrawingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatDrawingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BorderR

	// no validation rules for BorderG

	// no validation rules for BorderB

	// no validation rules for BorderA

	// no validation rules for LabelR

	// no validation rules for LabelG

	// no validation rules for LabelB

	// no validation rules for LabelA

	// no validation rules for LabelBackgroundR

	// no validation rules for LabelBackgroundG

	// no validation rules for LabelBackgroundB

	// no validation rules for LabelBackgroundA

	// no validation rules for FontSize

	// no validation rules for BorderSize

	// no validation rules for LabelPosition

	if len(errors) > 0 {
		return CreatDrawingConfigRequestMultiError(errors)
	}

	return nil
}

// CreatDrawingConfigRequestMultiError is an error wrapping multiple validation
// errors returned by CreatDrawingConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatDrawingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatDrawingConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatDrawingConfigRequestMultiError) AllErrors() []error { return m }

// CreatDrawingConfigRequestValidationError is the validation error returned by
// CreatDrawingConfigRequest.Validate if the designated constraints aren't met.
type CreatDrawingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatDrawingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatDrawingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatDrawingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatDrawingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatDrawingConfigRequestValidationError) ErrorName() string {
	return "CreatDrawingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatDrawingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatDrawingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatDrawingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatDrawingConfigRequestValidationError{}

// Validate checks the field values on CreateDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDrawingConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDrawingConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDrawingConfigReplyMultiError, or nil if none found.
func (m *CreateDrawingConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDrawingConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDrawingConfigReplyMultiError(errors)
	}

	return nil
}

// CreateDrawingConfigReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDrawingConfigReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDrawingConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDrawingConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDrawingConfigReplyMultiError) AllErrors() []error { return m }

// CreateDrawingConfigReplyValidationError is the validation error returned by
// CreateDrawingConfigReply.Validate if the designated constraints aren't met.
type CreateDrawingConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDrawingConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDrawingConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDrawingConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDrawingConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDrawingConfigReplyValidationError) ErrorName() string {
	return "CreateDrawingConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDrawingConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDrawingConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDrawingConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDrawingConfigReplyValidationError{}

// Validate checks the field values on GetDrawingConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDrawingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDrawingConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDrawingConfigRequestMultiError, or nil if none found.
func (m *GetDrawingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDrawingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDrawingConfigRequestMultiError(errors)
	}

	return nil
}

// GetDrawingConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetDrawingConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDrawingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDrawingConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDrawingConfigRequestMultiError) AllErrors() []error { return m }

// GetDrawingConfigRequestValidationError is the validation error returned by
// GetDrawingConfigRequest.Validate if the designated constraints aren't met.
type GetDrawingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigRequestValidationError) ErrorName() string {
	return "GetDrawingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigRequestValidationError{}

// Validate checks the field values on GetDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDrawingConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDrawingConfigReplyMultiError, or nil if none found.
func (m *GetDrawingConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDrawingConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BorderR

	// no validation rules for BorderG

	// no validation rules for BorderB

	// no validation rules for BorderA

	// no validation rules for LabelR

	// no validation rules for LabelG

	// no validation rules for LabelB

	// no validation rules for LabelA

	// no validation rules for LabelBackgroundR

	// no validation rules for LabelBackgroundG

	// no validation rules for LabelBackgroundB

	// no validation rules for BabelBackgroundA

	// no validation rules for FontSize

	// no validation rules for BorderSize

	// no validation rules for LabelPosition

	if len(errors) > 0 {
		return GetDrawingConfigReplyMultiError(errors)
	}

	return nil
}

// GetDrawingConfigReplyMultiError is an error wrapping multiple validation
// errors returned by GetDrawingConfigReply.ValidateAll() if the designated
// constraints aren't met.
type GetDrawingConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDrawingConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDrawingConfigReplyMultiError) AllErrors() []error { return m }

// GetDrawingConfigReplyValidationError is the validation error returned by
// GetDrawingConfigReply.Validate if the designated constraints aren't met.
type GetDrawingConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrawingConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrawingConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrawingConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrawingConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrawingConfigReplyValidationError) ErrorName() string {
	return "GetDrawingConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDrawingConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrawingConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrawingConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrawingConfigReplyValidationError{}

// Validate checks the field values on DeleteDrawingConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDrawingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDrawingConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDrawingConfigRequestMultiError, or nil if none found.
func (m *DeleteDrawingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDrawingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDrawingConfigRequestMultiError(errors)
	}

	return nil
}

// DeleteDrawingConfigRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDrawingConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDrawingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDrawingConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDrawingConfigRequestMultiError) AllErrors() []error { return m }

// DeleteDrawingConfigRequestValidationError is the validation error returned
// by DeleteDrawingConfigRequest.Validate if the designated constraints aren't met.
type DeleteDrawingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDrawingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDrawingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDrawingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDrawingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDrawingConfigRequestValidationError) ErrorName() string {
	return "DeleteDrawingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDrawingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDrawingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDrawingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDrawingConfigRequestValidationError{}

// Validate checks the field values on DeleteDrawingConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDrawingConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDrawingConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDrawingConfigReplyMultiError, or nil if none found.
func (m *DeleteDrawingConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDrawingConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDrawingConfigReplyMultiError(errors)
	}

	return nil
}

// DeleteDrawingConfigReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDrawingConfigReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDrawingConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDrawingConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDrawingConfigReplyMultiError) AllErrors() []error { return m }

// DeleteDrawingConfigReplyValidationError is the validation error returned by
// DeleteDrawingConfigReply.Validate if the designated constraints aren't met.
type DeleteDrawingConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDrawingConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDrawingConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDrawingConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDrawingConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDrawingConfigReplyValidationError) ErrorName() string {
	return "DeleteDrawingConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDrawingConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDrawingConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDrawingConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDrawingConfigReplyValidationError{}

// Validate checks the field values on ListComputingUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComputingUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComputingUnitRequestMultiError, or nil if none found.
func (m *ListComputingUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComputingUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListComputingUnitRequestMultiError(errors)
	}

	return nil
}

// ListComputingUnitRequestMultiError is an error wrapping multiple validation
// errors returned by ListComputingUnitRequest.ValidateAll() if the designated
// constraints aren't met.
type ListComputingUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComputingUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComputingUnitRequestMultiError) AllErrors() []error { return m }

// ListComputingUnitRequestValidationError is the validation error returned by
// ListComputingUnitRequest.Validate if the designated constraints aren't met.
type ListComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputingUnitRequestValidationError) ErrorName() string {
	return "ListComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputingUnitRequestValidationError{}

// Validate checks the field values on ListComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComputingUnitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComputingUnitReplyMultiError, or nil if none found.
func (m *ListComputingUnitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComputingUnitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListComputingUnitReplyValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListComputingUnitReplyValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComputingUnitReplyValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListComputingUnitReplyMultiError(errors)
	}

	return nil
}

// ListComputingUnitReplyMultiError is an error wrapping multiple validation
// errors returned by ListComputingUnitReply.ValidateAll() if the designated
// constraints aren't met.
type ListComputingUnitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComputingUnitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComputingUnitReplyMultiError) AllErrors() []error { return m }

// ListComputingUnitReplyValidationError is the validation error returned by
// ListComputingUnitReply.Validate if the designated constraints aren't met.
type ListComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputingUnitReplyValidationError) ErrorName() string {
	return "ListComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputingUnitReplyValidationError{}

// Validate checks the field values on DeleteComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteComputingUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteComputingUnitRequestMultiError, or nil if none found.
func (m *DeleteComputingUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteComputingUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteComputingUnitRequestMultiError(errors)
	}

	return nil
}

// DeleteComputingUnitRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteComputingUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteComputingUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteComputingUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteComputingUnitRequestMultiError) AllErrors() []error { return m }

// DeleteComputingUnitRequestValidationError is the validation error returned
// by DeleteComputingUnitRequest.Validate if the designated constraints aren't met.
type DeleteComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComputingUnitRequestValidationError) ErrorName() string {
	return "DeleteComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComputingUnitRequestValidationError{}

// Validate checks the field values on DeleteComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteComputingUnitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteComputingUnitReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteComputingUnitReplyMultiError, or nil if none found.
func (m *DeleteComputingUnitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteComputingUnitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteComputingUnitReplyMultiError(errors)
	}

	return nil
}

// DeleteComputingUnitReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteComputingUnitReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteComputingUnitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteComputingUnitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteComputingUnitReplyMultiError) AllErrors() []error { return m }

// DeleteComputingUnitReplyValidationError is the validation error returned by
// DeleteComputingUnitReply.Validate if the designated constraints aren't met.
type DeleteComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComputingUnitReplyValidationError) ErrorName() string {
	return "DeleteComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComputingUnitReplyValidationError{}

// Validate checks the field values on UpdateComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateComputingUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateComputingUnitRequestMultiError, or nil if none found.
func (m *UpdateComputingUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateComputingUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateComputingUnitRequestMultiError(errors)
	}

	return nil
}

// UpdateComputingUnitRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateComputingUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateComputingUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateComputingUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateComputingUnitRequestMultiError) AllErrors() []error { return m }

// UpdateComputingUnitRequestValidationError is the validation error returned
// by UpdateComputingUnitRequest.Validate if the designated constraints aren't met.
type UpdateComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComputingUnitRequestValidationError) ErrorName() string {
	return "UpdateComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComputingUnitRequestValidationError{}

// Validate checks the field values on UpdateComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateComputingUnitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateComputingUnitReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateComputingUnitReplyMultiError, or nil if none found.
func (m *UpdateComputingUnitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateComputingUnitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateComputingUnitReplyMultiError(errors)
	}

	return nil
}

// UpdateComputingUnitReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateComputingUnitReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateComputingUnitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateComputingUnitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateComputingUnitReplyMultiError) AllErrors() []error { return m }

// UpdateComputingUnitReplyValidationError is the validation error returned by
// UpdateComputingUnitReply.Validate if the designated constraints aren't met.
type UpdateComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComputingUnitReplyValidationError) ErrorName() string {
	return "UpdateComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComputingUnitReplyValidationError{}

// Validate checks the field values on CreateComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateComputingUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateComputingUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateComputingUnitRequestMultiError, or nil if none found.
func (m *CreateComputingUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateComputingUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Enable

	if len(errors) > 0 {
		return CreateComputingUnitRequestMultiError(errors)
	}

	return nil
}

// CreateComputingUnitRequestMultiError is an error wrapping multiple
// validation errors returned by CreateComputingUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateComputingUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateComputingUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateComputingUnitRequestMultiError) AllErrors() []error { return m }

// CreateComputingUnitRequestValidationError is the validation error returned
// by CreateComputingUnitRequest.Validate if the designated constraints aren't met.
type CreateComputingUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComputingUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComputingUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComputingUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComputingUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComputingUnitRequestValidationError) ErrorName() string {
	return "CreateComputingUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComputingUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComputingUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComputingUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComputingUnitRequestValidationError{}

// Validate checks the field values on CreateComputingUnitReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateComputingUnitReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateComputingUnitReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateComputingUnitReplyMultiError, or nil if none found.
func (m *CreateComputingUnitReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateComputingUnitReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateComputingUnitReplyMultiError(errors)
	}

	return nil
}

// CreateComputingUnitReplyMultiError is an error wrapping multiple validation
// errors returned by CreateComputingUnitReply.ValidateAll() if the designated
// constraints aren't met.
type CreateComputingUnitReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateComputingUnitReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateComputingUnitReplyMultiError) AllErrors() []error { return m }

// CreateComputingUnitReplyValidationError is the validation error returned by
// CreateComputingUnitReply.Validate if the designated constraints aren't met.
type CreateComputingUnitReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComputingUnitReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComputingUnitReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComputingUnitReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComputingUnitReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComputingUnitReplyValidationError) ErrorName() string {
	return "CreateComputingUnitReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComputingUnitReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComputingUnitReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComputingUnitReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComputingUnitReplyValidationError{}

// Validate checks the field values on CreatePusherConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePusherConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePusherConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePusherConfigRequestMultiError, or nil if none found.
func (m *CreatePusherConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePusherConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PushStart

	// no validation rules for PushChain

	// no validation rules for PushEnd

	// no validation rules for PushSingle

	if len(errors) > 0 {
		return CreatePusherConfigRequestMultiError(errors)
	}

	return nil
}

// CreatePusherConfigRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePusherConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePusherConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePusherConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePusherConfigRequestMultiError) AllErrors() []error { return m }

// CreatePusherConfigRequestValidationError is the validation error returned by
// CreatePusherConfigRequest.Validate if the designated constraints aren't met.
type CreatePusherConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePusherConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePusherConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePusherConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePusherConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePusherConfigRequestValidationError) ErrorName() string {
	return "CreatePusherConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePusherConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePusherConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePusherConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePusherConfigRequestValidationError{}

// Validate checks the field values on CreatePusherConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePusherConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePusherConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePusherConfigReplyMultiError, or nil if none found.
func (m *CreatePusherConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePusherConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePusherConfigReplyMultiError(errors)
	}

	return nil
}

// CreatePusherConfigReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePusherConfigReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePusherConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePusherConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePusherConfigReplyMultiError) AllErrors() []error { return m }

// CreatePusherConfigReplyValidationError is the validation error returned by
// CreatePusherConfigReply.Validate if the designated constraints aren't met.
type CreatePusherConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePusherConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePusherConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePusherConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePusherConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePusherConfigReplyValidationError) ErrorName() string {
	return "CreatePusherConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePusherConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePusherConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePusherConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePusherConfigReplyValidationError{}

// Validate checks the field values on GetPusherConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPusherConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPusherConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPusherConfigRequestMultiError, or nil if none found.
func (m *GetPusherConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPusherConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPusherConfigRequestMultiError(errors)
	}

	return nil
}

// GetPusherConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetPusherConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPusherConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPusherConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPusherConfigRequestMultiError) AllErrors() []error { return m }

// GetPusherConfigRequestValidationError is the validation error returned by
// GetPusherConfigRequest.Validate if the designated constraints aren't met.
type GetPusherConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPusherConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPusherConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPusherConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPusherConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPusherConfigRequestValidationError) ErrorName() string {
	return "GetPusherConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPusherConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPusherConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPusherConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPusherConfigRequestValidationError{}

// Validate checks the field values on GetPusherConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPusherConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPusherConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPusherConfigReplyMultiError, or nil if none found.
func (m *GetPusherConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPusherConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PushStart

	// no validation rules for PushChain

	// no validation rules for PushEnd

	// no validation rules for PushSingle

	if len(errors) > 0 {
		return GetPusherConfigReplyMultiError(errors)
	}

	return nil
}

// GetPusherConfigReplyMultiError is an error wrapping multiple validation
// errors returned by GetPusherConfigReply.ValidateAll() if the designated
// constraints aren't met.
type GetPusherConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPusherConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPusherConfigReplyMultiError) AllErrors() []error { return m }

// GetPusherConfigReplyValidationError is the validation error returned by
// GetPusherConfigReply.Validate if the designated constraints aren't met.
type GetPusherConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPusherConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPusherConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPusherConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPusherConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPusherConfigReplyValidationError) ErrorName() string {
	return "GetPusherConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPusherConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPusherConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPusherConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPusherConfigReplyValidationError{}

// Validate checks the field values on GetOperatorConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorConfigRequestMultiError, or nil if none found.
func (m *GetOperatorConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorConfigRequestValidationError is the validation error returned by
// GetOperatorConfigRequest.Validate if the designated constraints aren't met.
type GetOperatorConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorConfigRequestValidationError) ErrorName() string {
	return "GetOperatorConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorConfigRequestValidationError{}

// Validate checks the field values on GetOperatorConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorConfigReplyMultiError, or nil if none found.
func (m *GetOperatorConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorConfigReplyValidationError{
					field:  "OperatorConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorConfigReplyValidationError{
					field:  "OperatorConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorConfigReplyValidationError{
				field:  "OperatorConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorConfigReplyMultiError(errors)
	}

	return nil
}

// GetOperatorConfigReplyMultiError is an error wrapping multiple validation
// errors returned by GetOperatorConfigReply.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorConfigReplyMultiError) AllErrors() []error { return m }

// GetOperatorConfigReplyValidationError is the validation error returned by
// GetOperatorConfigReply.Validate if the designated constraints aren't met.
type GetOperatorConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorConfigReplyValidationError) ErrorName() string {
	return "GetOperatorConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorConfigReplyValidationError{}

// Validate checks the field values on CreateOperatorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorConfigRequestMultiError, or nil if none found.
func (m *CreateOperatorConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FullChannelBlock

	if len(errors) > 0 {
		return CreateOperatorConfigRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorConfigRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOperatorConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOperatorConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorConfigRequestMultiError) AllErrors() []error { return m }

// CreateOperatorConfigRequestValidationError is the validation error returned
// by CreateOperatorConfigRequest.Validate if the designated constraints
// aren't met.
type CreateOperatorConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorConfigRequestValidationError) ErrorName() string {
	return "CreateOperatorConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorConfigRequestValidationError{}

// Validate checks the field values on CreateOperatorConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorConfigReplyMultiError, or nil if none found.
func (m *CreateOperatorConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOperatorConfigReplyMultiError(errors)
	}

	return nil
}

// CreateOperatorConfigReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorConfigReply.ValidateAll() if the
// designated constraints aren't met.
type CreateOperatorConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorConfigReplyMultiError) AllErrors() []error { return m }

// CreateOperatorConfigReplyValidationError is the validation error returned by
// CreateOperatorConfigReply.Validate if the designated constraints aren't met.
type CreateOperatorConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorConfigReplyValidationError) ErrorName() string {
	return "CreateOperatorConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorConfigReplyValidationError{}

// Validate checks the field values on GetMapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMapConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMapConfigRequestMultiError, or nil if none found.
func (m *GetMapConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMapConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMapConfigRequestMultiError(errors)
	}

	return nil
}

// GetMapConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetMapConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMapConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMapConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMapConfigRequestMultiError) AllErrors() []error { return m }

// GetMapConfigRequestValidationError is the validation error returned by
// GetMapConfigRequest.Validate if the designated constraints aren't met.
type GetMapConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMapConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMapConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMapConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMapConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMapConfigRequestValidationError) ErrorName() string {
	return "GetMapConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMapConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMapConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMapConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMapConfigRequestValidationError{}

// Validate checks the field values on GetMapConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMapConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMapConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMapConfigReplyMultiError, or nil if none found.
func (m *GetMapConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMapConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Zoom

	if len(errors) > 0 {
		return GetMapConfigReplyMultiError(errors)
	}

	return nil
}

// GetMapConfigReplyMultiError is an error wrapping multiple validation errors
// returned by GetMapConfigReply.ValidateAll() if the designated constraints
// aren't met.
type GetMapConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMapConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMapConfigReplyMultiError) AllErrors() []error { return m }

// GetMapConfigReplyValidationError is the validation error returned by
// GetMapConfigReply.Validate if the designated constraints aren't met.
type GetMapConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMapConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMapConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMapConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMapConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMapConfigReplyValidationError) ErrorName() string {
	return "GetMapConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMapConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMapConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMapConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMapConfigReplyValidationError{}

// Validate checks the field values on CreateMapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMapConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMapConfigRequestMultiError, or nil if none found.
func (m *CreateMapConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMapConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Zoom

	if len(errors) > 0 {
		return CreateMapConfigRequestMultiError(errors)
	}

	return nil
}

// CreateMapConfigRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMapConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMapConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMapConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMapConfigRequestMultiError) AllErrors() []error { return m }

// CreateMapConfigRequestValidationError is the validation error returned by
// CreateMapConfigRequest.Validate if the designated constraints aren't met.
type CreateMapConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMapConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMapConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMapConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMapConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMapConfigRequestValidationError) ErrorName() string {
	return "CreateMapConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMapConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMapConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMapConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMapConfigRequestValidationError{}

// Validate checks the field values on CreateMapConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMapConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMapConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMapConfigReplyMultiError, or nil if none found.
func (m *CreateMapConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMapConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMapConfigReplyMultiError(errors)
	}

	return nil
}

// CreateMapConfigReplyMultiError is an error wrapping multiple validation
// errors returned by CreateMapConfigReply.ValidateAll() if the designated
// constraints aren't met.
type CreateMapConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMapConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMapConfigReplyMultiError) AllErrors() []error { return m }

// CreateMapConfigReplyValidationError is the validation error returned by
// CreateMapConfigReply.Validate if the designated constraints aren't met.
type CreateMapConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMapConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMapConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMapConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMapConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMapConfigReplyValidationError) ErrorName() string {
	return "CreateMapConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMapConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMapConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMapConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMapConfigReplyValidationError{}

// Validate checks the field values on DeleteSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSystemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSystemInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSystemInfoRequestMultiError, or nil if none found.
func (m *DeleteSystemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSystemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSystemInfoRequestMultiError(errors)
	}

	return nil
}

// DeleteSystemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSystemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSystemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSystemInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSystemInfoRequestMultiError) AllErrors() []error { return m }

// DeleteSystemInfoRequestValidationError is the validation error returned by
// DeleteSystemInfoRequest.Validate if the designated constraints aren't met.
type DeleteSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemInfoRequestValidationError) ErrorName() string {
	return "DeleteSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemInfoRequestValidationError{}

// Validate checks the field values on DeleteSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSystemInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSystemInfoReplyMultiError, or nil if none found.
func (m *DeleteSystemInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSystemInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSystemInfoReplyMultiError(errors)
	}

	return nil
}

// DeleteSystemInfoReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSystemInfoReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSystemInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSystemInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSystemInfoReplyMultiError) AllErrors() []error { return m }

// DeleteSystemInfoReplyValidationError is the validation error returned by
// DeleteSystemInfoReply.Validate if the designated constraints aren't met.
type DeleteSystemInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemInfoReplyValidationError) ErrorName() string {
	return "DeleteSystemInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSystemInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemInfoReplyValidationError{}

// Validate checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoRequestMultiError, or nil if none found.
func (m *GetSystemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemInfoRequestMultiError(errors)
	}

	return nil
}

// GetSystemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoRequestMultiError) AllErrors() []error { return m }

// GetSystemInfoRequestValidationError is the validation error returned by
// GetSystemInfoRequest.Validate if the designated constraints aren't met.
type GetSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRequestValidationError) ErrorName() string {
	return "GetSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRequestValidationError{}

// Validate checks the field values on GetSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoReplyMultiError, or nil if none found.
func (m *GetSystemInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Icon

	if len(errors) > 0 {
		return GetSystemInfoReplyMultiError(errors)
	}

	return nil
}

// GetSystemInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetSystemInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetSystemInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoReplyMultiError) AllErrors() []error { return m }

// GetSystemInfoReplyValidationError is the validation error returned by
// GetSystemInfoReply.Validate if the designated constraints aren't met.
type GetSystemInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoReplyValidationError) ErrorName() string {
	return "GetSystemInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoReplyValidationError{}

// Validate checks the field values on CreateSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSystemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSystemInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSystemInfoRequestMultiError, or nil if none found.
func (m *CreateSystemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSystemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Icon

	if len(errors) > 0 {
		return CreateSystemInfoRequestMultiError(errors)
	}

	return nil
}

// CreateSystemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSystemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSystemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSystemInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSystemInfoRequestMultiError) AllErrors() []error { return m }

// CreateSystemInfoRequestValidationError is the validation error returned by
// CreateSystemInfoRequest.Validate if the designated constraints aren't met.
type CreateSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemInfoRequestValidationError) ErrorName() string {
	return "CreateSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemInfoRequestValidationError{}

// Validate checks the field values on CreateSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSystemInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSystemInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSystemInfoReplyMultiError, or nil if none found.
func (m *CreateSystemInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSystemInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSystemInfoReplyMultiError(errors)
	}

	return nil
}

// CreateSystemInfoReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSystemInfoReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSystemInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSystemInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSystemInfoReplyMultiError) AllErrors() []error { return m }

// CreateSystemInfoReplyValidationError is the validation error returned by
// CreateSystemInfoReply.Validate if the designated constraints aren't met.
type CreateSystemInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemInfoReplyValidationError) ErrorName() string {
	return "CreateSystemInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemInfoReplyValidationError{}

// Validate checks the field values on GeneralParameters with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GeneralParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneralParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GeneralParametersMultiError, or nil if none found.
func (m *GeneralParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneralParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GeneralParametersValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GeneralParametersValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeneralParametersValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	if len(errors) > 0 {
		return GeneralParametersMultiError(errors)
	}

	return nil
}

// GeneralParametersMultiError is an error wrapping multiple validation errors
// returned by GeneralParameters.ValidateAll() if the designated constraints
// aren't met.
type GeneralParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneralParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneralParametersMultiError) AllErrors() []error { return m }

// GeneralParametersValidationError is the validation error returned by
// GeneralParameters.Validate if the designated constraints aren't met.
type GeneralParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneralParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneralParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneralParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneralParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneralParametersValidationError) ErrorName() string {
	return "GeneralParametersValidationError"
}

// Error satisfies the builtin error interface
func (e GeneralParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneralParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneralParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneralParametersValidationError{}

// Validate checks the field values on ListGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGeneralParametersRequestMultiError, or nil if none found.
func (m *ListGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// ListGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by ListGeneralParametersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGeneralParametersRequestMultiError) AllErrors() []error { return m }

// ListGeneralParametersRequestValidationError is the validation error returned
// by ListGeneralParametersRequest.Validate if the designated constraints
// aren't met.
type ListGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneralParametersRequestValidationError) ErrorName() string {
	return "ListGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneralParametersRequestValidationError{}

// Validate checks the field values on ListGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGeneralParametersReplyMultiError, or nil if none found.
func (m *ListGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGeneralParametersReplyValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGeneralParametersReplyValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGeneralParametersReplyValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// ListGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by ListGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type ListGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGeneralParametersReplyMultiError) AllErrors() []error { return m }

// ListGeneralParametersReplyValidationError is the validation error returned
// by ListGeneralParametersReply.Validate if the designated constraints aren't met.
type ListGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneralParametersReplyValidationError) ErrorName() string {
	return "ListGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneralParametersReplyValidationError{}

// Validate checks the field values on DeleteGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGeneralParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteGeneralParametersRequestMultiError, or nil if none found.
func (m *DeleteGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// DeleteGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteGeneralParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGeneralParametersRequestMultiError) AllErrors() []error { return m }

// DeleteGeneralParametersRequestValidationError is the validation error
// returned by DeleteGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type DeleteGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGeneralParametersRequestValidationError) ErrorName() string {
	return "DeleteGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGeneralParametersRequestValidationError{}

// Validate checks the field values on DeleteGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGeneralParametersReplyMultiError, or nil if none found.
func (m *DeleteGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// DeleteGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGeneralParametersReplyMultiError) AllErrors() []error { return m }

// DeleteGeneralParametersReplyValidationError is the validation error returned
// by DeleteGeneralParametersReply.Validate if the designated constraints
// aren't met.
type DeleteGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGeneralParametersReplyValidationError) ErrorName() string {
	return "DeleteGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGeneralParametersReplyValidationError{}

// Validate checks the field values on UpdateGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGeneralParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateGeneralParametersRequestMultiError, or nil if none found.
func (m *UpdateGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// UpdateGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateGeneralParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGeneralParametersRequestMultiError) AllErrors() []error { return m }

// UpdateGeneralParametersRequestValidationError is the validation error
// returned by UpdateGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type UpdateGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGeneralParametersRequestValidationError) ErrorName() string {
	return "UpdateGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGeneralParametersRequestValidationError{}

// Validate checks the field values on UpdateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGeneralParametersReplyMultiError, or nil if none found.
func (m *UpdateGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// UpdateGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGeneralParametersReplyMultiError) AllErrors() []error { return m }

// UpdateGeneralParametersReplyValidationError is the validation error returned
// by UpdateGeneralParametersReply.Validate if the designated constraints
// aren't met.
type UpdateGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGeneralParametersReplyValidationError) ErrorName() string {
	return "UpdateGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGeneralParametersReplyValidationError{}

// Validate checks the field values on CreateGeneralParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGeneralParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGeneralParametersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateGeneralParametersRequestMultiError, or nil if none found.
func (m *CreateGeneralParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGeneralParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Default

	// no validation rules for Desc

	// no validation rules for Enable

	if len(errors) > 0 {
		return CreateGeneralParametersRequestMultiError(errors)
	}

	return nil
}

// CreateGeneralParametersRequestMultiError is an error wrapping multiple
// validation errors returned by CreateGeneralParametersRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateGeneralParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGeneralParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGeneralParametersRequestMultiError) AllErrors() []error { return m }

// CreateGeneralParametersRequestValidationError is the validation error
// returned by CreateGeneralParametersRequest.Validate if the designated
// constraints aren't met.
type CreateGeneralParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGeneralParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGeneralParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGeneralParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGeneralParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGeneralParametersRequestValidationError) ErrorName() string {
	return "CreateGeneralParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGeneralParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGeneralParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGeneralParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGeneralParametersRequestValidationError{}

// Validate checks the field values on CreateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGeneralParametersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGeneralParametersReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGeneralParametersReplyMultiError, or nil if none found.
func (m *CreateGeneralParametersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGeneralParametersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGeneralParametersReplyMultiError(errors)
	}

	return nil
}

// CreateGeneralParametersReplyMultiError is an error wrapping multiple
// validation errors returned by CreateGeneralParametersReply.ValidateAll() if
// the designated constraints aren't met.
type CreateGeneralParametersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGeneralParametersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGeneralParametersReplyMultiError) AllErrors() []error { return m }

// CreateGeneralParametersReplyValidationError is the validation error returned
// by CreateGeneralParametersReply.Validate if the designated constraints
// aren't met.
type CreateGeneralParametersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGeneralParametersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGeneralParametersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGeneralParametersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGeneralParametersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGeneralParametersReplyValidationError) ErrorName() string {
	return "CreateGeneralParametersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGeneralParametersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGeneralParametersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGeneralParametersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGeneralParametersReplyValidationError{}

// Validate checks the field values on CreateCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCameraAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCameraAttrRequestMultiError, or nil if none found.
func (m *CreateCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Src

	if len(errors) > 0 {
		return CreateCameraAttrRequestMultiError(errors)
	}

	return nil
}

// CreateCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCameraAttrRequestMultiError) AllErrors() []error { return m }

// CreateCameraAttrRequestValidationError is the validation error returned by
// CreateCameraAttrRequest.Validate if the designated constraints aren't met.
type CreateCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraAttrRequestValidationError) ErrorName() string {
	return "CreateCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraAttrRequestValidationError{}

// Validate checks the field values on CreateCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCameraAttrReplyMultiError, or nil if none found.
func (m *CreateCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCameraAttrReplyMultiError(errors)
	}

	return nil
}

// CreateCameraAttrReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCameraAttrReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCameraAttrReplyMultiError) AllErrors() []error { return m }

// CreateCameraAttrReplyValidationError is the validation error returned by
// CreateCameraAttrReply.Validate if the designated constraints aren't met.
type CreateCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCameraAttrReplyValidationError) ErrorName() string {
	return "CreateCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCameraAttrReplyValidationError{}

// Validate checks the field values on DeleteCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCameraAttrRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCameraAttrRequestMultiError, or nil if none found.
func (m *DeleteCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCameraAttrRequestMultiError(errors)
	}

	return nil
}

// DeleteCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCameraAttrRequestMultiError) AllErrors() []error { return m }

// DeleteCameraAttrRequestValidationError is the validation error returned by
// DeleteCameraAttrRequest.Validate if the designated constraints aren't met.
type DeleteCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraAttrRequestValidationError) ErrorName() string {
	return "DeleteCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraAttrRequestValidationError{}

// Validate checks the field values on DeleteCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCameraAttrReplyMultiError, or nil if none found.
func (m *DeleteCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCameraAttrReplyMultiError(errors)
	}

	return nil
}

// DeleteCameraAttrReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCameraAttrReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCameraAttrReplyMultiError) AllErrors() []error { return m }

// DeleteCameraAttrReplyValidationError is the validation error returned by
// DeleteCameraAttrReply.Validate if the designated constraints aren't met.
type DeleteCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCameraAttrReplyValidationError) ErrorName() string {
	return "DeleteCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCameraAttrReplyValidationError{}

// Validate checks the field values on GetCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraAttrRequestMultiError, or nil if none found.
func (m *GetCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCameraAttrRequestMultiError(errors)
	}

	return nil
}

// GetCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by GetCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraAttrRequestMultiError) AllErrors() []error { return m }

// GetCameraAttrRequestValidationError is the validation error returned by
// GetCameraAttrRequest.Validate if the designated constraints aren't met.
type GetCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraAttrRequestValidationError) ErrorName() string {
	return "GetCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraAttrRequestValidationError{}

// Validate checks the field values on CameraAttr with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CameraAttr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CameraAttr with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CameraAttrMultiError, or
// nil if none found.
func (m *CameraAttr) ValidateAll() error {
	return m.validate(true)
}

func (m *CameraAttr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CameraAttrValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CameraAttrValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CameraAttrValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Image

	if len(errors) > 0 {
		return CameraAttrMultiError(errors)
	}

	return nil
}

// CameraAttrMultiError is an error wrapping multiple validation errors
// returned by CameraAttr.ValidateAll() if the designated constraints aren't met.
type CameraAttrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CameraAttrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CameraAttrMultiError) AllErrors() []error { return m }

// CameraAttrValidationError is the validation error returned by
// CameraAttr.Validate if the designated constraints aren't met.
type CameraAttrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraAttrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraAttrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraAttrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraAttrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraAttrValidationError) ErrorName() string { return "CameraAttrValidationError" }

// Error satisfies the builtin error interface
func (e CameraAttrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraAttr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraAttrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraAttrValidationError{}

// Validate checks the field values on GetCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCameraAttrReplyMultiError, or nil if none found.
func (m *GetCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCameraAttrReplyValidationError{
					field:  "Attr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCameraAttrReplyValidationError{
					field:  "Attr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCameraAttrReplyValidationError{
				field:  "Attr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCameraAttrReplyMultiError(errors)
	}

	return nil
}

// GetCameraAttrReplyMultiError is an error wrapping multiple validation errors
// returned by GetCameraAttrReply.ValidateAll() if the designated constraints
// aren't met.
type GetCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCameraAttrReplyMultiError) AllErrors() []error { return m }

// GetCameraAttrReplyValidationError is the validation error returned by
// GetCameraAttrReply.Validate if the designated constraints aren't met.
type GetCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCameraAttrReplyValidationError) ErrorName() string {
	return "GetCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCameraAttrReplyValidationError{}

// Validate checks the field values on ListCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraAttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraAttrRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraAttrRequestMultiError, or nil if none found.
func (m *ListCameraAttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraAttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCameraAttrRequestMultiError(errors)
	}

	return nil
}

// ListCameraAttrRequestMultiError is an error wrapping multiple validation
// errors returned by ListCameraAttrRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCameraAttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraAttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraAttrRequestMultiError) AllErrors() []error { return m }

// ListCameraAttrRequestValidationError is the validation error returned by
// ListCameraAttrRequest.Validate if the designated constraints aren't met.
type ListCameraAttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraAttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraAttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraAttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraAttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraAttrRequestValidationError) ErrorName() string {
	return "ListCameraAttrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraAttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraAttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraAttrRequestValidationError{}

// Validate checks the field values on ListCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCameraAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCameraAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCameraAttrReplyMultiError, or nil if none found.
func (m *ListCameraAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCameraAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCameraAttrReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCameraAttrReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCameraAttrReplyValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCameraAttrReplyMultiError(errors)
	}

	return nil
}

// ListCameraAttrReplyMultiError is an error wrapping multiple validation
// errors returned by ListCameraAttrReply.ValidateAll() if the designated
// constraints aren't met.
type ListCameraAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCameraAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCameraAttrReplyMultiError) AllErrors() []error { return m }

// ListCameraAttrReplyValidationError is the validation error returned by
// ListCameraAttrReply.Validate if the designated constraints aren't met.
type ListCameraAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCameraAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCameraAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCameraAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCameraAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCameraAttrReplyValidationError) ErrorName() string {
	return "ListCameraAttrReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCameraAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCameraAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCameraAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCameraAttrReplyValidationError{}

// Validate checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleRequestMultiError, or nil if none found.
func (m *CreateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := CreateModuleRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateModuleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alias

	if len(errors) > 0 {
		return CreateModuleRequestMultiError(errors)
	}

	return nil
}

// CreateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleRequestMultiError) AllErrors() []error { return m }

// CreateModuleRequestValidationError is the validation error returned by
// CreateModuleRequest.Validate if the designated constraints aren't met.
type CreateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleRequestValidationError) ErrorName() string {
	return "CreateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleRequestValidationError{}

// Validate checks the field values on CreateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleReplyMultiError, or nil if none found.
func (m *CreateModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateModuleReplyMultiError(errors)
	}

	return nil
}

// CreateModuleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateModuleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleReplyMultiError) AllErrors() []error { return m }

// CreateModuleReplyValidationError is the validation error returned by
// CreateModuleReply.Validate if the designated constraints aren't met.
type CreateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleReplyValidationError) ErrorName() string {
	return "CreateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleReplyValidationError{}

// Validate checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleRequestMultiError, or nil if none found.
func (m *DeleteModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteModuleRequestMultiError(errors)
	}

	return nil
}

// DeleteModuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleRequestMultiError) AllErrors() []error { return m }

// DeleteModuleRequestValidationError is the validation error returned by
// DeleteModuleRequest.Validate if the designated constraints aren't met.
type DeleteModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleRequestValidationError) ErrorName() string {
	return "DeleteModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleRequestValidationError{}

// Validate checks the field values on DeleteModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleReplyMultiError, or nil if none found.
func (m *DeleteModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteModuleReplyMultiError(errors)
	}

	return nil
}

// DeleteModuleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteModuleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleReplyMultiError) AllErrors() []error { return m }

// DeleteModuleReplyValidationError is the validation error returned by
// DeleteModuleReply.Validate if the designated constraints aren't met.
type DeleteModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleReplyValidationError) ErrorName() string {
	return "DeleteModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleReplyValidationError{}

// Validate checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleRequestMultiError, or nil if none found.
func (m *UpdateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := UpdateModuleRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateModuleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alias

	if len(errors) > 0 {
		return UpdateModuleRequestMultiError(errors)
	}

	return nil
}

// UpdateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleRequestMultiError) AllErrors() []error { return m }

// UpdateModuleRequestValidationError is the validation error returned by
// UpdateModuleRequest.Validate if the designated constraints aren't met.
type UpdateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleRequestValidationError) ErrorName() string {
	return "UpdateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleRequestValidationError{}

// Validate checks the field values on UpdateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleReplyMultiError, or nil if none found.
func (m *UpdateModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateModuleReplyMultiError(errors)
	}

	return nil
}

// UpdateModuleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateModuleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleReplyMultiError) AllErrors() []error { return m }

// UpdateModuleReplyValidationError is the validation error returned by
// UpdateModuleReply.Validate if the designated constraints aren't met.
type UpdateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleReplyValidationError) ErrorName() string {
	return "UpdateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleReplyValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Alias

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on GetModuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModuleRequestMultiError, or nil if none found.
func (m *GetModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetModuleRequestMultiError(errors)
	}

	return nil
}

// GetModuleRequestMultiError is an error wrapping multiple validation errors
// returned by GetModuleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleRequestMultiError) AllErrors() []error { return m }

// GetModuleRequestValidationError is the validation error returned by
// GetModuleRequest.Validate if the designated constraints aren't met.
type GetModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleRequestValidationError) ErrorName() string { return "GetModuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleRequestValidationError{}

// Validate checks the field values on GetModuleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetModuleReplyMultiError,
// or nil if none found.
func (m *GetModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModuleReplyValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModuleReplyValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleReplyValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModuleReplyMultiError(errors)
	}

	return nil
}

// GetModuleReplyMultiError is an error wrapping multiple validation errors
// returned by GetModuleReply.ValidateAll() if the designated constraints
// aren't met.
type GetModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleReplyMultiError) AllErrors() []error { return m }

// GetModuleReplyValidationError is the validation error returned by
// GetModuleReply.Validate if the designated constraints aren't met.
type GetModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleReplyValidationError) ErrorName() string { return "GetModuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleReplyValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesRequestMultiError, or nil if none found.
func (m *ListModulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListModulesRequestMultiError(errors)
	}

	return nil
}

// ListModulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListModulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListModulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesRequestMultiError) AllErrors() []error { return m }

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListModulesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesReplyMultiError, or nil if none found.
func (m *ListModulesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModulesReplyValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModulesReplyValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesReplyValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListModulesReplyMultiError(errors)
	}

	return nil
}

// ListModulesReplyMultiError is an error wrapping multiple validation errors
// returned by ListModulesReply.ValidateAll() if the designated constraints
// aren't met.
type ListModulesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesReplyMultiError) AllErrors() []error { return m }

// ListModulesReplyValidationError is the validation error returned by
// ListModulesReply.Validate if the designated constraints aren't met.
type ListModulesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesReplyValidationError) ErrorName() string { return "ListModulesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListModulesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesReplyValidationError{}

// Validate checks the field values on ListComputingUnitReply_ComputingUnit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListComputingUnitReply_ComputingUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComputingUnitReply_ComputingUnit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListComputingUnitReply_ComputingUnitMultiError, or nil if none found.
func (m *ListComputingUnitReply_ComputingUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComputingUnitReply_ComputingUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListComputingUnitReply_ComputingUnitValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListComputingUnitReply_ComputingUnitValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListComputingUnitReply_ComputingUnitValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Enable

	if len(errors) > 0 {
		return ListComputingUnitReply_ComputingUnitMultiError(errors)
	}

	return nil
}

// ListComputingUnitReply_ComputingUnitMultiError is an error wrapping multiple
// validation errors returned by
// ListComputingUnitReply_ComputingUnit.ValidateAll() if the designated
// constraints aren't met.
type ListComputingUnitReply_ComputingUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComputingUnitReply_ComputingUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComputingUnitReply_ComputingUnitMultiError) AllErrors() []error { return m }

// ListComputingUnitReply_ComputingUnitValidationError is the validation error
// returned by ListComputingUnitReply_ComputingUnit.Validate if the designated
// constraints aren't met.
type ListComputingUnitReply_ComputingUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComputingUnitReply_ComputingUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComputingUnitReply_ComputingUnitValidationError) ErrorName() string {
	return "ListComputingUnitReply_ComputingUnitValidationError"
}

// Error satisfies the builtin error interface
func (e ListComputingUnitReply_ComputingUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComputingUnitReply_ComputingUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComputingUnitReply_ComputingUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComputingUnitReply_ComputingUnitValidationError{}

// Validate checks the field values on GetOperatorConfigReply_OperatorConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOperatorConfigReply_OperatorConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorConfigReply_OperatorConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorConfigReply_OperatorConfigMultiError, or nil if none found.
func (m *GetOperatorConfigReply_OperatorConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorConfigReply_OperatorConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FullChannelBlock

	if len(errors) > 0 {
		return GetOperatorConfigReply_OperatorConfigMultiError(errors)
	}

	return nil
}

// GetOperatorConfigReply_OperatorConfigMultiError is an error wrapping
// multiple validation errors returned by
// GetOperatorConfigReply_OperatorConfig.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorConfigReply_OperatorConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorConfigReply_OperatorConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorConfigReply_OperatorConfigMultiError) AllErrors() []error { return m }

// GetOperatorConfigReply_OperatorConfigValidationError is the validation error
// returned by GetOperatorConfigReply_OperatorConfig.Validate if the
// designated constraints aren't met.
type GetOperatorConfigReply_OperatorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorConfigReply_OperatorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorConfigReply_OperatorConfigValidationError) ErrorName() string {
	return "GetOperatorConfigReply_OperatorConfigValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorConfigReply_OperatorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorConfigReply_OperatorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorConfigReply_OperatorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorConfigReply_OperatorConfigValidationError{}
