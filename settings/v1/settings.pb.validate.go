// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings/v1/settings.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateIconRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateIconRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIconRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIconRequestMultiError, or nil if none found.
func (m *CreateIconRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIconRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	if len(errors) > 0 {
		return CreateIconRequestMultiError(errors)
	}

	return nil
}

// CreateIconRequestMultiError is an error wrapping multiple validation errors
// returned by CreateIconRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateIconRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIconRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIconRequestMultiError) AllErrors() []error { return m }

// CreateIconRequestValidationError is the validation error returned by
// CreateIconRequest.Validate if the designated constraints aren't met.
type CreateIconRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIconRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIconRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIconRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIconRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIconRequestValidationError) ErrorName() string {
	return "CreateIconRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIconRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIconRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIconRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIconRequestValidationError{}

// Validate checks the field values on CreateIconReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateIconReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIconReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIconReplyMultiError, or nil if none found.
func (m *CreateIconReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIconReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateIconReplyMultiError(errors)
	}

	return nil
}

// CreateIconReplyMultiError is an error wrapping multiple validation errors
// returned by CreateIconReply.ValidateAll() if the designated constraints
// aren't met.
type CreateIconReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIconReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIconReplyMultiError) AllErrors() []error { return m }

// CreateIconReplyValidationError is the validation error returned by
// CreateIconReply.Validate if the designated constraints aren't met.
type CreateIconReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIconReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIconReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIconReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIconReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIconReplyValidationError) ErrorName() string { return "CreateIconReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateIconReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIconReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIconReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIconReplyValidationError{}

// Validate checks the field values on DeleteIconRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteIconRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIconRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIconRequestMultiError, or nil if none found.
func (m *DeleteIconRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIconRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteIconRequestMultiError(errors)
	}

	return nil
}

// DeleteIconRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteIconRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteIconRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIconRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIconRequestMultiError) AllErrors() []error { return m }

// DeleteIconRequestValidationError is the validation error returned by
// DeleteIconRequest.Validate if the designated constraints aren't met.
type DeleteIconRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIconRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIconRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIconRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIconRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIconRequestValidationError) ErrorName() string {
	return "DeleteIconRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIconRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIconRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIconRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIconRequestValidationError{}

// Validate checks the field values on DeleteIconReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteIconReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIconReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIconReplyMultiError, or nil if none found.
func (m *DeleteIconReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIconReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteIconReplyMultiError(errors)
	}

	return nil
}

// DeleteIconReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteIconReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteIconReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIconReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIconReplyMultiError) AllErrors() []error { return m }

// DeleteIconReplyValidationError is the validation error returned by
// DeleteIconReply.Validate if the designated constraints aren't met.
type DeleteIconReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIconReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIconReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIconReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIconReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIconReplyValidationError) ErrorName() string { return "DeleteIconReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteIconReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIconReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIconReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIconReplyValidationError{}

// Validate checks the field values on GetIconRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIconRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIconRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetIconRequestMultiError,
// or nil if none found.
func (m *GetIconRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIconRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetIconRequestMultiError(errors)
	}

	return nil
}

// GetIconRequestMultiError is an error wrapping multiple validation errors
// returned by GetIconRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIconRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIconRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIconRequestMultiError) AllErrors() []error { return m }

// GetIconRequestValidationError is the validation error returned by
// GetIconRequest.Validate if the designated constraints aren't met.
type GetIconRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIconRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIconRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIconRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIconRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIconRequestValidationError) ErrorName() string { return "GetIconRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIconRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIconRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIconRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIconRequestValidationError{}

// Validate checks the field values on GetIconReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIconReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIconReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetIconReplyMultiError, or
// nil if none found.
func (m *GetIconReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIconReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if len(errors) > 0 {
		return GetIconReplyMultiError(errors)
	}

	return nil
}

// GetIconReplyMultiError is an error wrapping multiple validation errors
// returned by GetIconReply.ValidateAll() if the designated constraints aren't met.
type GetIconReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIconReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIconReplyMultiError) AllErrors() []error { return m }

// GetIconReplyValidationError is the validation error returned by
// GetIconReply.Validate if the designated constraints aren't met.
type GetIconReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIconReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIconReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIconReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIconReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIconReplyValidationError) ErrorName() string { return "GetIconReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetIconReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIconReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIconReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIconReplyValidationError{}

// Validate checks the field values on ListIconRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListIconRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIconRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIconRequestMultiError, or nil if none found.
func (m *ListIconRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIconRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListIconRequestMultiError(errors)
	}

	return nil
}

// ListIconRequestMultiError is an error wrapping multiple validation errors
// returned by ListIconRequest.ValidateAll() if the designated constraints
// aren't met.
type ListIconRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIconRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIconRequestMultiError) AllErrors() []error { return m }

// ListIconRequestValidationError is the validation error returned by
// ListIconRequest.Validate if the designated constraints aren't met.
type ListIconRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIconRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIconRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIconRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIconRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIconRequestValidationError) ErrorName() string { return "ListIconRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListIconRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIconRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIconRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIconRequestValidationError{}

// Validate checks the field values on ListIconReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListIconReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIconReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListIconReplyMultiError, or
// nil if none found.
func (m *ListIconReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIconReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIconReplyValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIconReplyValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIconReplyValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIconReplyMultiError(errors)
	}

	return nil
}

// ListIconReplyMultiError is an error wrapping multiple validation errors
// returned by ListIconReply.ValidateAll() if the designated constraints
// aren't met.
type ListIconReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIconReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIconReplyMultiError) AllErrors() []error { return m }

// ListIconReplyValidationError is the validation error returned by
// ListIconReply.Validate if the designated constraints aren't met.
type ListIconReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIconReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIconReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIconReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIconReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIconReplyValidationError) ErrorName() string { return "ListIconReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListIconReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIconReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIconReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIconReplyValidationError{}

// Validate checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleRequestMultiError, or nil if none found.
func (m *CreateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := CreateModuleRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateModuleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alias

	if len(errors) > 0 {
		return CreateModuleRequestMultiError(errors)
	}

	return nil
}

// CreateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleRequestMultiError) AllErrors() []error { return m }

// CreateModuleRequestValidationError is the validation error returned by
// CreateModuleRequest.Validate if the designated constraints aren't met.
type CreateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleRequestValidationError) ErrorName() string {
	return "CreateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleRequestValidationError{}

// Validate checks the field values on CreateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleReplyMultiError, or nil if none found.
func (m *CreateModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateModuleReplyMultiError(errors)
	}

	return nil
}

// CreateModuleReplyMultiError is an error wrapping multiple validation errors
// returned by CreateModuleReply.ValidateAll() if the designated constraints
// aren't met.
type CreateModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleReplyMultiError) AllErrors() []error { return m }

// CreateModuleReplyValidationError is the validation error returned by
// CreateModuleReply.Validate if the designated constraints aren't met.
type CreateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleReplyValidationError) ErrorName() string {
	return "CreateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleReplyValidationError{}

// Validate checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleRequestMultiError, or nil if none found.
func (m *DeleteModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteModuleRequestMultiError(errors)
	}

	return nil
}

// DeleteModuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleRequestMultiError) AllErrors() []error { return m }

// DeleteModuleRequestValidationError is the validation error returned by
// DeleteModuleRequest.Validate if the designated constraints aren't met.
type DeleteModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleRequestValidationError) ErrorName() string {
	return "DeleteModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleRequestValidationError{}

// Validate checks the field values on DeleteModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleReplyMultiError, or nil if none found.
func (m *DeleteModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteModuleReplyMultiError(errors)
	}

	return nil
}

// DeleteModuleReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteModuleReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleReplyMultiError) AllErrors() []error { return m }

// DeleteModuleReplyValidationError is the validation error returned by
// DeleteModuleReply.Validate if the designated constraints aren't met.
type DeleteModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleReplyValidationError) ErrorName() string {
	return "DeleteModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleReplyValidationError{}

// Validate checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleRequestMultiError, or nil if none found.
func (m *UpdateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := UpdateModuleRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateModuleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alias

	if len(errors) > 0 {
		return UpdateModuleRequestMultiError(errors)
	}

	return nil
}

// UpdateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleRequestMultiError) AllErrors() []error { return m }

// UpdateModuleRequestValidationError is the validation error returned by
// UpdateModuleRequest.Validate if the designated constraints aren't met.
type UpdateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleRequestValidationError) ErrorName() string {
	return "UpdateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleRequestValidationError{}

// Validate checks the field values on UpdateModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleReplyMultiError, or nil if none found.
func (m *UpdateModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateModuleReplyMultiError(errors)
	}

	return nil
}

// UpdateModuleReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateModuleReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleReplyMultiError) AllErrors() []error { return m }

// UpdateModuleReplyValidationError is the validation error returned by
// UpdateModuleReply.Validate if the designated constraints aren't met.
type UpdateModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleReplyValidationError) ErrorName() string {
	return "UpdateModuleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleReplyValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Alias

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on GetModuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModuleRequestMultiError, or nil if none found.
func (m *GetModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetModuleRequestMultiError(errors)
	}

	return nil
}

// GetModuleRequestMultiError is an error wrapping multiple validation errors
// returned by GetModuleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleRequestMultiError) AllErrors() []error { return m }

// GetModuleRequestValidationError is the validation error returned by
// GetModuleRequest.Validate if the designated constraints aren't met.
type GetModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleRequestValidationError) ErrorName() string { return "GetModuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleRequestValidationError{}

// Validate checks the field values on GetModuleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetModuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetModuleReplyMultiError,
// or nil if none found.
func (m *GetModuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModuleReplyValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModuleReplyValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleReplyValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModuleReplyMultiError(errors)
	}

	return nil
}

// GetModuleReplyMultiError is an error wrapping multiple validation errors
// returned by GetModuleReply.ValidateAll() if the designated constraints
// aren't met.
type GetModuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleReplyMultiError) AllErrors() []error { return m }

// GetModuleReplyValidationError is the validation error returned by
// GetModuleReply.Validate if the designated constraints aren't met.
type GetModuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleReplyValidationError) ErrorName() string { return "GetModuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleReplyValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesRequestMultiError, or nil if none found.
func (m *ListModulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListModulesRequestMultiError(errors)
	}

	return nil
}

// ListModulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListModulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListModulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesRequestMultiError) AllErrors() []error { return m }

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListModulesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesReplyMultiError, or nil if none found.
func (m *ListModulesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModulesReplyValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModulesReplyValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesReplyValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListModulesReplyMultiError(errors)
	}

	return nil
}

// ListModulesReplyMultiError is an error wrapping multiple validation errors
// returned by ListModulesReply.ValidateAll() if the designated constraints
// aren't met.
type ListModulesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesReplyMultiError) AllErrors() []error { return m }

// ListModulesReplyValidationError is the validation error returned by
// ListModulesReply.Validate if the designated constraints aren't met.
type ListModulesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesReplyValidationError) ErrorName() string { return "ListModulesReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListModulesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesReplyValidationError{}

// Validate checks the field values on ListIconReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIconReply_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIconReply_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIconReply_ImageMultiError, or nil if none found.
func (m *ListIconReply_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIconReply_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Src

	if len(errors) > 0 {
		return ListIconReply_ImageMultiError(errors)
	}

	return nil
}

// ListIconReply_ImageMultiError is an error wrapping multiple validation
// errors returned by ListIconReply_Image.ValidateAll() if the designated
// constraints aren't met.
type ListIconReply_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIconReply_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIconReply_ImageMultiError) AllErrors() []error { return m }

// ListIconReply_ImageValidationError is the validation error returned by
// ListIconReply_Image.Validate if the designated constraints aren't met.
type ListIconReply_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIconReply_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIconReply_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIconReply_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIconReply_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIconReply_ImageValidationError) ErrorName() string {
	return "ListIconReply_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e ListIconReply_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIconReply_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIconReply_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIconReply_ImageValidationError{}
