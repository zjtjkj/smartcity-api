// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: settings/v1/settings.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettingsClient is the client API for Settings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsClient interface {
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleReply, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleReply, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleReply, error)
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleReply, error)
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesReply, error)
	CreateIcon(ctx context.Context, in *CreateIconRequest, opts ...grpc.CallOption) (*CreateIconReply, error)
	DeleteIcon(ctx context.Context, in *DeleteIconRequest, opts ...grpc.CallOption) (*DeleteIconReply, error)
	GetIcon(ctx context.Context, in *GetIconRequest, opts ...grpc.CallOption) (*GetIconReply, error)
	LostIcon(ctx context.Context, in *ListIconRequest, opts ...grpc.CallOption) (*ListIconReply, error)
}

type settingsClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsClient(cc grpc.ClientConnInterface) SettingsClient {
	return &settingsClient{cc}
}

func (c *settingsClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleReply, error) {
	out := new(CreateModuleReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/CreateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleReply, error) {
	out := new(DeleteModuleReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/DeleteModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleReply, error) {
	out := new(UpdateModuleReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/UpdateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleReply, error) {
	out := new(GetModuleReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesReply, error) {
	out := new(ListModulesReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/ListModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateIcon(ctx context.Context, in *CreateIconRequest, opts ...grpc.CallOption) (*CreateIconReply, error) {
	out := new(CreateIconReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/CreateIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteIcon(ctx context.Context, in *DeleteIconRequest, opts ...grpc.CallOption) (*DeleteIconReply, error) {
	out := new(DeleteIconReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/DeleteIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetIcon(ctx context.Context, in *GetIconRequest, opts ...grpc.CallOption) (*GetIconReply, error) {
	out := new(GetIconReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/GetIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) LostIcon(ctx context.Context, in *ListIconRequest, opts ...grpc.CallOption) (*ListIconReply, error) {
	out := new(ListIconReply)
	err := c.cc.Invoke(ctx, "/api.settings.v1.Settings/LostIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServer is the server API for Settings service.
// All implementations must embed UnimplementedSettingsServer
// for forward compatibility
type SettingsServer interface {
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleReply, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleReply, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleReply, error)
	GetModule(context.Context, *GetModuleRequest) (*GetModuleReply, error)
	ListModules(context.Context, *ListModulesRequest) (*ListModulesReply, error)
	CreateIcon(context.Context, *CreateIconRequest) (*CreateIconReply, error)
	DeleteIcon(context.Context, *DeleteIconRequest) (*DeleteIconReply, error)
	GetIcon(context.Context, *GetIconRequest) (*GetIconReply, error)
	LostIcon(context.Context, *ListIconRequest) (*ListIconReply, error)
	mustEmbedUnimplementedSettingsServer()
}

// UnimplementedSettingsServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServer struct {
}

func (UnimplementedSettingsServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedSettingsServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedSettingsServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedSettingsServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedSettingsServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedSettingsServer) CreateIcon(context.Context, *CreateIconRequest) (*CreateIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIcon not implemented")
}
func (UnimplementedSettingsServer) DeleteIcon(context.Context, *DeleteIconRequest) (*DeleteIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIcon not implemented")
}
func (UnimplementedSettingsServer) GetIcon(context.Context, *GetIconRequest) (*GetIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIcon not implemented")
}
func (UnimplementedSettingsServer) LostIcon(context.Context, *ListIconRequest) (*ListIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LostIcon not implemented")
}
func (UnimplementedSettingsServer) mustEmbedUnimplementedSettingsServer() {}

// UnsafeSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServer will
// result in compilation errors.
type UnsafeSettingsServer interface {
	mustEmbedUnimplementedSettingsServer()
}

func RegisterSettingsServer(s grpc.ServiceRegistrar, srv SettingsServer) {
	s.RegisterService(&Settings_ServiceDesc, srv)
}

func _Settings_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/CreateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/DeleteModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/UpdateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/CreateIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateIcon(ctx, req.(*CreateIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/DeleteIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteIcon(ctx, req.(*DeleteIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/GetIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetIcon(ctx, req.(*GetIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_LostIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).LostIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.settings.v1.Settings/LostIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).LostIcon(ctx, req.(*ListIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Settings_ServiceDesc is the grpc.ServiceDesc for Settings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Settings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.settings.v1.Settings",
	HandlerType: (*SettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _Settings_CreateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _Settings_DeleteModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _Settings_UpdateModule_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _Settings_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _Settings_ListModules_Handler,
		},
		{
			MethodName: "CreateIcon",
			Handler:    _Settings_CreateIcon_Handler,
		},
		{
			MethodName: "DeleteIcon",
			Handler:    _Settings_DeleteIcon_Handler,
		},
		{
			MethodName: "GetIcon",
			Handler:    _Settings_GetIcon_Handler,
		},
		{
			MethodName: "LostIcon",
			Handler:    _Settings_LostIcon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings/v1/settings.proto",
}
