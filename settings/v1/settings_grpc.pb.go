// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: api/settings/v1/settings.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Settings_CreateComputingUnit_FullMethodName     = "/api.settings.v1.Settings/CreateComputingUnit"
	Settings_UpdateComputingUnit_FullMethodName     = "/api.settings.v1.Settings/UpdateComputingUnit"
	Settings_DeleteComputingUnit_FullMethodName     = "/api.settings.v1.Settings/DeleteComputingUnit"
	Settings_ListComputingUnit_FullMethodName       = "/api.settings.v1.Settings/ListComputingUnit"
	Settings_CreatePusherConfig_FullMethodName      = "/api.settings.v1.Settings/CreatePusherConfig"
	Settings_GetPusherConfig_FullMethodName         = "/api.settings.v1.Settings/GetPusherConfig"
	Settings_CreateOperatorConfig_FullMethodName    = "/api.settings.v1.Settings/CreateOperatorConfig"
	Settings_GetOperatorConfig_FullMethodName       = "/api.settings.v1.Settings/GetOperatorConfig"
	Settings_CreateMapConfig_FullMethodName         = "/api.settings.v1.Settings/CreateMapConfig"
	Settings_GetMapConfig_FullMethodName            = "/api.settings.v1.Settings/GetMapConfig"
	Settings_CreateSystemInfo_FullMethodName        = "/api.settings.v1.Settings/CreateSystemInfo"
	Settings_GetSystemInfo_FullMethodName           = "/api.settings.v1.Settings/GetSystemInfo"
	Settings_DeleteSystemInfo_FullMethodName        = "/api.settings.v1.Settings/DeleteSystemInfo"
	Settings_CreateModule_FullMethodName            = "/api.settings.v1.Settings/CreateModule"
	Settings_DeleteModule_FullMethodName            = "/api.settings.v1.Settings/DeleteModule"
	Settings_UpdateModule_FullMethodName            = "/api.settings.v1.Settings/UpdateModule"
	Settings_GetModule_FullMethodName               = "/api.settings.v1.Settings/GetModule"
	Settings_ListModules_FullMethodName             = "/api.settings.v1.Settings/ListModules"
	Settings_CreateCameraAttr_FullMethodName        = "/api.settings.v1.Settings/CreateCameraAttr"
	Settings_DeleteCameraAttr_FullMethodName        = "/api.settings.v1.Settings/DeleteCameraAttr"
	Settings_GetCameraAttr_FullMethodName           = "/api.settings.v1.Settings/GetCameraAttr"
	Settings_ListCameraAttr_FullMethodName          = "/api.settings.v1.Settings/ListCameraAttr"
	Settings_CreateGeneralParameters_FullMethodName = "/api.settings.v1.Settings/CreateGeneralParameters"
	Settings_UpdateGeneralParameters_FullMethodName = "/api.settings.v1.Settings/UpdateGeneralParameters"
	Settings_DeleteGeneralParameters_FullMethodName = "/api.settings.v1.Settings/DeleteGeneralParameters"
	Settings_ListGeneralParameters_FullMethodName   = "/api.settings.v1.Settings/ListGeneralParameters"
	Settings_CreateAlertFeature_FullMethodName      = "/api.settings.v1.Settings/CreateAlertFeature"
	Settings_UpdateAlertFeature_FullMethodName      = "/api.settings.v1.Settings/UpdateAlertFeature"
	Settings_DeleteAlertFeature_FullMethodName      = "/api.settings.v1.Settings/DeleteAlertFeature"
	Settings_GetBatchAlertFeature_FullMethodName    = "/api.settings.v1.Settings/GetBatchAlertFeature"
	Settings_ListAlertFeature_FullMethodName        = "/api.settings.v1.Settings/ListAlertFeature"
	Settings_ListAlertLevel_FullMethodName          = "/api.settings.v1.Settings/ListAlertLevel"
	Settings_GetAlertLevel_FullMethodName           = "/api.settings.v1.Settings/GetAlertLevel"
	Settings_CreateAlertBehavior_FullMethodName     = "/api.settings.v1.Settings/CreateAlertBehavior"
	Settings_UpdateAlertBehavior_FullMethodName     = "/api.settings.v1.Settings/UpdateAlertBehavior"
	Settings_DeleteAlertBehavior_FullMethodName     = "/api.settings.v1.Settings/DeleteAlertBehavior"
	Settings_EnableAlertBehavior_FullMethodName     = "/api.settings.v1.Settings/EnableAlertBehavior"
	Settings_CreateDrawingConfig_FullMethodName     = "/api.settings.v1.Settings/CreateDrawingConfig"
	Settings_GetDrawingConfig_FullMethodName        = "/api.settings.v1.Settings/GetDrawingConfig"
	Settings_DeleteDrawingConfig_FullMethodName     = "/api.settings.v1.Settings/DeleteDrawingConfig"
	Settings_GetDrawingConfigDemo_FullMethodName    = "/api.settings.v1.Settings/GetDrawingConfigDemo"
	Settings_CreateEventConfig_FullMethodName       = "/api.settings.v1.Settings/CreateEventConfig"
	Settings_GetEventConfig_FullMethodName          = "/api.settings.v1.Settings/GetEventConfig"
)

// SettingsClient is the client API for Settings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsClient interface {
	CreateComputingUnit(ctx context.Context, in *CreateComputingUnitRequest, opts ...grpc.CallOption) (*CreateComputingUnitReply, error)
	UpdateComputingUnit(ctx context.Context, in *UpdateComputingUnitRequest, opts ...grpc.CallOption) (*UpdateComputingUnitReply, error)
	DeleteComputingUnit(ctx context.Context, in *DeleteComputingUnitRequest, opts ...grpc.CallOption) (*DeleteComputingUnitReply, error)
	ListComputingUnit(ctx context.Context, in *ListComputingUnitRequest, opts ...grpc.CallOption) (*ListComputingUnitReply, error)
	CreatePusherConfig(ctx context.Context, in *CreatePusherConfigRequest, opts ...grpc.CallOption) (*CreatePusherConfigReply, error)
	GetPusherConfig(ctx context.Context, in *GetPusherConfigRequest, opts ...grpc.CallOption) (*GetPusherConfigReply, error)
	CreateOperatorConfig(ctx context.Context, in *CreateOperatorConfigRequest, opts ...grpc.CallOption) (*CreateOperatorConfigReply, error)
	GetOperatorConfig(ctx context.Context, in *GetOperatorConfigRequest, opts ...grpc.CallOption) (*GetOperatorConfigReply, error)
	CreateMapConfig(ctx context.Context, in *CreateMapConfigRequest, opts ...grpc.CallOption) (*CreateMapConfigReply, error)
	GetMapConfig(ctx context.Context, in *GetMapConfigRequest, opts ...grpc.CallOption) (*GetMapConfigReply, error)
	CreateSystemInfo(ctx context.Context, in *CreateSystemInfoRequest, opts ...grpc.CallOption) (*CreateSystemInfoReply, error)
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoReply, error)
	DeleteSystemInfo(ctx context.Context, in *DeleteSystemInfoRequest, opts ...grpc.CallOption) (*DeleteSystemInfoReply, error)
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleReply, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleReply, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleReply, error)
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleReply, error)
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesReply, error)
	CreateCameraAttr(ctx context.Context, in *CreateCameraAttrRequest, opts ...grpc.CallOption) (*CreateCameraAttrReply, error)
	DeleteCameraAttr(ctx context.Context, in *DeleteCameraAttrRequest, opts ...grpc.CallOption) (*DeleteCameraAttrReply, error)
	GetCameraAttr(ctx context.Context, in *GetCameraAttrRequest, opts ...grpc.CallOption) (*GetCameraAttrReply, error)
	ListCameraAttr(ctx context.Context, in *ListCameraAttrRequest, opts ...grpc.CallOption) (*ListCameraAttrReply, error)
	CreateGeneralParameters(ctx context.Context, in *CreateGeneralParametersRequest, opts ...grpc.CallOption) (*CreateGeneralParametersReply, error)
	UpdateGeneralParameters(ctx context.Context, in *UpdateGeneralParametersRequest, opts ...grpc.CallOption) (*UpdateGeneralParametersReply, error)
	DeleteGeneralParameters(ctx context.Context, in *DeleteGeneralParametersRequest, opts ...grpc.CallOption) (*DeleteGeneralParametersReply, error)
	ListGeneralParameters(ctx context.Context, in *ListGeneralParametersRequest, opts ...grpc.CallOption) (*ListGeneralParametersReply, error)
	//*
	//2024/01/24 告警升级
	CreateAlertFeature(ctx context.Context, in *CreateAlertFeatureRequest, opts ...grpc.CallOption) (*CreateAlertFeatureReply, error)
	UpdateAlertFeature(ctx context.Context, in *UpdateAlertFeatureRequest, opts ...grpc.CallOption) (*UpdateAlertFeatureReply, error)
	DeleteAlertFeature(ctx context.Context, in *DeleteAlertFeatureRequest, opts ...grpc.CallOption) (*DeleteAlertFeatureReply, error)
	GetBatchAlertFeature(ctx context.Context, in *GetBatchAlertFeatureRequest, opts ...grpc.CallOption) (*GetBatchAlertFeatureReply, error)
	ListAlertFeature(ctx context.Context, in *ListAlertFeatureRequest, opts ...grpc.CallOption) (*ListAlertFeatureReply, error)
	ListAlertLevel(ctx context.Context, in *ListAlertLevelRequest, opts ...grpc.CallOption) (*ListAlertLevelReply, error)
	GetAlertLevel(ctx context.Context, in *GetAlertLevelRequest, opts ...grpc.CallOption) (*GetAlertLevelReply, error)
	CreateAlertBehavior(ctx context.Context, in *CreateAlertBehaviorRequest, opts ...grpc.CallOption) (*CreateAlertBehaviorReply, error)
	UpdateAlertBehavior(ctx context.Context, in *UpdateAlertBehaviorRequest, opts ...grpc.CallOption) (*UpdateAlertBehaviorReply, error)
	DeleteAlertBehavior(ctx context.Context, in *DeleteAlertBehaviorRequest, opts ...grpc.CallOption) (*DeleteAlertBehaviorReply, error)
	EnableAlertBehavior(ctx context.Context, in *EnableAlertBehaviorRequest, opts ...grpc.CallOption) (*EnableAlertBehaviorReply, error)
	CreateDrawingConfig(ctx context.Context, in *CreatDrawingConfigRequest, opts ...grpc.CallOption) (*CreateDrawingConfigReply, error)
	GetDrawingConfig(ctx context.Context, in *GetDrawingConfigRequest, opts ...grpc.CallOption) (*GetDrawingConfigReply, error)
	DeleteDrawingConfig(ctx context.Context, in *DeleteDrawingConfigRequest, opts ...grpc.CallOption) (*DeleteDrawingConfigReply, error)
	GetDrawingConfigDemo(ctx context.Context, in *GetDrawingConfigDemoRequest, opts ...grpc.CallOption) (*GetDrawingConfigDemoReply, error)
	CreateEventConfig(ctx context.Context, in *CreateEventConfigRequest, opts ...grpc.CallOption) (*CreateEventConfigReply, error)
	GetEventConfig(ctx context.Context, in *GetEventConfigRequest, opts ...grpc.CallOption) (*GetEventConfigReply, error)
}

type settingsClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsClient(cc grpc.ClientConnInterface) SettingsClient {
	return &settingsClient{cc}
}

func (c *settingsClient) CreateComputingUnit(ctx context.Context, in *CreateComputingUnitRequest, opts ...grpc.CallOption) (*CreateComputingUnitReply, error) {
	out := new(CreateComputingUnitReply)
	err := c.cc.Invoke(ctx, Settings_CreateComputingUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateComputingUnit(ctx context.Context, in *UpdateComputingUnitRequest, opts ...grpc.CallOption) (*UpdateComputingUnitReply, error) {
	out := new(UpdateComputingUnitReply)
	err := c.cc.Invoke(ctx, Settings_UpdateComputingUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteComputingUnit(ctx context.Context, in *DeleteComputingUnitRequest, opts ...grpc.CallOption) (*DeleteComputingUnitReply, error) {
	out := new(DeleteComputingUnitReply)
	err := c.cc.Invoke(ctx, Settings_DeleteComputingUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListComputingUnit(ctx context.Context, in *ListComputingUnitRequest, opts ...grpc.CallOption) (*ListComputingUnitReply, error) {
	out := new(ListComputingUnitReply)
	err := c.cc.Invoke(ctx, Settings_ListComputingUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreatePusherConfig(ctx context.Context, in *CreatePusherConfigRequest, opts ...grpc.CallOption) (*CreatePusherConfigReply, error) {
	out := new(CreatePusherConfigReply)
	err := c.cc.Invoke(ctx, Settings_CreatePusherConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetPusherConfig(ctx context.Context, in *GetPusherConfigRequest, opts ...grpc.CallOption) (*GetPusherConfigReply, error) {
	out := new(GetPusherConfigReply)
	err := c.cc.Invoke(ctx, Settings_GetPusherConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateOperatorConfig(ctx context.Context, in *CreateOperatorConfigRequest, opts ...grpc.CallOption) (*CreateOperatorConfigReply, error) {
	out := new(CreateOperatorConfigReply)
	err := c.cc.Invoke(ctx, Settings_CreateOperatorConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetOperatorConfig(ctx context.Context, in *GetOperatorConfigRequest, opts ...grpc.CallOption) (*GetOperatorConfigReply, error) {
	out := new(GetOperatorConfigReply)
	err := c.cc.Invoke(ctx, Settings_GetOperatorConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateMapConfig(ctx context.Context, in *CreateMapConfigRequest, opts ...grpc.CallOption) (*CreateMapConfigReply, error) {
	out := new(CreateMapConfigReply)
	err := c.cc.Invoke(ctx, Settings_CreateMapConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetMapConfig(ctx context.Context, in *GetMapConfigRequest, opts ...grpc.CallOption) (*GetMapConfigReply, error) {
	out := new(GetMapConfigReply)
	err := c.cc.Invoke(ctx, Settings_GetMapConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateSystemInfo(ctx context.Context, in *CreateSystemInfoRequest, opts ...grpc.CallOption) (*CreateSystemInfoReply, error) {
	out := new(CreateSystemInfoReply)
	err := c.cc.Invoke(ctx, Settings_CreateSystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoReply, error) {
	out := new(GetSystemInfoReply)
	err := c.cc.Invoke(ctx, Settings_GetSystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteSystemInfo(ctx context.Context, in *DeleteSystemInfoRequest, opts ...grpc.CallOption) (*DeleteSystemInfoReply, error) {
	out := new(DeleteSystemInfoReply)
	err := c.cc.Invoke(ctx, Settings_DeleteSystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleReply, error) {
	out := new(CreateModuleReply)
	err := c.cc.Invoke(ctx, Settings_CreateModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleReply, error) {
	out := new(DeleteModuleReply)
	err := c.cc.Invoke(ctx, Settings_DeleteModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleReply, error) {
	out := new(UpdateModuleReply)
	err := c.cc.Invoke(ctx, Settings_UpdateModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleReply, error) {
	out := new(GetModuleReply)
	err := c.cc.Invoke(ctx, Settings_GetModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesReply, error) {
	out := new(ListModulesReply)
	err := c.cc.Invoke(ctx, Settings_ListModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateCameraAttr(ctx context.Context, in *CreateCameraAttrRequest, opts ...grpc.CallOption) (*CreateCameraAttrReply, error) {
	out := new(CreateCameraAttrReply)
	err := c.cc.Invoke(ctx, Settings_CreateCameraAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteCameraAttr(ctx context.Context, in *DeleteCameraAttrRequest, opts ...grpc.CallOption) (*DeleteCameraAttrReply, error) {
	out := new(DeleteCameraAttrReply)
	err := c.cc.Invoke(ctx, Settings_DeleteCameraAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetCameraAttr(ctx context.Context, in *GetCameraAttrRequest, opts ...grpc.CallOption) (*GetCameraAttrReply, error) {
	out := new(GetCameraAttrReply)
	err := c.cc.Invoke(ctx, Settings_GetCameraAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListCameraAttr(ctx context.Context, in *ListCameraAttrRequest, opts ...grpc.CallOption) (*ListCameraAttrReply, error) {
	out := new(ListCameraAttrReply)
	err := c.cc.Invoke(ctx, Settings_ListCameraAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateGeneralParameters(ctx context.Context, in *CreateGeneralParametersRequest, opts ...grpc.CallOption) (*CreateGeneralParametersReply, error) {
	out := new(CreateGeneralParametersReply)
	err := c.cc.Invoke(ctx, Settings_CreateGeneralParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateGeneralParameters(ctx context.Context, in *UpdateGeneralParametersRequest, opts ...grpc.CallOption) (*UpdateGeneralParametersReply, error) {
	out := new(UpdateGeneralParametersReply)
	err := c.cc.Invoke(ctx, Settings_UpdateGeneralParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteGeneralParameters(ctx context.Context, in *DeleteGeneralParametersRequest, opts ...grpc.CallOption) (*DeleteGeneralParametersReply, error) {
	out := new(DeleteGeneralParametersReply)
	err := c.cc.Invoke(ctx, Settings_DeleteGeneralParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListGeneralParameters(ctx context.Context, in *ListGeneralParametersRequest, opts ...grpc.CallOption) (*ListGeneralParametersReply, error) {
	out := new(ListGeneralParametersReply)
	err := c.cc.Invoke(ctx, Settings_ListGeneralParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateAlertFeature(ctx context.Context, in *CreateAlertFeatureRequest, opts ...grpc.CallOption) (*CreateAlertFeatureReply, error) {
	out := new(CreateAlertFeatureReply)
	err := c.cc.Invoke(ctx, Settings_CreateAlertFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateAlertFeature(ctx context.Context, in *UpdateAlertFeatureRequest, opts ...grpc.CallOption) (*UpdateAlertFeatureReply, error) {
	out := new(UpdateAlertFeatureReply)
	err := c.cc.Invoke(ctx, Settings_UpdateAlertFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteAlertFeature(ctx context.Context, in *DeleteAlertFeatureRequest, opts ...grpc.CallOption) (*DeleteAlertFeatureReply, error) {
	out := new(DeleteAlertFeatureReply)
	err := c.cc.Invoke(ctx, Settings_DeleteAlertFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetBatchAlertFeature(ctx context.Context, in *GetBatchAlertFeatureRequest, opts ...grpc.CallOption) (*GetBatchAlertFeatureReply, error) {
	out := new(GetBatchAlertFeatureReply)
	err := c.cc.Invoke(ctx, Settings_GetBatchAlertFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListAlertFeature(ctx context.Context, in *ListAlertFeatureRequest, opts ...grpc.CallOption) (*ListAlertFeatureReply, error) {
	out := new(ListAlertFeatureReply)
	err := c.cc.Invoke(ctx, Settings_ListAlertFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ListAlertLevel(ctx context.Context, in *ListAlertLevelRequest, opts ...grpc.CallOption) (*ListAlertLevelReply, error) {
	out := new(ListAlertLevelReply)
	err := c.cc.Invoke(ctx, Settings_ListAlertLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetAlertLevel(ctx context.Context, in *GetAlertLevelRequest, opts ...grpc.CallOption) (*GetAlertLevelReply, error) {
	out := new(GetAlertLevelReply)
	err := c.cc.Invoke(ctx, Settings_GetAlertLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateAlertBehavior(ctx context.Context, in *CreateAlertBehaviorRequest, opts ...grpc.CallOption) (*CreateAlertBehaviorReply, error) {
	out := new(CreateAlertBehaviorReply)
	err := c.cc.Invoke(ctx, Settings_CreateAlertBehavior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateAlertBehavior(ctx context.Context, in *UpdateAlertBehaviorRequest, opts ...grpc.CallOption) (*UpdateAlertBehaviorReply, error) {
	out := new(UpdateAlertBehaviorReply)
	err := c.cc.Invoke(ctx, Settings_UpdateAlertBehavior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteAlertBehavior(ctx context.Context, in *DeleteAlertBehaviorRequest, opts ...grpc.CallOption) (*DeleteAlertBehaviorReply, error) {
	out := new(DeleteAlertBehaviorReply)
	err := c.cc.Invoke(ctx, Settings_DeleteAlertBehavior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) EnableAlertBehavior(ctx context.Context, in *EnableAlertBehaviorRequest, opts ...grpc.CallOption) (*EnableAlertBehaviorReply, error) {
	out := new(EnableAlertBehaviorReply)
	err := c.cc.Invoke(ctx, Settings_EnableAlertBehavior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateDrawingConfig(ctx context.Context, in *CreatDrawingConfigRequest, opts ...grpc.CallOption) (*CreateDrawingConfigReply, error) {
	out := new(CreateDrawingConfigReply)
	err := c.cc.Invoke(ctx, Settings_CreateDrawingConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetDrawingConfig(ctx context.Context, in *GetDrawingConfigRequest, opts ...grpc.CallOption) (*GetDrawingConfigReply, error) {
	out := new(GetDrawingConfigReply)
	err := c.cc.Invoke(ctx, Settings_GetDrawingConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteDrawingConfig(ctx context.Context, in *DeleteDrawingConfigRequest, opts ...grpc.CallOption) (*DeleteDrawingConfigReply, error) {
	out := new(DeleteDrawingConfigReply)
	err := c.cc.Invoke(ctx, Settings_DeleteDrawingConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetDrawingConfigDemo(ctx context.Context, in *GetDrawingConfigDemoRequest, opts ...grpc.CallOption) (*GetDrawingConfigDemoReply, error) {
	out := new(GetDrawingConfigDemoReply)
	err := c.cc.Invoke(ctx, Settings_GetDrawingConfigDemo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) CreateEventConfig(ctx context.Context, in *CreateEventConfigRequest, opts ...grpc.CallOption) (*CreateEventConfigReply, error) {
	out := new(CreateEventConfigReply)
	err := c.cc.Invoke(ctx, Settings_CreateEventConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetEventConfig(ctx context.Context, in *GetEventConfigRequest, opts ...grpc.CallOption) (*GetEventConfigReply, error) {
	out := new(GetEventConfigReply)
	err := c.cc.Invoke(ctx, Settings_GetEventConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServer is the server API for Settings service.
// All implementations must embed UnimplementedSettingsServer
// for forward compatibility
type SettingsServer interface {
	CreateComputingUnit(context.Context, *CreateComputingUnitRequest) (*CreateComputingUnitReply, error)
	UpdateComputingUnit(context.Context, *UpdateComputingUnitRequest) (*UpdateComputingUnitReply, error)
	DeleteComputingUnit(context.Context, *DeleteComputingUnitRequest) (*DeleteComputingUnitReply, error)
	ListComputingUnit(context.Context, *ListComputingUnitRequest) (*ListComputingUnitReply, error)
	CreatePusherConfig(context.Context, *CreatePusherConfigRequest) (*CreatePusherConfigReply, error)
	GetPusherConfig(context.Context, *GetPusherConfigRequest) (*GetPusherConfigReply, error)
	CreateOperatorConfig(context.Context, *CreateOperatorConfigRequest) (*CreateOperatorConfigReply, error)
	GetOperatorConfig(context.Context, *GetOperatorConfigRequest) (*GetOperatorConfigReply, error)
	CreateMapConfig(context.Context, *CreateMapConfigRequest) (*CreateMapConfigReply, error)
	GetMapConfig(context.Context, *GetMapConfigRequest) (*GetMapConfigReply, error)
	CreateSystemInfo(context.Context, *CreateSystemInfoRequest) (*CreateSystemInfoReply, error)
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoReply, error)
	DeleteSystemInfo(context.Context, *DeleteSystemInfoRequest) (*DeleteSystemInfoReply, error)
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleReply, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleReply, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleReply, error)
	GetModule(context.Context, *GetModuleRequest) (*GetModuleReply, error)
	ListModules(context.Context, *ListModulesRequest) (*ListModulesReply, error)
	CreateCameraAttr(context.Context, *CreateCameraAttrRequest) (*CreateCameraAttrReply, error)
	DeleteCameraAttr(context.Context, *DeleteCameraAttrRequest) (*DeleteCameraAttrReply, error)
	GetCameraAttr(context.Context, *GetCameraAttrRequest) (*GetCameraAttrReply, error)
	ListCameraAttr(context.Context, *ListCameraAttrRequest) (*ListCameraAttrReply, error)
	CreateGeneralParameters(context.Context, *CreateGeneralParametersRequest) (*CreateGeneralParametersReply, error)
	UpdateGeneralParameters(context.Context, *UpdateGeneralParametersRequest) (*UpdateGeneralParametersReply, error)
	DeleteGeneralParameters(context.Context, *DeleteGeneralParametersRequest) (*DeleteGeneralParametersReply, error)
	ListGeneralParameters(context.Context, *ListGeneralParametersRequest) (*ListGeneralParametersReply, error)
	//*
	//2024/01/24 告警升级
	CreateAlertFeature(context.Context, *CreateAlertFeatureRequest) (*CreateAlertFeatureReply, error)
	UpdateAlertFeature(context.Context, *UpdateAlertFeatureRequest) (*UpdateAlertFeatureReply, error)
	DeleteAlertFeature(context.Context, *DeleteAlertFeatureRequest) (*DeleteAlertFeatureReply, error)
	GetBatchAlertFeature(context.Context, *GetBatchAlertFeatureRequest) (*GetBatchAlertFeatureReply, error)
	ListAlertFeature(context.Context, *ListAlertFeatureRequest) (*ListAlertFeatureReply, error)
	ListAlertLevel(context.Context, *ListAlertLevelRequest) (*ListAlertLevelReply, error)
	GetAlertLevel(context.Context, *GetAlertLevelRequest) (*GetAlertLevelReply, error)
	CreateAlertBehavior(context.Context, *CreateAlertBehaviorRequest) (*CreateAlertBehaviorReply, error)
	UpdateAlertBehavior(context.Context, *UpdateAlertBehaviorRequest) (*UpdateAlertBehaviorReply, error)
	DeleteAlertBehavior(context.Context, *DeleteAlertBehaviorRequest) (*DeleteAlertBehaviorReply, error)
	EnableAlertBehavior(context.Context, *EnableAlertBehaviorRequest) (*EnableAlertBehaviorReply, error)
	CreateDrawingConfig(context.Context, *CreatDrawingConfigRequest) (*CreateDrawingConfigReply, error)
	GetDrawingConfig(context.Context, *GetDrawingConfigRequest) (*GetDrawingConfigReply, error)
	DeleteDrawingConfig(context.Context, *DeleteDrawingConfigRequest) (*DeleteDrawingConfigReply, error)
	GetDrawingConfigDemo(context.Context, *GetDrawingConfigDemoRequest) (*GetDrawingConfigDemoReply, error)
	CreateEventConfig(context.Context, *CreateEventConfigRequest) (*CreateEventConfigReply, error)
	GetEventConfig(context.Context, *GetEventConfigRequest) (*GetEventConfigReply, error)
	mustEmbedUnimplementedSettingsServer()
}

// UnimplementedSettingsServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServer struct {
}

func (UnimplementedSettingsServer) CreateComputingUnit(context.Context, *CreateComputingUnitRequest) (*CreateComputingUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComputingUnit not implemented")
}
func (UnimplementedSettingsServer) UpdateComputingUnit(context.Context, *UpdateComputingUnitRequest) (*UpdateComputingUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComputingUnit not implemented")
}
func (UnimplementedSettingsServer) DeleteComputingUnit(context.Context, *DeleteComputingUnitRequest) (*DeleteComputingUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComputingUnit not implemented")
}
func (UnimplementedSettingsServer) ListComputingUnit(context.Context, *ListComputingUnitRequest) (*ListComputingUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComputingUnit not implemented")
}
func (UnimplementedSettingsServer) CreatePusherConfig(context.Context, *CreatePusherConfigRequest) (*CreatePusherConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePusherConfig not implemented")
}
func (UnimplementedSettingsServer) GetPusherConfig(context.Context, *GetPusherConfigRequest) (*GetPusherConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPusherConfig not implemented")
}
func (UnimplementedSettingsServer) CreateOperatorConfig(context.Context, *CreateOperatorConfigRequest) (*CreateOperatorConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperatorConfig not implemented")
}
func (UnimplementedSettingsServer) GetOperatorConfig(context.Context, *GetOperatorConfigRequest) (*GetOperatorConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorConfig not implemented")
}
func (UnimplementedSettingsServer) CreateMapConfig(context.Context, *CreateMapConfigRequest) (*CreateMapConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapConfig not implemented")
}
func (UnimplementedSettingsServer) GetMapConfig(context.Context, *GetMapConfigRequest) (*GetMapConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapConfig not implemented")
}
func (UnimplementedSettingsServer) CreateSystemInfo(context.Context, *CreateSystemInfoRequest) (*CreateSystemInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemInfo not implemented")
}
func (UnimplementedSettingsServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedSettingsServer) DeleteSystemInfo(context.Context, *DeleteSystemInfoRequest) (*DeleteSystemInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemInfo not implemented")
}
func (UnimplementedSettingsServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedSettingsServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedSettingsServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedSettingsServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedSettingsServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedSettingsServer) CreateCameraAttr(context.Context, *CreateCameraAttrRequest) (*CreateCameraAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCameraAttr not implemented")
}
func (UnimplementedSettingsServer) DeleteCameraAttr(context.Context, *DeleteCameraAttrRequest) (*DeleteCameraAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCameraAttr not implemented")
}
func (UnimplementedSettingsServer) GetCameraAttr(context.Context, *GetCameraAttrRequest) (*GetCameraAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCameraAttr not implemented")
}
func (UnimplementedSettingsServer) ListCameraAttr(context.Context, *ListCameraAttrRequest) (*ListCameraAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameraAttr not implemented")
}
func (UnimplementedSettingsServer) CreateGeneralParameters(context.Context, *CreateGeneralParametersRequest) (*CreateGeneralParametersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeneralParameters not implemented")
}
func (UnimplementedSettingsServer) UpdateGeneralParameters(context.Context, *UpdateGeneralParametersRequest) (*UpdateGeneralParametersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeneralParameters not implemented")
}
func (UnimplementedSettingsServer) DeleteGeneralParameters(context.Context, *DeleteGeneralParametersRequest) (*DeleteGeneralParametersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeneralParameters not implemented")
}
func (UnimplementedSettingsServer) ListGeneralParameters(context.Context, *ListGeneralParametersRequest) (*ListGeneralParametersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGeneralParameters not implemented")
}
func (UnimplementedSettingsServer) CreateAlertFeature(context.Context, *CreateAlertFeatureRequest) (*CreateAlertFeatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertFeature not implemented")
}
func (UnimplementedSettingsServer) UpdateAlertFeature(context.Context, *UpdateAlertFeatureRequest) (*UpdateAlertFeatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertFeature not implemented")
}
func (UnimplementedSettingsServer) DeleteAlertFeature(context.Context, *DeleteAlertFeatureRequest) (*DeleteAlertFeatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertFeature not implemented")
}
func (UnimplementedSettingsServer) GetBatchAlertFeature(context.Context, *GetBatchAlertFeatureRequest) (*GetBatchAlertFeatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchAlertFeature not implemented")
}
func (UnimplementedSettingsServer) ListAlertFeature(context.Context, *ListAlertFeatureRequest) (*ListAlertFeatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertFeature not implemented")
}
func (UnimplementedSettingsServer) ListAlertLevel(context.Context, *ListAlertLevelRequest) (*ListAlertLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertLevel not implemented")
}
func (UnimplementedSettingsServer) GetAlertLevel(context.Context, *GetAlertLevelRequest) (*GetAlertLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertLevel not implemented")
}
func (UnimplementedSettingsServer) CreateAlertBehavior(context.Context, *CreateAlertBehaviorRequest) (*CreateAlertBehaviorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertBehavior not implemented")
}
func (UnimplementedSettingsServer) UpdateAlertBehavior(context.Context, *UpdateAlertBehaviorRequest) (*UpdateAlertBehaviorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertBehavior not implemented")
}
func (UnimplementedSettingsServer) DeleteAlertBehavior(context.Context, *DeleteAlertBehaviorRequest) (*DeleteAlertBehaviorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertBehavior not implemented")
}
func (UnimplementedSettingsServer) EnableAlertBehavior(context.Context, *EnableAlertBehaviorRequest) (*EnableAlertBehaviorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAlertBehavior not implemented")
}
func (UnimplementedSettingsServer) CreateDrawingConfig(context.Context, *CreatDrawingConfigRequest) (*CreateDrawingConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrawingConfig not implemented")
}
func (UnimplementedSettingsServer) GetDrawingConfig(context.Context, *GetDrawingConfigRequest) (*GetDrawingConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrawingConfig not implemented")
}
func (UnimplementedSettingsServer) DeleteDrawingConfig(context.Context, *DeleteDrawingConfigRequest) (*DeleteDrawingConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrawingConfig not implemented")
}
func (UnimplementedSettingsServer) GetDrawingConfigDemo(context.Context, *GetDrawingConfigDemoRequest) (*GetDrawingConfigDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrawingConfigDemo not implemented")
}
func (UnimplementedSettingsServer) CreateEventConfig(context.Context, *CreateEventConfigRequest) (*CreateEventConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventConfig not implemented")
}
func (UnimplementedSettingsServer) GetEventConfig(context.Context, *GetEventConfigRequest) (*GetEventConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventConfig not implemented")
}
func (UnimplementedSettingsServer) mustEmbedUnimplementedSettingsServer() {}

// UnsafeSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServer will
// result in compilation errors.
type UnsafeSettingsServer interface {
	mustEmbedUnimplementedSettingsServer()
}

func RegisterSettingsServer(s grpc.ServiceRegistrar, srv SettingsServer) {
	s.RegisterService(&Settings_ServiceDesc, srv)
}

func _Settings_CreateComputingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComputingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateComputingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateComputingUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateComputingUnit(ctx, req.(*CreateComputingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateComputingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComputingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateComputingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_UpdateComputingUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateComputingUnit(ctx, req.(*UpdateComputingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteComputingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComputingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteComputingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteComputingUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteComputingUnit(ctx, req.(*DeleteComputingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListComputingUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComputingUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListComputingUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ListComputingUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListComputingUnit(ctx, req.(*ListComputingUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreatePusherConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePusherConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreatePusherConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreatePusherConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreatePusherConfig(ctx, req.(*CreatePusherConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetPusherConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPusherConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetPusherConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetPusherConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetPusherConfig(ctx, req.(*GetPusherConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateOperatorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateOperatorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateOperatorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateOperatorConfig(ctx, req.(*CreateOperatorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetOperatorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetOperatorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetOperatorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetOperatorConfig(ctx, req.(*GetOperatorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateMapConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateMapConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateMapConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateMapConfig(ctx, req.(*CreateMapConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetMapConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetMapConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetMapConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetMapConfig(ctx, req.(*GetMapConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateSystemInfo(ctx, req.(*CreateSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteSystemInfo(ctx, req.(*DeleteSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateCameraAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCameraAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateCameraAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateCameraAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateCameraAttr(ctx, req.(*CreateCameraAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteCameraAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteCameraAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteCameraAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteCameraAttr(ctx, req.(*DeleteCameraAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetCameraAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCameraAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetCameraAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetCameraAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetCameraAttr(ctx, req.(*GetCameraAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListCameraAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCameraAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListCameraAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ListCameraAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListCameraAttr(ctx, req.(*ListCameraAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateGeneralParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneralParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateGeneralParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateGeneralParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateGeneralParameters(ctx, req.(*CreateGeneralParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateGeneralParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeneralParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateGeneralParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_UpdateGeneralParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateGeneralParameters(ctx, req.(*UpdateGeneralParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteGeneralParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGeneralParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteGeneralParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteGeneralParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteGeneralParameters(ctx, req.(*DeleteGeneralParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListGeneralParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGeneralParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListGeneralParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ListGeneralParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListGeneralParameters(ctx, req.(*ListGeneralParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateAlertFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateAlertFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateAlertFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateAlertFeature(ctx, req.(*CreateAlertFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateAlertFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateAlertFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_UpdateAlertFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateAlertFeature(ctx, req.(*UpdateAlertFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteAlertFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteAlertFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteAlertFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteAlertFeature(ctx, req.(*DeleteAlertFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetBatchAlertFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchAlertFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetBatchAlertFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetBatchAlertFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetBatchAlertFeature(ctx, req.(*GetBatchAlertFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListAlertFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListAlertFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ListAlertFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListAlertFeature(ctx, req.(*ListAlertFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ListAlertLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ListAlertLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ListAlertLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ListAlertLevel(ctx, req.(*ListAlertLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetAlertLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetAlertLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetAlertLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetAlertLevel(ctx, req.(*GetAlertLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateAlertBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateAlertBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateAlertBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateAlertBehavior(ctx, req.(*CreateAlertBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateAlertBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateAlertBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_UpdateAlertBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateAlertBehavior(ctx, req.(*UpdateAlertBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteAlertBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteAlertBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteAlertBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteAlertBehavior(ctx, req.(*DeleteAlertBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_EnableAlertBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAlertBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).EnableAlertBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_EnableAlertBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).EnableAlertBehavior(ctx, req.(*EnableAlertBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateDrawingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatDrawingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateDrawingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateDrawingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateDrawingConfig(ctx, req.(*CreatDrawingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetDrawingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrawingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetDrawingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetDrawingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetDrawingConfig(ctx, req.(*GetDrawingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteDrawingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDrawingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteDrawingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteDrawingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteDrawingConfig(ctx, req.(*DeleteDrawingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetDrawingConfigDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrawingConfigDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetDrawingConfigDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetDrawingConfigDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetDrawingConfigDemo(ctx, req.(*GetDrawingConfigDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_CreateEventConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).CreateEventConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_CreateEventConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).CreateEventConfig(ctx, req.(*CreateEventConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetEventConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetEventConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetEventConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetEventConfig(ctx, req.(*GetEventConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Settings_ServiceDesc is the grpc.ServiceDesc for Settings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Settings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.settings.v1.Settings",
	HandlerType: (*SettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComputingUnit",
			Handler:    _Settings_CreateComputingUnit_Handler,
		},
		{
			MethodName: "UpdateComputingUnit",
			Handler:    _Settings_UpdateComputingUnit_Handler,
		},
		{
			MethodName: "DeleteComputingUnit",
			Handler:    _Settings_DeleteComputingUnit_Handler,
		},
		{
			MethodName: "ListComputingUnit",
			Handler:    _Settings_ListComputingUnit_Handler,
		},
		{
			MethodName: "CreatePusherConfig",
			Handler:    _Settings_CreatePusherConfig_Handler,
		},
		{
			MethodName: "GetPusherConfig",
			Handler:    _Settings_GetPusherConfig_Handler,
		},
		{
			MethodName: "CreateOperatorConfig",
			Handler:    _Settings_CreateOperatorConfig_Handler,
		},
		{
			MethodName: "GetOperatorConfig",
			Handler:    _Settings_GetOperatorConfig_Handler,
		},
		{
			MethodName: "CreateMapConfig",
			Handler:    _Settings_CreateMapConfig_Handler,
		},
		{
			MethodName: "GetMapConfig",
			Handler:    _Settings_GetMapConfig_Handler,
		},
		{
			MethodName: "CreateSystemInfo",
			Handler:    _Settings_CreateSystemInfo_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _Settings_GetSystemInfo_Handler,
		},
		{
			MethodName: "DeleteSystemInfo",
			Handler:    _Settings_DeleteSystemInfo_Handler,
		},
		{
			MethodName: "CreateModule",
			Handler:    _Settings_CreateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _Settings_DeleteModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _Settings_UpdateModule_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _Settings_GetModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _Settings_ListModules_Handler,
		},
		{
			MethodName: "CreateCameraAttr",
			Handler:    _Settings_CreateCameraAttr_Handler,
		},
		{
			MethodName: "DeleteCameraAttr",
			Handler:    _Settings_DeleteCameraAttr_Handler,
		},
		{
			MethodName: "GetCameraAttr",
			Handler:    _Settings_GetCameraAttr_Handler,
		},
		{
			MethodName: "ListCameraAttr",
			Handler:    _Settings_ListCameraAttr_Handler,
		},
		{
			MethodName: "CreateGeneralParameters",
			Handler:    _Settings_CreateGeneralParameters_Handler,
		},
		{
			MethodName: "UpdateGeneralParameters",
			Handler:    _Settings_UpdateGeneralParameters_Handler,
		},
		{
			MethodName: "DeleteGeneralParameters",
			Handler:    _Settings_DeleteGeneralParameters_Handler,
		},
		{
			MethodName: "ListGeneralParameters",
			Handler:    _Settings_ListGeneralParameters_Handler,
		},
		{
			MethodName: "CreateAlertFeature",
			Handler:    _Settings_CreateAlertFeature_Handler,
		},
		{
			MethodName: "UpdateAlertFeature",
			Handler:    _Settings_UpdateAlertFeature_Handler,
		},
		{
			MethodName: "DeleteAlertFeature",
			Handler:    _Settings_DeleteAlertFeature_Handler,
		},
		{
			MethodName: "GetBatchAlertFeature",
			Handler:    _Settings_GetBatchAlertFeature_Handler,
		},
		{
			MethodName: "ListAlertFeature",
			Handler:    _Settings_ListAlertFeature_Handler,
		},
		{
			MethodName: "ListAlertLevel",
			Handler:    _Settings_ListAlertLevel_Handler,
		},
		{
			MethodName: "GetAlertLevel",
			Handler:    _Settings_GetAlertLevel_Handler,
		},
		{
			MethodName: "CreateAlertBehavior",
			Handler:    _Settings_CreateAlertBehavior_Handler,
		},
		{
			MethodName: "UpdateAlertBehavior",
			Handler:    _Settings_UpdateAlertBehavior_Handler,
		},
		{
			MethodName: "DeleteAlertBehavior",
			Handler:    _Settings_DeleteAlertBehavior_Handler,
		},
		{
			MethodName: "EnableAlertBehavior",
			Handler:    _Settings_EnableAlertBehavior_Handler,
		},
		{
			MethodName: "CreateDrawingConfig",
			Handler:    _Settings_CreateDrawingConfig_Handler,
		},
		{
			MethodName: "GetDrawingConfig",
			Handler:    _Settings_GetDrawingConfig_Handler,
		},
		{
			MethodName: "DeleteDrawingConfig",
			Handler:    _Settings_DeleteDrawingConfig_Handler,
		},
		{
			MethodName: "GetDrawingConfigDemo",
			Handler:    _Settings_GetDrawingConfigDemo_Handler,
		},
		{
			MethodName: "CreateEventConfig",
			Handler:    _Settings_CreateEventConfig_Handler,
		},
		{
			MethodName: "GetEventConfig",
			Handler:    _Settings_GetEventConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/settings/v1/settings.proto",
}
