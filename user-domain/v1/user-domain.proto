syntax = "proto3";

package api.userdomain.v1;

import "google/api/annotations.proto";

option go_package = "user-domain/api/user-domain/v1;v1";
option java_multiple_files = true;
option java_package = "api.user-domain.v1";

service UserDomain {
	rpc CreateUserDomain (CreateUserDomainRequest) returns (CreateUserDomainReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/create"
			body: "*"
		};
	}
	rpc UpdateUserDomain (UpdateUserDomainRequest) returns (UpdateUserDomainReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/update"
			body: "*"
		};
	}
	rpc DeleteUserDomain (DeleteUserDomainRequest) returns (DeleteUserDomainReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/delete"
			body: "*"
		};
	}
	rpc GetUserDomain (GetUserDomainRequest) returns (GetUserDomainReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/get"
			body: "*"
		};
	}
	rpc FindUserDomain (FindUserDomainRequest) returns (FindUserDomainReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/find"
			body: "*"
		};
	}
	rpc ListUserDomain (ListUserDomainRequest) returns (ListUserDomainReply) {
		option (google.api.http) = {
			get: "/api/v1/userdomain/list"
		};
	}
	rpc ListUserDomainByUser (ListUserDomainByUserRequest) returns (ListUserDomainByUserReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/list/user"
			body: "*"
		};
	}
	rpc ListFeatures (ListFeaturesRequest) returns (ListFeaturesReply) {
		option (google.api.http) = {
			post: "/api/v1/userdomain/list/features"
			body: "*"
		};
	}
}

message Domain {
	uint64 id = 1;
	int64 created_at = 2;
	int64 updated_at = 3;
	string name = 4;
	string describe = 5;
	repeated uint64 regions = 6;
	repeated uint64 features = 7;
	repeated uint64 users = 8;
}

message CreateUserDomainRequest {
	message Domain {
		string name = 1;
		string describe = 2;
		repeated uint64 regions = 3;
		repeated uint64 features = 4;
		repeated uint64 users = 5;
	}
	Domain domain = 1;
}
message CreateUserDomainReply {
	Domain domain = 1;
}

message UpdateUserDomainRequest {
	message Domain {
		uint64 id = 1;
		string name = 2;
		string describe = 3;
		repeated uint64 regions = 4;
		repeated uint64 features = 5;
		repeated uint64 users = 6;
	}
	Domain domain = 1;
}
message UpdateUserDomainReply {
	Domain domain = 1;
}

message DeleteUserDomainRequest {
	uint64 id = 1;
}
message DeleteUserDomainReply {
	Domain domain = 1;
}

message GetUserDomainRequest {
	uint64 id = 1;
}
message GetUserDomainReply {
	Domain domain = 1;
}

message FindUserDomainRequest {
	string name = 1;
	int64 index = 2;
	int64 size = 3;
}
message FindUserDomainReply {
	int64 index = 1;
	int64 size = 2;
	int64 page = 3;
	int64 total = 4;
	repeated Domain domains = 5;
}

message ListUserDomainRequest {}
message ListUserDomainReply {
	repeated Domain domains = 1;
}

message ListUserDomainByUserRequest {
	uint64 id = 1;
}
message ListUserDomainByUserReply {
	repeated Domain domains = 1;
}

message Feature {
	uint32 id = 1;
	string name = 2;
}

message ListFeaturesRequest {}
message ListFeaturesReply {
	message FeatureList {
		repeated Feature features = 1;
	}
	map<string,FeatureList> features = 1;
}