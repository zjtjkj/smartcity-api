// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: algo/v1/algo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlgoClient is the client API for Algo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgoClient interface {
	CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*CreateMissionReply, error)
	DeleteMission(ctx context.Context, in *DeleteMissionRequest, opts ...grpc.CallOption) (*DeleteMissionReply, error)
	DeleteMultiMission(ctx context.Context, in *DeleteMissionMultiRequest, opts ...grpc.CallOption) (*DeleteMissionMultiReply, error)
	ListMission(ctx context.Context, in *ListMissionRequest, opts ...grpc.CallOption) (*ListMissionReply, error)
	ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllReply, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearReply, error)
}

type algoClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgoClient(cc grpc.ClientConnInterface) AlgoClient {
	return &algoClient{cc}
}

func (c *algoClient) CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*CreateMissionReply, error) {
	out := new(CreateMissionReply)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/CreateMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) DeleteMission(ctx context.Context, in *DeleteMissionRequest, opts ...grpc.CallOption) (*DeleteMissionReply, error) {
	out := new(DeleteMissionReply)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/DeleteMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) DeleteMultiMission(ctx context.Context, in *DeleteMissionMultiRequest, opts ...grpc.CallOption) (*DeleteMissionMultiReply, error) {
	out := new(DeleteMissionMultiReply)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/DeleteMultiMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) ListMission(ctx context.Context, in *ListMissionRequest, opts ...grpc.CallOption) (*ListMissionReply, error) {
	out := new(ListMissionReply)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/ListMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllReply, error) {
	out := new(ListAllReply)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	out := new(DebugResponse)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/Debug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearReply, error) {
	out := new(ClearReply)
	err := c.cc.Invoke(ctx, "/api.algo.v1.Algo/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgoServer is the server API for Algo service.
// All implementations must embed UnimplementedAlgoServer
// for forward compatibility
type AlgoServer interface {
	CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionReply, error)
	DeleteMission(context.Context, *DeleteMissionRequest) (*DeleteMissionReply, error)
	DeleteMultiMission(context.Context, *DeleteMissionMultiRequest) (*DeleteMissionMultiReply, error)
	ListMission(context.Context, *ListMissionRequest) (*ListMissionReply, error)
	ListAll(context.Context, *ListAllRequest) (*ListAllReply, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Debug(context.Context, *DebugRequest) (*DebugResponse, error)
	Clear(context.Context, *ClearRequest) (*ClearReply, error)
	mustEmbedUnimplementedAlgoServer()
}

// UnimplementedAlgoServer must be embedded to have forward compatible implementations.
type UnimplementedAlgoServer struct {
}

func (UnimplementedAlgoServer) CreateMission(context.Context, *CreateMissionRequest) (*CreateMissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMission not implemented")
}
func (UnimplementedAlgoServer) DeleteMission(context.Context, *DeleteMissionRequest) (*DeleteMissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMission not implemented")
}
func (UnimplementedAlgoServer) DeleteMultiMission(context.Context, *DeleteMissionMultiRequest) (*DeleteMissionMultiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMultiMission not implemented")
}
func (UnimplementedAlgoServer) ListMission(context.Context, *ListMissionRequest) (*ListMissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMission not implemented")
}
func (UnimplementedAlgoServer) ListAll(context.Context, *ListAllRequest) (*ListAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedAlgoServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedAlgoServer) Debug(context.Context, *DebugRequest) (*DebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedAlgoServer) Clear(context.Context, *ClearRequest) (*ClearReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedAlgoServer) mustEmbedUnimplementedAlgoServer() {}

// UnsafeAlgoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlgoServer will
// result in compilation errors.
type UnsafeAlgoServer interface {
	mustEmbedUnimplementedAlgoServer()
}

func RegisterAlgoServer(s grpc.ServiceRegistrar, srv AlgoServer) {
	s.RegisterService(&Algo_ServiceDesc, srv)
}

func _Algo_CreateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).CreateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/CreateMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).CreateMission(ctx, req.(*CreateMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_DeleteMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).DeleteMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/DeleteMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).DeleteMission(ctx, req.(*DeleteMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_DeleteMultiMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMissionMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).DeleteMultiMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/DeleteMultiMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).DeleteMultiMission(ctx, req.(*DeleteMissionMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_ListMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).ListMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/ListMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).ListMission(ctx, req.(*ListMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).ListAll(ctx, req.(*ListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).Debug(ctx, req.(*DebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Algo_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.algo.v1.Algo/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Algo_ServiceDesc is the grpc.ServiceDesc for Algo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Algo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.algo.v1.Algo",
	HandlerType: (*AlgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMission",
			Handler:    _Algo_CreateMission_Handler,
		},
		{
			MethodName: "DeleteMission",
			Handler:    _Algo_DeleteMission_Handler,
		},
		{
			MethodName: "DeleteMultiMission",
			Handler:    _Algo_DeleteMultiMission_Handler,
		},
		{
			MethodName: "ListMission",
			Handler:    _Algo_ListMission_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _Algo_ListAll_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Algo_Info_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _Algo_Debug_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Algo_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "algo/v1/algo.proto",
}
