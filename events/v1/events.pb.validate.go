// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: events/v1/events.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequestMultiError, or nil if none found.
func (m *CreateEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetId()) != 36 {
		err := CreateEventRequestValidationError{
			field:  "Id",
			reason: "value length must be 36 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMid() <= 0 {
		err := CreateEventRequestValidationError{
			field:  "Mid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateEventRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreated()) < 1 {
		err := CreateEventRequestValidationError{
			field:  "Created",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetImage()) < 1 {
		err := CreateEventRequestValidationError{
			field:  "Image",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Finished

	if len(m.GetObjects()) < 1 {
		err := CreateEventRequestValidationError{
			field:  "Objects",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequestValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEventRequestMultiError(errors)
	}

	return nil
}

// CreateEventRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEventRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequestMultiError) AllErrors() []error { return m }

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

// Validate checks the field values on CreateEventReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateEventReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventReplyMultiError, or nil if none found.
func (m *CreateEventReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateEventReplyMultiError(errors)
	}

	return nil
}

// CreateEventReplyMultiError is an error wrapping multiple validation errors
// returned by CreateEventReply.ValidateAll() if the designated constraints
// aren't met.
type CreateEventReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventReplyMultiError) AllErrors() []error { return m }

// CreateEventReplyValidationError is the validation error returned by
// CreateEventReply.Validate if the designated constraints aren't met.
type CreateEventReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventReplyValidationError) ErrorName() string { return "CreateEventReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateEventReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventReplyValidationError{}

// Validate checks the field values on CreateEventRequest_Point with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest_Point) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest_Point with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequest_PointMultiError, or nil if none found.
func (m *CreateEventRequest_Point) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest_Point) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetX(); val < 0 || val > 10000 {
		err := CreateEventRequest_PointValidationError{
			field:  "X",
			reason: "value must be inside range [0, 10000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetY(); val < 0 || val > 10000 {
		err := CreateEventRequest_PointValidationError{
			field:  "Y",
			reason: "value must be inside range [0, 10000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEventRequest_PointMultiError(errors)
	}

	return nil
}

// CreateEventRequest_PointMultiError is an error wrapping multiple validation
// errors returned by CreateEventRequest_Point.ValidateAll() if the designated
// constraints aren't met.
type CreateEventRequest_PointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequest_PointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequest_PointMultiError) AllErrors() []error { return m }

// CreateEventRequest_PointValidationError is the validation error returned by
// CreateEventRequest_Point.Validate if the designated constraints aren't met.
type CreateEventRequest_PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequest_PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequest_PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequest_PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequest_PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequest_PointValidationError) ErrorName() string {
	return "CreateEventRequest_PointValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequest_PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest_Point.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequest_PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequest_PointValidationError{}

// Validate checks the field values on CreateEventRequest_Property with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest_Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest_Property with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequest_PropertyMultiError, or nil if none found.
func (m *CreateEventRequest_Property) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest_Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := CreateEventRequest_PropertyValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := CreateEventRequest_PropertyValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEventRequest_PropertyMultiError(errors)
	}

	return nil
}

// CreateEventRequest_PropertyMultiError is an error wrapping multiple
// validation errors returned by CreateEventRequest_Property.ValidateAll() if
// the designated constraints aren't met.
type CreateEventRequest_PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequest_PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequest_PropertyMultiError) AllErrors() []error { return m }

// CreateEventRequest_PropertyValidationError is the validation error returned
// by CreateEventRequest_Property.Validate if the designated constraints
// aren't met.
type CreateEventRequest_PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequest_PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequest_PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequest_PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequest_PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequest_PropertyValidationError) ErrorName() string {
	return "CreateEventRequest_PropertyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequest_PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest_Property.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequest_PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequest_PropertyValidationError{}

// Validate checks the field values on CreateEventRequest_Object with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest_Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest_Object with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequest_ObjectMultiError, or nil if none found.
func (m *CreateEventRequest_Object) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest_Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CreateEventRequest_ObjectValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Aid

	if len(m.GetPoints()) != 2 {
		err := CreateEventRequest_ObjectValidationError{
			field:  "Points",
			reason: "value must contain exactly 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequest_ObjectValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequest_ObjectValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequest_ObjectValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequest_ObjectValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequest_ObjectValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequest_ObjectValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEventRequest_ObjectMultiError(errors)
	}

	return nil
}

// CreateEventRequest_ObjectMultiError is an error wrapping multiple validation
// errors returned by CreateEventRequest_Object.ValidateAll() if the
// designated constraints aren't met.
type CreateEventRequest_ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequest_ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequest_ObjectMultiError) AllErrors() []error { return m }

// CreateEventRequest_ObjectValidationError is the validation error returned by
// CreateEventRequest_Object.Validate if the designated constraints aren't met.
type CreateEventRequest_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequest_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequest_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequest_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequest_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequest_ObjectValidationError) ErrorName() string {
	return "CreateEventRequest_ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequest_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequest_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequest_ObjectValidationError{}
