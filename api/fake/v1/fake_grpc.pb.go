// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: fake/v1/fake.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FakeClient is the client API for Fake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FakeClient interface {
	CreateFakeEvent(ctx context.Context, in *CreateFakeEventRequest, opts ...grpc.CallOption) (*CreateFakeEventReply, error)
}

type fakeClient struct {
	cc grpc.ClientConnInterface
}

func NewFakeClient(cc grpc.ClientConnInterface) FakeClient {
	return &fakeClient{cc}
}

func (c *fakeClient) CreateFakeEvent(ctx context.Context, in *CreateFakeEventRequest, opts ...grpc.CallOption) (*CreateFakeEventReply, error) {
	out := new(CreateFakeEventReply)
	err := c.cc.Invoke(ctx, "/api.fake.v1.Fake/CreateFakeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FakeServer is the server API for Fake service.
// All implementations must embed UnimplementedFakeServer
// for forward compatibility
type FakeServer interface {
	CreateFakeEvent(context.Context, *CreateFakeEventRequest) (*CreateFakeEventReply, error)
	mustEmbedUnimplementedFakeServer()
}

// UnimplementedFakeServer must be embedded to have forward compatible implementations.
type UnimplementedFakeServer struct {
}

func (UnimplementedFakeServer) CreateFakeEvent(context.Context, *CreateFakeEventRequest) (*CreateFakeEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFakeEvent not implemented")
}
func (UnimplementedFakeServer) mustEmbedUnimplementedFakeServer() {}

// UnsafeFakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FakeServer will
// result in compilation errors.
type UnsafeFakeServer interface {
	mustEmbedUnimplementedFakeServer()
}

func RegisterFakeServer(s grpc.ServiceRegistrar, srv FakeServer) {
	s.RegisterService(&Fake_ServiceDesc, srv)
}

func _Fake_CreateFakeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFakeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FakeServer).CreateFakeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.fake.v1.Fake/CreateFakeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FakeServer).CreateFakeEvent(ctx, req.(*CreateFakeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fake_ServiceDesc is the grpc.ServiceDesc for Fake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.fake.v1.Fake",
	HandlerType: (*FakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFakeEvent",
			Handler:    _Fake_CreateFakeEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fake/v1/fake.proto",
}
